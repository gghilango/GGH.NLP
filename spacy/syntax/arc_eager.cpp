/* Generated by Cython 0.23.5 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_5"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__spacy__syntax__arc_eager
#define __PYX_HAVE_API__spacy__syntax__arc_eager
#include "stdint.h"
#include "string.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "murmurhash/MurmurHash3.h"
#include "murmurhash/MurmurHash2.h"
#include "stdlib.h"
#include "stdio.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "spacy\\syntax\\arc_eager.pyx",
  "__init__.pxd",
  "spacy\\lexeme.pxd",
  "spacy\\syntax\\_state.pxd",
  "spacy\\syntax\\stateclass.pxd",
  "cymem.pxd",
  "maps.pxd",
  "spacy\\strings.pxd",
  "spacy\\morphology.pxd",
  "spacy\\vocab.pxd",
  "type.pxd",
  "spacy\\gold.pxd",
};

/* "thinc\typedefs.pxd":7
 * 
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 */
typedef float __pyx_t_5thinc_8typedefs_weight_t;

/* "thinc\typedefs.pxd":8
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_atom_t;

/* "thinc\typedefs.pxd":9
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_feat_t;

/* "thinc\typedefs.pxd":10
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_hash_t;

/* "thinc\typedefs.pxd":11
 * ctypedef uint64_t feat_t
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 */
typedef int32_t __pyx_t_5thinc_8typedefs_class_t;

/* "thinc\typedefs.pxd":12
 * ctypedef uint64_t hash_t
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_count_t;

/* "thinc\typedefs.pxd":13
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t len_t
 * ctypedef int32_t idx_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_time_t;

/* "thinc\typedefs.pxd":14
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t idx_t
 * 
 */
typedef int32_t __pyx_t_5thinc_8typedefs_len_t;

/* "thinc\typedefs.pxd":15
 * ctypedef uint32_t time_t
 * ctypedef int32_t len_t
 * ctypedef int32_t idx_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef int32_t __pyx_t_5thinc_8typedefs_idx_t;

/* "typedefs.pxd":5
 * 
 * 
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef char* utf8_t
 * ctypedef int32_t attr_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_hash_t;

/* "typedefs.pxd":7
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t
 * ctypedef int32_t attr_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 */
typedef int32_t __pyx_t_5spacy_8typedefs_attr_t;

/* "typedefs.pxd":8
 * ctypedef char* utf8_t
 * ctypedef int32_t attr_t
 * ctypedef uint64_t flags_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t
 */
typedef uint64_t __pyx_t_5spacy_8typedefs_flags_t;

/* "typedefs.pxd":9
 * ctypedef int32_t attr_t
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t tag_t
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_len_t;

/* "typedefs.pxd":10
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t             # <<<<<<<<<<<<<<
 */
typedef uint16_t __pyx_t_5spacy_8typedefs_tag_t;

/* "preshed\maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5spacy_7strings_StringStore;
struct __pyx_obj_5spacy_10morphology_Morphology;
struct __pyx_obj_5spacy_5vocab_Vocab;
struct __pyx_obj_5spacy_6lexeme_Lexeme;
struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass;
struct __pyx_obj_5spacy_4gold_GoldParse;
struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem;
struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager;
struct __pyx_obj_5spacy_6syntax_9arc_eager_Shift;
struct __pyx_obj_5spacy_6syntax_9arc_eager_Reduce;
struct __pyx_obj_5spacy_6syntax_9arc_eager_LeftArc;
struct __pyx_obj_5spacy_6syntax_9arc_eager_RightArc;
struct __pyx_obj_5spacy_6syntax_9arc_eager_Break;

/* "typedefs.pxd":6
 * 
 * ctypedef uint64_t hash_t
 * ctypedef char* utf8_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t attr_t
 * ctypedef uint64_t flags_t
 */
typedef char *__pyx_t_5spacy_8typedefs_utf8_t;

/* "symbols.pxd":1
 * cpdef enum symbol_t:             # <<<<<<<<<<<<<<
 *     NIL
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_7symbols_symbol_t {
  __pyx_e_5spacy_7symbols_NIL,
  __pyx_e_5spacy_7symbols_IS_ALPHA,
  __pyx_e_5spacy_7symbols_IS_ASCII,
  __pyx_e_5spacy_7symbols_IS_DIGIT,
  __pyx_e_5spacy_7symbols_IS_LOWER,
  __pyx_e_5spacy_7symbols_IS_PUNCT,
  __pyx_e_5spacy_7symbols_IS_SPACE,
  __pyx_e_5spacy_7symbols_IS_TITLE,
  __pyx_e_5spacy_7symbols_IS_UPPER,
  __pyx_e_5spacy_7symbols_LIKE_URL,
  __pyx_e_5spacy_7symbols_LIKE_NUM,
  __pyx_e_5spacy_7symbols_LIKE_EMAIL,
  __pyx_e_5spacy_7symbols_IS_STOP,
  __pyx_e_5spacy_7symbols_IS_OOV,
  __pyx_e_5spacy_7symbols_FLAG14 = 14,
  __pyx_e_5spacy_7symbols_FLAG15,
  __pyx_e_5spacy_7symbols_FLAG16,
  __pyx_e_5spacy_7symbols_FLAG17,
  __pyx_e_5spacy_7symbols_FLAG18,
  __pyx_e_5spacy_7symbols_FLAG19,
  __pyx_e_5spacy_7symbols_FLAG20,
  __pyx_e_5spacy_7symbols_FLAG21,
  __pyx_e_5spacy_7symbols_FLAG22,
  __pyx_e_5spacy_7symbols_FLAG23,
  __pyx_e_5spacy_7symbols_FLAG24,
  __pyx_e_5spacy_7symbols_FLAG25,
  __pyx_e_5spacy_7symbols_FLAG26,
  __pyx_e_5spacy_7symbols_FLAG27,
  __pyx_e_5spacy_7symbols_FLAG28,
  __pyx_e_5spacy_7symbols_FLAG29,
  __pyx_e_5spacy_7symbols_FLAG30,
  __pyx_e_5spacy_7symbols_FLAG31,
  __pyx_e_5spacy_7symbols_FLAG32,
  __pyx_e_5spacy_7symbols_FLAG33,
  __pyx_e_5spacy_7symbols_FLAG34,
  __pyx_e_5spacy_7symbols_FLAG35,
  __pyx_e_5spacy_7symbols_FLAG36,
  __pyx_e_5spacy_7symbols_FLAG37,
  __pyx_e_5spacy_7symbols_FLAG38,
  __pyx_e_5spacy_7symbols_FLAG39,
  __pyx_e_5spacy_7symbols_FLAG40,
  __pyx_e_5spacy_7symbols_FLAG41,
  __pyx_e_5spacy_7symbols_FLAG42,
  __pyx_e_5spacy_7symbols_FLAG43,
  __pyx_e_5spacy_7symbols_FLAG44,
  __pyx_e_5spacy_7symbols_FLAG45,
  __pyx_e_5spacy_7symbols_FLAG46,
  __pyx_e_5spacy_7symbols_FLAG47,
  __pyx_e_5spacy_7symbols_FLAG48,
  __pyx_e_5spacy_7symbols_FLAG49,
  __pyx_e_5spacy_7symbols_FLAG50,
  __pyx_e_5spacy_7symbols_FLAG51,
  __pyx_e_5spacy_7symbols_FLAG52,
  __pyx_e_5spacy_7symbols_FLAG53,
  __pyx_e_5spacy_7symbols_FLAG54,
  __pyx_e_5spacy_7symbols_FLAG55,
  __pyx_e_5spacy_7symbols_FLAG56,
  __pyx_e_5spacy_7symbols_FLAG57,
  __pyx_e_5spacy_7symbols_FLAG58,
  __pyx_e_5spacy_7symbols_FLAG59,
  __pyx_e_5spacy_7symbols_FLAG60,
  __pyx_e_5spacy_7symbols_FLAG61,
  __pyx_e_5spacy_7symbols_FLAG62,
  __pyx_e_5spacy_7symbols_FLAG63,
  __pyx_e_5spacy_7symbols_ID,
  __pyx_e_5spacy_7symbols_ORTH,
  __pyx_e_5spacy_7symbols_LOWER,
  __pyx_e_5spacy_7symbols_NORM,
  __pyx_e_5spacy_7symbols_SHAPE,
  __pyx_e_5spacy_7symbols_PREFIX,
  __pyx_e_5spacy_7symbols_SUFFIX,
  __pyx_e_5spacy_7symbols_LENGTH,
  __pyx_e_5spacy_7symbols_CLUSTER,
  __pyx_e_5spacy_7symbols_LEMMA,
  __pyx_e_5spacy_7symbols_POS,
  __pyx_e_5spacy_7symbols_TAG,
  __pyx_e_5spacy_7symbols_DEP,
  __pyx_e_5spacy_7symbols_ENT_IOB,
  __pyx_e_5spacy_7symbols_ENT_TYPE,
  __pyx_e_5spacy_7symbols_HEAD,
  __pyx_e_5spacy_7symbols_SPACY,
  __pyx_e_5spacy_7symbols_PROB,
  __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_7symbols_ADP,
  __pyx_e_5spacy_7symbols_ADV,
  __pyx_e_5spacy_7symbols_AUX,
  __pyx_e_5spacy_7symbols_CONJ,
  __pyx_e_5spacy_7symbols_CCONJ,
  __pyx_e_5spacy_7symbols_DET,
  __pyx_e_5spacy_7symbols_INTJ,
  __pyx_e_5spacy_7symbols_NOUN,
  __pyx_e_5spacy_7symbols_NUM,
  __pyx_e_5spacy_7symbols_PART,
  __pyx_e_5spacy_7symbols_PRON,
  __pyx_e_5spacy_7symbols_PROPN,
  __pyx_e_5spacy_7symbols_PUNCT,
  __pyx_e_5spacy_7symbols_SCONJ,
  __pyx_e_5spacy_7symbols_SYM,
  __pyx_e_5spacy_7symbols_VERB,
  __pyx_e_5spacy_7symbols_X,
  __pyx_e_5spacy_7symbols_EOL,
  __pyx_e_5spacy_7symbols_SPACE,
  __pyx_e_5spacy_7symbols_Animacy_anim,
  __pyx_e_5spacy_7symbols_Animacy_inam,
  __pyx_e_5spacy_7symbols_Animacy_hum,
  __pyx_e_5spacy_7symbols_Aspect_freq,
  __pyx_e_5spacy_7symbols_Aspect_imp,
  __pyx_e_5spacy_7symbols_Aspect_mod,
  __pyx_e_5spacy_7symbols_Aspect_none,
  __pyx_e_5spacy_7symbols_Aspect_perf,
  __pyx_e_5spacy_7symbols_Aspect_iter,
  __pyx_e_5spacy_7symbols_Aspect_hab,
  __pyx_e_5spacy_7symbols_Case_abe,
  __pyx_e_5spacy_7symbols_Case_abl,
  __pyx_e_5spacy_7symbols_Case_abs,
  __pyx_e_5spacy_7symbols_Case_acc,
  __pyx_e_5spacy_7symbols_Case_ade,
  __pyx_e_5spacy_7symbols_Case_all,
  __pyx_e_5spacy_7symbols_Case_cau,
  __pyx_e_5spacy_7symbols_Case_com,
  __pyx_e_5spacy_7symbols_Case_cmp,
  __pyx_e_5spacy_7symbols_Case_dat,
  __pyx_e_5spacy_7symbols_Case_del,
  __pyx_e_5spacy_7symbols_Case_dis,
  __pyx_e_5spacy_7symbols_Case_ela,
  __pyx_e_5spacy_7symbols_Case_equ,
  __pyx_e_5spacy_7symbols_Case_ess,
  __pyx_e_5spacy_7symbols_Case_gen,
  __pyx_e_5spacy_7symbols_Case_ill,
  __pyx_e_5spacy_7symbols_Case_ine,
  __pyx_e_5spacy_7symbols_Case_ins,
  __pyx_e_5spacy_7symbols_Case_loc,
  __pyx_e_5spacy_7symbols_Case_lat,
  __pyx_e_5spacy_7symbols_Case_nom,
  __pyx_e_5spacy_7symbols_Case_par,
  __pyx_e_5spacy_7symbols_Case_sub,
  __pyx_e_5spacy_7symbols_Case_sup,
  __pyx_e_5spacy_7symbols_Case_tem,
  __pyx_e_5spacy_7symbols_Case_ter,
  __pyx_e_5spacy_7symbols_Case_tra,
  __pyx_e_5spacy_7symbols_Case_voc,
  __pyx_e_5spacy_7symbols_Definite_two,
  __pyx_e_5spacy_7symbols_Definite_def,
  __pyx_e_5spacy_7symbols_Definite_red,
  __pyx_e_5spacy_7symbols_Definite_cons,
  __pyx_e_5spacy_7symbols_Definite_ind,
  __pyx_e_5spacy_7symbols_Definite_spec,
  __pyx_e_5spacy_7symbols_Degree_cmp,
  __pyx_e_5spacy_7symbols_Degree_comp,
  __pyx_e_5spacy_7symbols_Degree_none,
  __pyx_e_5spacy_7symbols_Degree_pos,
  __pyx_e_5spacy_7symbols_Degree_sup,
  __pyx_e_5spacy_7symbols_Degree_abs,
  __pyx_e_5spacy_7symbols_Degree_com,
  __pyx_e_5spacy_7symbols_Degree_dim,
  __pyx_e_5spacy_7symbols_Degree_equ,
  __pyx_e_5spacy_7symbols_Evident_nfh,
  __pyx_e_5spacy_7symbols_Gender_com,
  __pyx_e_5spacy_7symbols_Gender_fem,
  __pyx_e_5spacy_7symbols_Gender_masc,
  __pyx_e_5spacy_7symbols_Gender_neut,
  __pyx_e_5spacy_7symbols_Mood_cnd,
  __pyx_e_5spacy_7symbols_Mood_imp,
  __pyx_e_5spacy_7symbols_Mood_ind,
  __pyx_e_5spacy_7symbols_Mood_n,
  __pyx_e_5spacy_7symbols_Mood_pot,
  __pyx_e_5spacy_7symbols_Mood_sub,
  __pyx_e_5spacy_7symbols_Mood_opt,
  __pyx_e_5spacy_7symbols_Mood_prp,
  __pyx_e_5spacy_7symbols_Mood_adm,
  __pyx_e_5spacy_7symbols_Negative_neg,
  __pyx_e_5spacy_7symbols_Negative_pos,
  __pyx_e_5spacy_7symbols_Negative_yes,
  __pyx_e_5spacy_7symbols_Polarity_neg,
  __pyx_e_5spacy_7symbols_Polarity_pos,
  __pyx_e_5spacy_7symbols_Number_com,
  __pyx_e_5spacy_7symbols_Number_dual,
  __pyx_e_5spacy_7symbols_Number_none,
  __pyx_e_5spacy_7symbols_Number_plur,
  __pyx_e_5spacy_7symbols_Number_sing,
  __pyx_e_5spacy_7symbols_Number_ptan,
  __pyx_e_5spacy_7symbols_Number_count,
  __pyx_e_5spacy_7symbols_Number_tri,
  __pyx_e_5spacy_7symbols_NumType_card,
  __pyx_e_5spacy_7symbols_NumType_dist,
  __pyx_e_5spacy_7symbols_NumType_frac,
  __pyx_e_5spacy_7symbols_NumType_gen,
  __pyx_e_5spacy_7symbols_NumType_mult,
  __pyx_e_5spacy_7symbols_NumType_none,
  __pyx_e_5spacy_7symbols_NumType_ord,
  __pyx_e_5spacy_7symbols_NumType_sets,
  __pyx_e_5spacy_7symbols_Person_one,
  __pyx_e_5spacy_7symbols_Person_two,
  __pyx_e_5spacy_7symbols_Person_three,
  __pyx_e_5spacy_7symbols_Person_none,
  __pyx_e_5spacy_7symbols_Poss_yes,
  __pyx_e_5spacy_7symbols_PronType_advPart,
  __pyx_e_5spacy_7symbols_PronType_art,
  __pyx_e_5spacy_7symbols_PronType_default,
  __pyx_e_5spacy_7symbols_PronType_dem,
  __pyx_e_5spacy_7symbols_PronType_ind,
  __pyx_e_5spacy_7symbols_PronType_int,
  __pyx_e_5spacy_7symbols_PronType_neg,
  __pyx_e_5spacy_7symbols_PronType_prs,
  __pyx_e_5spacy_7symbols_PronType_rcp,
  __pyx_e_5spacy_7symbols_PronType_rel,
  __pyx_e_5spacy_7symbols_PronType_tot,
  __pyx_e_5spacy_7symbols_PronType_clit,
  __pyx_e_5spacy_7symbols_PronType_exc,
  __pyx_e_5spacy_7symbols_PronType_emp,
  __pyx_e_5spacy_7symbols_Reflex_yes,
  __pyx_e_5spacy_7symbols_Tense_fut,
  __pyx_e_5spacy_7symbols_Tense_imp,
  __pyx_e_5spacy_7symbols_Tense_past,
  __pyx_e_5spacy_7symbols_Tense_pres,
  __pyx_e_5spacy_7symbols_VerbForm_fin,
  __pyx_e_5spacy_7symbols_VerbForm_ger,
  __pyx_e_5spacy_7symbols_VerbForm_inf,
  __pyx_e_5spacy_7symbols_VerbForm_none,
  __pyx_e_5spacy_7symbols_VerbForm_part,
  __pyx_e_5spacy_7symbols_VerbForm_partFut,
  __pyx_e_5spacy_7symbols_VerbForm_partPast,
  __pyx_e_5spacy_7symbols_VerbForm_partPres,
  __pyx_e_5spacy_7symbols_VerbForm_sup,
  __pyx_e_5spacy_7symbols_VerbForm_trans,
  __pyx_e_5spacy_7symbols_VerbForm_conv,
  __pyx_e_5spacy_7symbols_VerbForm_gdv,
  __pyx_e_5spacy_7symbols_VerbForm_vnoun,
  __pyx_e_5spacy_7symbols_Voice_act,
  __pyx_e_5spacy_7symbols_Voice_cau,
  __pyx_e_5spacy_7symbols_Voice_pass,
  __pyx_e_5spacy_7symbols_Voice_mid,
  __pyx_e_5spacy_7symbols_Voice_int,
  __pyx_e_5spacy_7symbols_Voice_antip,
  __pyx_e_5spacy_7symbols_Voice_dir,
  __pyx_e_5spacy_7symbols_Voice_inv,
  __pyx_e_5spacy_7symbols_Abbr_yes,
  __pyx_e_5spacy_7symbols_AdpType_prep,
  __pyx_e_5spacy_7symbols_AdpType_post,
  __pyx_e_5spacy_7symbols_AdpType_voc,
  __pyx_e_5spacy_7symbols_AdpType_comprep,
  __pyx_e_5spacy_7symbols_AdpType_circ,
  __pyx_e_5spacy_7symbols_AdvType_man,
  __pyx_e_5spacy_7symbols_AdvType_loc,
  __pyx_e_5spacy_7symbols_AdvType_tim,
  __pyx_e_5spacy_7symbols_AdvType_deg,
  __pyx_e_5spacy_7symbols_AdvType_cau,
  __pyx_e_5spacy_7symbols_AdvType_mod,
  __pyx_e_5spacy_7symbols_AdvType_sta,
  __pyx_e_5spacy_7symbols_AdvType_ex,
  __pyx_e_5spacy_7symbols_AdvType_adadj,
  __pyx_e_5spacy_7symbols_ConjType_oper,
  __pyx_e_5spacy_7symbols_ConjType_comp,
  __pyx_e_5spacy_7symbols_Connegative_yes,
  __pyx_e_5spacy_7symbols_Derivation_minen,
  __pyx_e_5spacy_7symbols_Derivation_sti,
  __pyx_e_5spacy_7symbols_Derivation_inen,
  __pyx_e_5spacy_7symbols_Derivation_lainen,
  __pyx_e_5spacy_7symbols_Derivation_ja,
  __pyx_e_5spacy_7symbols_Derivation_ton,
  __pyx_e_5spacy_7symbols_Derivation_vs,
  __pyx_e_5spacy_7symbols_Derivation_ttain,
  __pyx_e_5spacy_7symbols_Derivation_ttaa,
  __pyx_e_5spacy_7symbols_Echo_rdp,
  __pyx_e_5spacy_7symbols_Echo_ech,
  __pyx_e_5spacy_7symbols_Foreign_foreign,
  __pyx_e_5spacy_7symbols_Foreign_fscript,
  __pyx_e_5spacy_7symbols_Foreign_tscript,
  __pyx_e_5spacy_7symbols_Foreign_yes,
  __pyx_e_5spacy_7symbols_Gender_dat_masc,
  __pyx_e_5spacy_7symbols_Gender_dat_fem,
  __pyx_e_5spacy_7symbols_Gender_erg_masc,
  __pyx_e_5spacy_7symbols_Gender_erg_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_masc,
  __pyx_e_5spacy_7symbols_Gender_psor_fem,
  __pyx_e_5spacy_7symbols_Gender_psor_neut,
  __pyx_e_5spacy_7symbols_Hyph_yes,
  __pyx_e_5spacy_7symbols_InfForm_one,
  __pyx_e_5spacy_7symbols_InfForm_two,
  __pyx_e_5spacy_7symbols_InfForm_three,
  __pyx_e_5spacy_7symbols_NameType_geo,
  __pyx_e_5spacy_7symbols_NameType_prs,
  __pyx_e_5spacy_7symbols_NameType_giv,
  __pyx_e_5spacy_7symbols_NameType_sur,
  __pyx_e_5spacy_7symbols_NameType_nat,
  __pyx_e_5spacy_7symbols_NameType_com,
  __pyx_e_5spacy_7symbols_NameType_pro,
  __pyx_e_5spacy_7symbols_NameType_oth,
  __pyx_e_5spacy_7symbols_NounType_com,
  __pyx_e_5spacy_7symbols_NounType_prop,
  __pyx_e_5spacy_7symbols_NounType_class,
  __pyx_e_5spacy_7symbols_Number_abs_sing,
  __pyx_e_5spacy_7symbols_Number_abs_plur,
  __pyx_e_5spacy_7symbols_Number_dat_sing,
  __pyx_e_5spacy_7symbols_Number_dat_plur,
  __pyx_e_5spacy_7symbols_Number_erg_sing,
  __pyx_e_5spacy_7symbols_Number_erg_plur,
  __pyx_e_5spacy_7symbols_Number_psee_sing,
  __pyx_e_5spacy_7symbols_Number_psee_plur,
  __pyx_e_5spacy_7symbols_Number_psor_sing,
  __pyx_e_5spacy_7symbols_Number_psor_plur,
  __pyx_e_5spacy_7symbols_Number_pauc,
  __pyx_e_5spacy_7symbols_Number_grpa,
  __pyx_e_5spacy_7symbols_Number_grpl,
  __pyx_e_5spacy_7symbols_Number_inv,
  __pyx_e_5spacy_7symbols_NumForm_digit,
  __pyx_e_5spacy_7symbols_NumForm_roman,
  __pyx_e_5spacy_7symbols_NumForm_word,
  __pyx_e_5spacy_7symbols_NumValue_one,
  __pyx_e_5spacy_7symbols_NumValue_two,
  __pyx_e_5spacy_7symbols_NumValue_three,
  __pyx_e_5spacy_7symbols_PartForm_pres,
  __pyx_e_5spacy_7symbols_PartForm_past,
  __pyx_e_5spacy_7symbols_PartForm_agt,
  __pyx_e_5spacy_7symbols_PartForm_neg,
  __pyx_e_5spacy_7symbols_PartType_mod,
  __pyx_e_5spacy_7symbols_PartType_emp,
  __pyx_e_5spacy_7symbols_PartType_res,
  __pyx_e_5spacy_7symbols_PartType_inf,
  __pyx_e_5spacy_7symbols_PartType_vbp,
  __pyx_e_5spacy_7symbols_Person_abs_one,
  __pyx_e_5spacy_7symbols_Person_abs_two,
  __pyx_e_5spacy_7symbols_Person_abs_three,
  __pyx_e_5spacy_7symbols_Person_dat_one,
  __pyx_e_5spacy_7symbols_Person_dat_two,
  __pyx_e_5spacy_7symbols_Person_dat_three,
  __pyx_e_5spacy_7symbols_Person_erg_one,
  __pyx_e_5spacy_7symbols_Person_erg_two,
  __pyx_e_5spacy_7symbols_Person_erg_three,
  __pyx_e_5spacy_7symbols_Person_psor_one,
  __pyx_e_5spacy_7symbols_Person_psor_two,
  __pyx_e_5spacy_7symbols_Person_psor_three,
  __pyx_e_5spacy_7symbols_Person_zero,
  __pyx_e_5spacy_7symbols_Person_four,
  __pyx_e_5spacy_7symbols_Polite_inf,
  __pyx_e_5spacy_7symbols_Polite_pol,
  __pyx_e_5spacy_7symbols_Polite_abs_inf,
  __pyx_e_5spacy_7symbols_Polite_abs_pol,
  __pyx_e_5spacy_7symbols_Polite_erg_inf,
  __pyx_e_5spacy_7symbols_Polite_erg_pol,
  __pyx_e_5spacy_7symbols_Polite_dat_inf,
  __pyx_e_5spacy_7symbols_Polite_dat_pol,
  __pyx_e_5spacy_7symbols_Polite_infm,
  __pyx_e_5spacy_7symbols_Polite_form,
  __pyx_e_5spacy_7symbols_Polite_form_elev,
  __pyx_e_5spacy_7symbols_Polite_form_humb,
  __pyx_e_5spacy_7symbols_Prefix_yes,
  __pyx_e_5spacy_7symbols_PrepCase_npr,
  __pyx_e_5spacy_7symbols_PrepCase_pre,
  __pyx_e_5spacy_7symbols_PunctSide_ini,
  __pyx_e_5spacy_7symbols_PunctSide_fin,
  __pyx_e_5spacy_7symbols_PunctType_peri,
  __pyx_e_5spacy_7symbols_PunctType_qest,
  __pyx_e_5spacy_7symbols_PunctType_excl,
  __pyx_e_5spacy_7symbols_PunctType_quot,
  __pyx_e_5spacy_7symbols_PunctType_brck,
  __pyx_e_5spacy_7symbols_PunctType_comm,
  __pyx_e_5spacy_7symbols_PunctType_colo,
  __pyx_e_5spacy_7symbols_PunctType_semi,
  __pyx_e_5spacy_7symbols_PunctType_dash,
  __pyx_e_5spacy_7symbols_Style_arch,
  __pyx_e_5spacy_7symbols_Style_rare,
  __pyx_e_5spacy_7symbols_Style_poet,
  __pyx_e_5spacy_7symbols_Style_norm,
  __pyx_e_5spacy_7symbols_Style_coll,
  __pyx_e_5spacy_7symbols_Style_vrnc,
  __pyx_e_5spacy_7symbols_Style_sing,
  __pyx_e_5spacy_7symbols_Style_expr,
  __pyx_e_5spacy_7symbols_Style_derg,
  __pyx_e_5spacy_7symbols_Style_vulg,
  __pyx_e_5spacy_7symbols_Style_yes,
  __pyx_e_5spacy_7symbols_StyleVariant_styleShort,
  __pyx_e_5spacy_7symbols_StyleVariant_styleBound,
  __pyx_e_5spacy_7symbols_VerbType_aux,
  __pyx_e_5spacy_7symbols_VerbType_cop,
  __pyx_e_5spacy_7symbols_VerbType_mod,
  __pyx_e_5spacy_7symbols_VerbType_light,
  __pyx_e_5spacy_7symbols_PERSON,
  __pyx_e_5spacy_7symbols_NORP,
  __pyx_e_5spacy_7symbols_FACILITY,
  __pyx_e_5spacy_7symbols_ORG,
  __pyx_e_5spacy_7symbols_GPE,
  __pyx_e_5spacy_7symbols_LOC,
  __pyx_e_5spacy_7symbols_PRODUCT,
  __pyx_e_5spacy_7symbols_EVENT,
  __pyx_e_5spacy_7symbols_WORK_OF_ART,
  __pyx_e_5spacy_7symbols_LANGUAGE,
  __pyx_e_5spacy_7symbols_DATE,
  __pyx_e_5spacy_7symbols_TIME,
  __pyx_e_5spacy_7symbols_PERCENT,
  __pyx_e_5spacy_7symbols_MONEY,
  __pyx_e_5spacy_7symbols_QUANTITY,
  __pyx_e_5spacy_7symbols_ORDINAL,
  __pyx_e_5spacy_7symbols_CARDINAL,
  __pyx_e_5spacy_7symbols_acomp,
  __pyx_e_5spacy_7symbols_advcl,
  __pyx_e_5spacy_7symbols_advmod,
  __pyx_e_5spacy_7symbols_agent,
  __pyx_e_5spacy_7symbols_amod,
  __pyx_e_5spacy_7symbols_appos,
  __pyx_e_5spacy_7symbols_attr,
  __pyx_e_5spacy_7symbols_aux,
  __pyx_e_5spacy_7symbols_auxpass,
  __pyx_e_5spacy_7symbols_cc,
  __pyx_e_5spacy_7symbols_ccomp,
  __pyx_e_5spacy_7symbols_complm,
  __pyx_e_5spacy_7symbols_conj,
  __pyx_e_5spacy_7symbols_cop,
  __pyx_e_5spacy_7symbols_csubj,
  __pyx_e_5spacy_7symbols_csubjpass,
  __pyx_e_5spacy_7symbols_dep,
  __pyx_e_5spacy_7symbols_det,
  __pyx_e_5spacy_7symbols_dobj,
  __pyx_e_5spacy_7symbols_expl,
  __pyx_e_5spacy_7symbols_hmod,
  __pyx_e_5spacy_7symbols_hyph,
  __pyx_e_5spacy_7symbols_infmod,
  __pyx_e_5spacy_7symbols_intj,
  __pyx_e_5spacy_7symbols_iobj,
  __pyx_e_5spacy_7symbols_mark,
  __pyx_e_5spacy_7symbols_meta,
  __pyx_e_5spacy_7symbols_neg,
  __pyx_e_5spacy_7symbols_nmod,
  __pyx_e_5spacy_7symbols_nn,
  __pyx_e_5spacy_7symbols_npadvmod,
  __pyx_e_5spacy_7symbols_nsubj,
  __pyx_e_5spacy_7symbols_nsubjpass,
  __pyx_e_5spacy_7symbols_num,
  __pyx_e_5spacy_7symbols_number,
  __pyx_e_5spacy_7symbols_oprd,
  __pyx_e_5spacy_7symbols_obj,
  __pyx_e_5spacy_7symbols_obl,
  __pyx_e_5spacy_7symbols_parataxis,
  __pyx_e_5spacy_7symbols_partmod,
  __pyx_e_5spacy_7symbols_pcomp,
  __pyx_e_5spacy_7symbols_pobj,
  __pyx_e_5spacy_7symbols_poss,
  __pyx_e_5spacy_7symbols_possessive,
  __pyx_e_5spacy_7symbols_preconj,
  __pyx_e_5spacy_7symbols_prep,
  __pyx_e_5spacy_7symbols_prt,
  __pyx_e_5spacy_7symbols_punct,
  __pyx_e_5spacy_7symbols_quantmod,
  __pyx_e_5spacy_7symbols_rcmod,
  __pyx_e_5spacy_7symbols_root,
  __pyx_e_5spacy_7symbols_xcomp
};

/* "parts_of_speech.pxd":3
 * from . cimport symbols
 * 
 * cpdef enum univ_pos_t:             # <<<<<<<<<<<<<<
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ
 */
enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t {

  /* "parts_of_speech.pxd":5
 * cpdef enum univ_pos_t:
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ             # <<<<<<<<<<<<<<
 *     ADP
 *     ADV
 */
  __pyx_e_5spacy_15parts_of_speech_NO_TAG = 0,
  __pyx_e_5spacy_15parts_of_speech_ADJ = __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_15parts_of_speech_ADP,
  __pyx_e_5spacy_15parts_of_speech_ADV,
  __pyx_e_5spacy_15parts_of_speech_AUX,
  __pyx_e_5spacy_15parts_of_speech_CONJ,
  __pyx_e_5spacy_15parts_of_speech_CCONJ,
  __pyx_e_5spacy_15parts_of_speech_DET,
  __pyx_e_5spacy_15parts_of_speech_INTJ,
  __pyx_e_5spacy_15parts_of_speech_NOUN,
  __pyx_e_5spacy_15parts_of_speech_NUM,
  __pyx_e_5spacy_15parts_of_speech_PART,
  __pyx_e_5spacy_15parts_of_speech_PRON,
  __pyx_e_5spacy_15parts_of_speech_PROPN,
  __pyx_e_5spacy_15parts_of_speech_PUNCT,
  __pyx_e_5spacy_15parts_of_speech_SCONJ,
  __pyx_e_5spacy_15parts_of_speech_SYM,
  __pyx_e_5spacy_15parts_of_speech_VERB,
  __pyx_e_5spacy_15parts_of_speech_X,
  __pyx_e_5spacy_15parts_of_speech_EOL,
  __pyx_e_5spacy_15parts_of_speech_SPACE
};
struct __pyx_t_5spacy_7structs_LexemeC;
struct __pyx_t_5spacy_7structs_Entity;
struct __pyx_t_5spacy_7structs_TokenC;

/* "structs.pxd":7
 * 
 * 
 * cdef struct LexemeC:             # <<<<<<<<<<<<<<
 *     float* vector
 * 
 */
struct __pyx_t_5spacy_7structs_LexemeC {
  float *vector;
  __pyx_t_5spacy_8typedefs_flags_t flags;
  __pyx_t_5spacy_8typedefs_attr_t lang;
  __pyx_t_5spacy_8typedefs_attr_t id;
  __pyx_t_5spacy_8typedefs_attr_t length;
  __pyx_t_5spacy_8typedefs_attr_t orth;
  __pyx_t_5spacy_8typedefs_attr_t lower;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  __pyx_t_5spacy_8typedefs_attr_t shape;
  __pyx_t_5spacy_8typedefs_attr_t prefix;
  __pyx_t_5spacy_8typedefs_attr_t suffix;
  __pyx_t_5spacy_8typedefs_attr_t cluster;
  float prob;
  float sentiment;
  float l2_norm;
};

/* "structs.pxd":31
 * 
 * 
 * cdef struct Entity:             # <<<<<<<<<<<<<<
 *     hash_t id
 *     int start
 */
struct __pyx_t_5spacy_7structs_Entity {
  __pyx_t_5spacy_8typedefs_hash_t id;
  int start;
  int end;
  int label;
};

/* "structs.pxd":38
 * 
 * 
 * cdef struct TokenC:             # <<<<<<<<<<<<<<
 *     const LexemeC* lex
 *     uint64_t morph
 */
struct __pyx_t_5spacy_7structs_TokenC {
  struct __pyx_t_5spacy_7structs_LexemeC const *lex;
  uint64_t morph;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  int spacy;
  int tag;
  int idx;
  int lemma;
  int sense;
  int head;
  int dep;
  int sent_start;
  uint32_t l_kids;
  uint32_t r_kids;
  uint32_t l_edge;
  uint32_t r_edge;
  int ent_iob;
  int ent_type;
  __pyx_t_5spacy_8typedefs_hash_t ent_id;
};
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed\maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed\maps.pxd":13
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};
union __pyx_t_5spacy_7strings_Utf8Str;
typedef union __pyx_t_5spacy_7strings_Utf8Str __pyx_t_5spacy_7strings_Utf8Str;

/* "strings.pxd":13
 * 
 * 
 * ctypedef union Utf8Str:             # <<<<<<<<<<<<<<
 *     unsigned char[8] s
 *     unsigned char* p
 */
union __pyx_t_5spacy_7strings_Utf8Str {
  unsigned char s[8];
  unsigned char *p;
};
struct __pyx_t_5spacy_10morphology_RichTagC;
struct __pyx_t_5spacy_10morphology_MorphAnalysisC;

/* "morphology.pxd":44
 * 
 * 
 * cpdef enum univ_morph_t:             # <<<<<<<<<<<<<<
 *     NIL = 0
 *     Animacy_anim = symbols.Animacy_anim
 */
enum __pyx_t_5spacy_10morphology_univ_morph_t {

  /* "morphology.pxd":46
 * cpdef enum univ_morph_t:
 *     NIL = 0
 *     Animacy_anim = symbols.Animacy_anim             # <<<<<<<<<<<<<<
 *     Animacy_inam
 *     Aspect_freq
 */
  __pyx_e_5spacy_10morphology_NIL = 0,
  __pyx_e_5spacy_10morphology_Animacy_anim = __pyx_e_5spacy_7symbols_Animacy_anim,
  __pyx_e_5spacy_10morphology_Animacy_inam,
  __pyx_e_5spacy_10morphology_Aspect_freq,
  __pyx_e_5spacy_10morphology_Aspect_imp,
  __pyx_e_5spacy_10morphology_Aspect_mod,
  __pyx_e_5spacy_10morphology_Aspect_none,
  __pyx_e_5spacy_10morphology_Aspect_perf,
  __pyx_e_5spacy_10morphology_Case_abe,
  __pyx_e_5spacy_10morphology_Case_abl,
  __pyx_e_5spacy_10morphology_Case_abs,
  __pyx_e_5spacy_10morphology_Case_acc,
  __pyx_e_5spacy_10morphology_Case_ade,
  __pyx_e_5spacy_10morphology_Case_all,
  __pyx_e_5spacy_10morphology_Case_cau,
  __pyx_e_5spacy_10morphology_Case_com,
  __pyx_e_5spacy_10morphology_Case_dat,
  __pyx_e_5spacy_10morphology_Case_del,
  __pyx_e_5spacy_10morphology_Case_dis,
  __pyx_e_5spacy_10morphology_Case_ela,
  __pyx_e_5spacy_10morphology_Case_ess,
  __pyx_e_5spacy_10morphology_Case_gen,
  __pyx_e_5spacy_10morphology_Case_ill,
  __pyx_e_5spacy_10morphology_Case_ine,
  __pyx_e_5spacy_10morphology_Case_ins,
  __pyx_e_5spacy_10morphology_Case_loc,
  __pyx_e_5spacy_10morphology_Case_lat,
  __pyx_e_5spacy_10morphology_Case_nom,
  __pyx_e_5spacy_10morphology_Case_par,
  __pyx_e_5spacy_10morphology_Case_sub,
  __pyx_e_5spacy_10morphology_Case_sup,
  __pyx_e_5spacy_10morphology_Case_tem,
  __pyx_e_5spacy_10morphology_Case_ter,
  __pyx_e_5spacy_10morphology_Case_tra,
  __pyx_e_5spacy_10morphology_Case_voc,
  __pyx_e_5spacy_10morphology_Definite_two,
  __pyx_e_5spacy_10morphology_Definite_def,
  __pyx_e_5spacy_10morphology_Definite_red,
  __pyx_e_5spacy_10morphology_Definite_cons,
  __pyx_e_5spacy_10morphology_Definite_ind,
  __pyx_e_5spacy_10morphology_Degree_cmp,
  __pyx_e_5spacy_10morphology_Degree_comp,
  __pyx_e_5spacy_10morphology_Degree_none,
  __pyx_e_5spacy_10morphology_Degree_pos,
  __pyx_e_5spacy_10morphology_Degree_sup,
  __pyx_e_5spacy_10morphology_Degree_abs,
  __pyx_e_5spacy_10morphology_Degree_com,
  __pyx_e_5spacy_10morphology_Degree_dim,
  __pyx_e_5spacy_10morphology_Gender_com,
  __pyx_e_5spacy_10morphology_Gender_fem,
  __pyx_e_5spacy_10morphology_Gender_masc,
  __pyx_e_5spacy_10morphology_Gender_neut,
  __pyx_e_5spacy_10morphology_Mood_cnd,
  __pyx_e_5spacy_10morphology_Mood_imp,
  __pyx_e_5spacy_10morphology_Mood_ind,
  __pyx_e_5spacy_10morphology_Mood_n,
  __pyx_e_5spacy_10morphology_Mood_pot,
  __pyx_e_5spacy_10morphology_Mood_sub,
  __pyx_e_5spacy_10morphology_Mood_opt,
  __pyx_e_5spacy_10morphology_Negative_neg,
  __pyx_e_5spacy_10morphology_Negative_pos,
  __pyx_e_5spacy_10morphology_Negative_yes,
  __pyx_e_5spacy_10morphology_Polarity_neg,
  __pyx_e_5spacy_10morphology_Polarity_pos,
  __pyx_e_5spacy_10morphology_Number_com,
  __pyx_e_5spacy_10morphology_Number_dual,
  __pyx_e_5spacy_10morphology_Number_none,
  __pyx_e_5spacy_10morphology_Number_plur,
  __pyx_e_5spacy_10morphology_Number_sing,
  __pyx_e_5spacy_10morphology_Number_ptan,
  __pyx_e_5spacy_10morphology_Number_count,
  __pyx_e_5spacy_10morphology_NumType_card,
  __pyx_e_5spacy_10morphology_NumType_dist,
  __pyx_e_5spacy_10morphology_NumType_frac,
  __pyx_e_5spacy_10morphology_NumType_gen,
  __pyx_e_5spacy_10morphology_NumType_mult,
  __pyx_e_5spacy_10morphology_NumType_none,
  __pyx_e_5spacy_10morphology_NumType_ord,
  __pyx_e_5spacy_10morphology_NumType_sets,
  __pyx_e_5spacy_10morphology_Person_one,
  __pyx_e_5spacy_10morphology_Person_two,
  __pyx_e_5spacy_10morphology_Person_three,
  __pyx_e_5spacy_10morphology_Person_none,
  __pyx_e_5spacy_10morphology_Poss_yes,
  __pyx_e_5spacy_10morphology_PronType_advPart,
  __pyx_e_5spacy_10morphology_PronType_art,
  __pyx_e_5spacy_10morphology_PronType_default,
  __pyx_e_5spacy_10morphology_PronType_dem,
  __pyx_e_5spacy_10morphology_PronType_ind,
  __pyx_e_5spacy_10morphology_PronType_int,
  __pyx_e_5spacy_10morphology_PronType_neg,
  __pyx_e_5spacy_10morphology_PronType_prs,
  __pyx_e_5spacy_10morphology_PronType_rcp,
  __pyx_e_5spacy_10morphology_PronType_rel,
  __pyx_e_5spacy_10morphology_PronType_tot,
  __pyx_e_5spacy_10morphology_PronType_clit,
  __pyx_e_5spacy_10morphology_PronType_exc,
  __pyx_e_5spacy_10morphology_Reflex_yes,
  __pyx_e_5spacy_10morphology_Tense_fut,
  __pyx_e_5spacy_10morphology_Tense_imp,
  __pyx_e_5spacy_10morphology_Tense_past,
  __pyx_e_5spacy_10morphology_Tense_pres,
  __pyx_e_5spacy_10morphology_VerbForm_fin,
  __pyx_e_5spacy_10morphology_VerbForm_ger,
  __pyx_e_5spacy_10morphology_VerbForm_inf,
  __pyx_e_5spacy_10morphology_VerbForm_none,
  __pyx_e_5spacy_10morphology_VerbForm_part,
  __pyx_e_5spacy_10morphology_VerbForm_partFut,
  __pyx_e_5spacy_10morphology_VerbForm_partPast,
  __pyx_e_5spacy_10morphology_VerbForm_partPres,
  __pyx_e_5spacy_10morphology_VerbForm_sup,
  __pyx_e_5spacy_10morphology_VerbForm_trans,
  __pyx_e_5spacy_10morphology_VerbForm_conv,
  __pyx_e_5spacy_10morphology_VerbForm_gdv,
  __pyx_e_5spacy_10morphology_Voice_act,
  __pyx_e_5spacy_10morphology_Voice_cau,
  __pyx_e_5spacy_10morphology_Voice_pass,
  __pyx_e_5spacy_10morphology_Voice_mid,
  __pyx_e_5spacy_10morphology_Voice_int,
  __pyx_e_5spacy_10morphology_Abbr_yes,
  __pyx_e_5spacy_10morphology_AdpType_prep,
  __pyx_e_5spacy_10morphology_AdpType_post,
  __pyx_e_5spacy_10morphology_AdpType_voc,
  __pyx_e_5spacy_10morphology_AdpType_comprep,
  __pyx_e_5spacy_10morphology_AdpType_circ,
  __pyx_e_5spacy_10morphology_AdvType_man,
  __pyx_e_5spacy_10morphology_AdvType_loc,
  __pyx_e_5spacy_10morphology_AdvType_tim,
  __pyx_e_5spacy_10morphology_AdvType_deg,
  __pyx_e_5spacy_10morphology_AdvType_cau,
  __pyx_e_5spacy_10morphology_AdvType_mod,
  __pyx_e_5spacy_10morphology_AdvType_sta,
  __pyx_e_5spacy_10morphology_AdvType_ex,
  __pyx_e_5spacy_10morphology_AdvType_adadj,
  __pyx_e_5spacy_10morphology_ConjType_oper,
  __pyx_e_5spacy_10morphology_ConjType_comp,
  __pyx_e_5spacy_10morphology_Connegative_yes,
  __pyx_e_5spacy_10morphology_Derivation_minen,
  __pyx_e_5spacy_10morphology_Derivation_sti,
  __pyx_e_5spacy_10morphology_Derivation_inen,
  __pyx_e_5spacy_10morphology_Derivation_lainen,
  __pyx_e_5spacy_10morphology_Derivation_ja,
  __pyx_e_5spacy_10morphology_Derivation_ton,
  __pyx_e_5spacy_10morphology_Derivation_vs,
  __pyx_e_5spacy_10morphology_Derivation_ttain,
  __pyx_e_5spacy_10morphology_Derivation_ttaa,
  __pyx_e_5spacy_10morphology_Echo_rdp,
  __pyx_e_5spacy_10morphology_Echo_ech,
  __pyx_e_5spacy_10morphology_Foreign_foreign,
  __pyx_e_5spacy_10morphology_Foreign_fscript,
  __pyx_e_5spacy_10morphology_Foreign_tscript,
  __pyx_e_5spacy_10morphology_Foreign_yes,
  __pyx_e_5spacy_10morphology_Gender_dat_masc,
  __pyx_e_5spacy_10morphology_Gender_dat_fem,
  __pyx_e_5spacy_10morphology_Gender_erg_masc,
  __pyx_e_5spacy_10morphology_Gender_erg_fem,
  __pyx_e_5spacy_10morphology_Gender_psor_masc,
  __pyx_e_5spacy_10morphology_Gender_psor_fem,
  __pyx_e_5spacy_10morphology_Gender_psor_neut,
  __pyx_e_5spacy_10morphology_Hyph_yes,
  __pyx_e_5spacy_10morphology_InfForm_one,
  __pyx_e_5spacy_10morphology_InfForm_two,
  __pyx_e_5spacy_10morphology_InfForm_three,
  __pyx_e_5spacy_10morphology_NameType_geo,
  __pyx_e_5spacy_10morphology_NameType_prs,
  __pyx_e_5spacy_10morphology_NameType_giv,
  __pyx_e_5spacy_10morphology_NameType_sur,
  __pyx_e_5spacy_10morphology_NameType_nat,
  __pyx_e_5spacy_10morphology_NameType_com,
  __pyx_e_5spacy_10morphology_NameType_pro,
  __pyx_e_5spacy_10morphology_NameType_oth,
  __pyx_e_5spacy_10morphology_NounType_com,
  __pyx_e_5spacy_10morphology_NounType_prop,
  __pyx_e_5spacy_10morphology_NounType_class,
  __pyx_e_5spacy_10morphology_Number_abs_sing,
  __pyx_e_5spacy_10morphology_Number_abs_plur,
  __pyx_e_5spacy_10morphology_Number_dat_sing,
  __pyx_e_5spacy_10morphology_Number_dat_plur,
  __pyx_e_5spacy_10morphology_Number_erg_sing,
  __pyx_e_5spacy_10morphology_Number_erg_plur,
  __pyx_e_5spacy_10morphology_Number_psee_sing,
  __pyx_e_5spacy_10morphology_Number_psee_plur,
  __pyx_e_5spacy_10morphology_Number_psor_sing,
  __pyx_e_5spacy_10morphology_Number_psor_plur,
  __pyx_e_5spacy_10morphology_NumForm_digit,
  __pyx_e_5spacy_10morphology_NumForm_roman,
  __pyx_e_5spacy_10morphology_NumForm_word,
  __pyx_e_5spacy_10morphology_NumValue_one,
  __pyx_e_5spacy_10morphology_NumValue_two,
  __pyx_e_5spacy_10morphology_NumValue_three,
  __pyx_e_5spacy_10morphology_PartForm_pres,
  __pyx_e_5spacy_10morphology_PartForm_past,
  __pyx_e_5spacy_10morphology_PartForm_agt,
  __pyx_e_5spacy_10morphology_PartForm_neg,
  __pyx_e_5spacy_10morphology_PartType_mod,
  __pyx_e_5spacy_10morphology_PartType_emp,
  __pyx_e_5spacy_10morphology_PartType_res,
  __pyx_e_5spacy_10morphology_PartType_inf,
  __pyx_e_5spacy_10morphology_PartType_vbp,
  __pyx_e_5spacy_10morphology_Person_abs_one,
  __pyx_e_5spacy_10morphology_Person_abs_two,
  __pyx_e_5spacy_10morphology_Person_abs_three,
  __pyx_e_5spacy_10morphology_Person_dat_one,
  __pyx_e_5spacy_10morphology_Person_dat_two,
  __pyx_e_5spacy_10morphology_Person_dat_three,
  __pyx_e_5spacy_10morphology_Person_erg_one,
  __pyx_e_5spacy_10morphology_Person_erg_two,
  __pyx_e_5spacy_10morphology_Person_erg_three,
  __pyx_e_5spacy_10morphology_Person_psor_one,
  __pyx_e_5spacy_10morphology_Person_psor_two,
  __pyx_e_5spacy_10morphology_Person_psor_three,
  __pyx_e_5spacy_10morphology_Polite_inf,
  __pyx_e_5spacy_10morphology_Polite_pol,
  __pyx_e_5spacy_10morphology_Polite_abs_inf,
  __pyx_e_5spacy_10morphology_Polite_abs_pol,
  __pyx_e_5spacy_10morphology_Polite_erg_inf,
  __pyx_e_5spacy_10morphology_Polite_erg_pol,
  __pyx_e_5spacy_10morphology_Polite_dat_inf,
  __pyx_e_5spacy_10morphology_Polite_dat_pol,
  __pyx_e_5spacy_10morphology_Prefix_yes,
  __pyx_e_5spacy_10morphology_PrepCase_npr,
  __pyx_e_5spacy_10morphology_PrepCase_pre,
  __pyx_e_5spacy_10morphology_PunctSide_ini,
  __pyx_e_5spacy_10morphology_PunctSide_fin,
  __pyx_e_5spacy_10morphology_PunctType_peri,
  __pyx_e_5spacy_10morphology_PunctType_qest,
  __pyx_e_5spacy_10morphology_PunctType_excl,
  __pyx_e_5spacy_10morphology_PunctType_quot,
  __pyx_e_5spacy_10morphology_PunctType_brck,
  __pyx_e_5spacy_10morphology_PunctType_comm,
  __pyx_e_5spacy_10morphology_PunctType_colo,
  __pyx_e_5spacy_10morphology_PunctType_semi,
  __pyx_e_5spacy_10morphology_PunctType_dash,
  __pyx_e_5spacy_10morphology_Style_arch,
  __pyx_e_5spacy_10morphology_Style_rare,
  __pyx_e_5spacy_10morphology_Style_poet,
  __pyx_e_5spacy_10morphology_Style_norm,
  __pyx_e_5spacy_10morphology_Style_coll,
  __pyx_e_5spacy_10morphology_Style_vrnc,
  __pyx_e_5spacy_10morphology_Style_sing,
  __pyx_e_5spacy_10morphology_Style_expr,
  __pyx_e_5spacy_10morphology_Style_derg,
  __pyx_e_5spacy_10morphology_Style_vulg,
  __pyx_e_5spacy_10morphology_Style_yes,
  __pyx_e_5spacy_10morphology_StyleVariant_styleShort,
  __pyx_e_5spacy_10morphology_StyleVariant_styleBound,
  __pyx_e_5spacy_10morphology_VerbType_aux,
  __pyx_e_5spacy_10morphology_VerbType_cop,
  __pyx_e_5spacy_10morphology_VerbType_mod,
  __pyx_e_5spacy_10morphology_VerbType_light
};

/* "morphology.pxd":13
 * 
 * 
 * cdef struct RichTagC:             # <<<<<<<<<<<<<<
 *     uint64_t morph
 *     int id
 */
struct __pyx_t_5spacy_10morphology_RichTagC {
  uint64_t morph;
  int id;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  __pyx_t_5spacy_8typedefs_attr_t name;
};

/* "morphology.pxd":20
 * 
 * 
 * cdef struct MorphAnalysisC:             # <<<<<<<<<<<<<<
 *     RichTagC tag
 *     attr_t lemma
 */
struct __pyx_t_5spacy_10morphology_MorphAnalysisC {
  struct __pyx_t_5spacy_10morphology_RichTagC tag;
  __pyx_t_5spacy_8typedefs_attr_t lemma;
};
union __pyx_t_5spacy_5vocab_LexemesOrTokens;
struct __pyx_t_5spacy_5vocab__Cached;

/* "vocab.pxd":16
 * 
 * 
 * cdef union LexemesOrTokens:             # <<<<<<<<<<<<<<
 *     const LexemeC* const* lexemes
 *     const TokenC* tokens
 */
union __pyx_t_5spacy_5vocab_LexemesOrTokens {
  struct __pyx_t_5spacy_7structs_LexemeC const *const *lexemes;
  struct __pyx_t_5spacy_7structs_TokenC const *tokens;
};

/* "vocab.pxd":21
 * 
 * 
 * cdef struct _Cached:             # <<<<<<<<<<<<<<
 *     LexemesOrTokens data
 *     bint is_lex
 */
struct __pyx_t_5spacy_5vocab__Cached {
  union __pyx_t_5spacy_5vocab_LexemesOrTokens data;
  int is_lex;
  int length;
};

/* "attrs.pxd":2
 * # Reserve 64 values for flag features
 * cpdef enum attr_id_t:             # <<<<<<<<<<<<<<
 *     NULL_ATTR
 *     IS_ALPHA
 */
enum __pyx_t_5spacy_5attrs_attr_id_t {
  __pyx_e_5spacy_5attrs_NULL_ATTR,
  __pyx_e_5spacy_5attrs_IS_ALPHA,
  __pyx_e_5spacy_5attrs_IS_ASCII,
  __pyx_e_5spacy_5attrs_IS_DIGIT,
  __pyx_e_5spacy_5attrs_IS_LOWER,
  __pyx_e_5spacy_5attrs_IS_PUNCT,
  __pyx_e_5spacy_5attrs_IS_SPACE,
  __pyx_e_5spacy_5attrs_IS_TITLE,
  __pyx_e_5spacy_5attrs_IS_UPPER,
  __pyx_e_5spacy_5attrs_LIKE_URL,
  __pyx_e_5spacy_5attrs_LIKE_NUM,
  __pyx_e_5spacy_5attrs_LIKE_EMAIL,
  __pyx_e_5spacy_5attrs_IS_STOP,
  __pyx_e_5spacy_5attrs_IS_OOV,
  __pyx_e_5spacy_5attrs_IS_BRACKET,
  __pyx_e_5spacy_5attrs_IS_QUOTE,
  __pyx_e_5spacy_5attrs_IS_LEFT_PUNCT,
  __pyx_e_5spacy_5attrs_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_5attrs_FLAG18 = 18,
  __pyx_e_5spacy_5attrs_FLAG19,
  __pyx_e_5spacy_5attrs_FLAG20,
  __pyx_e_5spacy_5attrs_FLAG21,
  __pyx_e_5spacy_5attrs_FLAG22,
  __pyx_e_5spacy_5attrs_FLAG23,
  __pyx_e_5spacy_5attrs_FLAG24,
  __pyx_e_5spacy_5attrs_FLAG25,
  __pyx_e_5spacy_5attrs_FLAG26,
  __pyx_e_5spacy_5attrs_FLAG27,
  __pyx_e_5spacy_5attrs_FLAG28,
  __pyx_e_5spacy_5attrs_FLAG29,
  __pyx_e_5spacy_5attrs_FLAG30,
  __pyx_e_5spacy_5attrs_FLAG31,
  __pyx_e_5spacy_5attrs_FLAG32,
  __pyx_e_5spacy_5attrs_FLAG33,
  __pyx_e_5spacy_5attrs_FLAG34,
  __pyx_e_5spacy_5attrs_FLAG35,
  __pyx_e_5spacy_5attrs_FLAG36,
  __pyx_e_5spacy_5attrs_FLAG37,
  __pyx_e_5spacy_5attrs_FLAG38,
  __pyx_e_5spacy_5attrs_FLAG39,
  __pyx_e_5spacy_5attrs_FLAG40,
  __pyx_e_5spacy_5attrs_FLAG41,
  __pyx_e_5spacy_5attrs_FLAG42,
  __pyx_e_5spacy_5attrs_FLAG43,
  __pyx_e_5spacy_5attrs_FLAG44,
  __pyx_e_5spacy_5attrs_FLAG45,
  __pyx_e_5spacy_5attrs_FLAG46,
  __pyx_e_5spacy_5attrs_FLAG47,
  __pyx_e_5spacy_5attrs_FLAG48,
  __pyx_e_5spacy_5attrs_FLAG49,
  __pyx_e_5spacy_5attrs_FLAG50,
  __pyx_e_5spacy_5attrs_FLAG51,
  __pyx_e_5spacy_5attrs_FLAG52,
  __pyx_e_5spacy_5attrs_FLAG53,
  __pyx_e_5spacy_5attrs_FLAG54,
  __pyx_e_5spacy_5attrs_FLAG55,
  __pyx_e_5spacy_5attrs_FLAG56,
  __pyx_e_5spacy_5attrs_FLAG57,
  __pyx_e_5spacy_5attrs_FLAG58,
  __pyx_e_5spacy_5attrs_FLAG59,
  __pyx_e_5spacy_5attrs_FLAG60,
  __pyx_e_5spacy_5attrs_FLAG61,
  __pyx_e_5spacy_5attrs_FLAG62,
  __pyx_e_5spacy_5attrs_FLAG63,
  __pyx_e_5spacy_5attrs_ID,
  __pyx_e_5spacy_5attrs_ORTH,
  __pyx_e_5spacy_5attrs_LOWER,
  __pyx_e_5spacy_5attrs_NORM,
  __pyx_e_5spacy_5attrs_SHAPE,
  __pyx_e_5spacy_5attrs_PREFIX,
  __pyx_e_5spacy_5attrs_SUFFIX,
  __pyx_e_5spacy_5attrs_LENGTH,
  __pyx_e_5spacy_5attrs_CLUSTER,
  __pyx_e_5spacy_5attrs_LEMMA,
  __pyx_e_5spacy_5attrs_POS,
  __pyx_e_5spacy_5attrs_TAG,
  __pyx_e_5spacy_5attrs_DEP,
  __pyx_e_5spacy_5attrs_ENT_IOB,
  __pyx_e_5spacy_5attrs_ENT_TYPE,
  __pyx_e_5spacy_5attrs_HEAD,
  __pyx_e_5spacy_5attrs_SPACY,
  __pyx_e_5spacy_5attrs_PROB,
  __pyx_e_5spacy_5attrs_LANG
};

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_5spacy_6syntax_6_state_StateC;
struct __pyx_t_5spacy_6syntax_6_state_StateC {

  /* "_state.pxd":18
 * 
 * 
 * cdef cppclass StateC:             # <<<<<<<<<<<<<<
 *     int* _stack
 *     int* _buffer
 */
  int *_stack;
  int *_buffer;
  int *shifted;
  struct __pyx_t_5spacy_7structs_TokenC *_sent;
  struct __pyx_t_5spacy_7structs_Entity *_ents;
  struct __pyx_t_5spacy_7structs_TokenC _empty_token;
  int length;
  int _s_i;
  int _b_i;
  int _e_i;
  int _break;
   __pyx_t_5spacy_6syntax_6_state_StateC(struct __pyx_t_5spacy_7structs_TokenC const *, int);
  virtual  ~__pyx_t_5spacy_6syntax_6_state_StateC(void);
  virtual int S(int) const;
  virtual int B(int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *S_(int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *B_(int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *H_(int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *E_(int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *L_(int, int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *R_(int, int) const;
  virtual struct __pyx_t_5spacy_7structs_TokenC const *safe_get(int) const;
  virtual int H(int) const;
  virtual int E(int) const;
  virtual int L(int, int) const;
  virtual int R(int, int) const;
  virtual int empty(void) const;
  virtual int eol(void) const;
  virtual int at_break(void) const;
  virtual int is_final(void) const;
  virtual int has_head(int) const;
  virtual int n_L(int) const;
  virtual int n_R(int) const;
  virtual int stack_is_connected(void) const;
  virtual int entity_is_open(void) const;
  virtual int stack_depth(void) const;
  virtual int buffer_length(void) const;
  virtual uint64_t hash(void) const;
  virtual void push(void);
  virtual void pop(void);
  virtual void unshift(void);
  virtual void add_arc(int, int, int);
  virtual void del_arc(int, int);
  virtual void open_ent(int);
  virtual void close_ent(void);
  virtual void set_ent_tag(int, int, int);
  virtual void set_break(int);
  virtual void clone(__pyx_t_5spacy_6syntax_6_state_StateC const *);
  virtual void fast_forward(void);
};
struct __pyx_t_5spacy_4gold_GoldParseC;

/* "gold.pxd":7
 * 
 * 
 * cdef struct GoldParseC:             # <<<<<<<<<<<<<<
 *     int* tags
 *     int* heads
 */
struct __pyx_t_5spacy_4gold_GoldParseC {
  int *tags;
  int *heads;
  int *labels;
  int **brackets;
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition *ner;
};
struct __pyx_t_5spacy_6syntax_17transition_system_Transition;

/* "transition_system.pxd":13
 * 
 * 
 * cdef struct Transition:             # <<<<<<<<<<<<<<
 *     int clas
 *     int move
 */
struct __pyx_t_5spacy_6syntax_17transition_system_Transition {
  int clas;
  int move;
  int label;
  __pyx_t_5thinc_8typedefs_weight_t score;
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*get_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  int (*__pyx_do)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
};

/* "transition_system.pxd":25
 * 
 * 
 * ctypedef weight_t (*get_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil             # <<<<<<<<<<<<<<
 * ctypedef weight_t (*move_cost_func_t)(StateClass state, const GoldParseC* gold) nogil
 * ctypedef weight_t (*label_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil
 */
typedef __pyx_t_5thinc_8typedefs_weight_t (*__pyx_t_5spacy_6syntax_17transition_system_get_cost_func_t)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);

/* "transition_system.pxd":26
 * 
 * ctypedef weight_t (*get_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil
 * ctypedef weight_t (*move_cost_func_t)(StateClass state, const GoldParseC* gold) nogil             # <<<<<<<<<<<<<<
 * ctypedef weight_t (*label_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil
 * 
 */
typedef __pyx_t_5thinc_8typedefs_weight_t (*__pyx_t_5spacy_6syntax_17transition_system_move_cost_func_t)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);

/* "transition_system.pxd":27
 * ctypedef weight_t (*get_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil
 * ctypedef weight_t (*move_cost_func_t)(StateClass state, const GoldParseC* gold) nogil
 * ctypedef weight_t (*label_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil             # <<<<<<<<<<<<<<
 * 
 * ctypedef int (*do_func_t)(StateC* state, int label) nogil
 */
typedef __pyx_t_5thinc_8typedefs_weight_t (*__pyx_t_5spacy_6syntax_17transition_system_label_cost_func_t)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);

/* "transition_system.pxd":29
 * ctypedef weight_t (*label_cost_func_t)(StateClass state, const GoldParseC* gold, int label) nogil
 * 
 * ctypedef int (*do_func_t)(StateC* state, int label) nogil             # <<<<<<<<<<<<<<
 * 
 * ctypedef void* (*init_state_t)(Pool mem, int length, void* tokens) except NULL
 */
typedef int (*__pyx_t_5spacy_6syntax_17transition_system_do_func_t)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);

/* "transition_system.pxd":31
 * ctypedef int (*do_func_t)(StateC* state, int label) nogil
 * 
 * ctypedef void* (*init_state_t)(Pool mem, int length, void* tokens) except NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class TransitionSystem:
 */
typedef void *(*__pyx_t_5spacy_6syntax_17transition_system_init_state_t)(struct __pyx_obj_5cymem_5cymem_Pool *, int, void *);

/* "spacy\syntax\arc_eager.pyx":33
 * # Break transition from here
 * # http://www.aclweb.org/anthology/P13-1074
 * cdef enum:             # <<<<<<<<<<<<<<
 *     SHIFT
 *     REDUCE
 */
enum  {
  __pyx_e_5spacy_6syntax_9arc_eager_SHIFT,
  __pyx_e_5spacy_6syntax_9arc_eager_REDUCE,
  __pyx_e_5spacy_6syntax_9arc_eager_LEFT,
  __pyx_e_5spacy_6syntax_9arc_eager_RIGHT,
  __pyx_e_5spacy_6syntax_9arc_eager_BREAK,
  __pyx_e_5spacy_6syntax_9arc_eager_N_MOVES
};

/* "cymem\cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
};


/* "cymem\cymem.pxd":11
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
};


/* "preshed\maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed\maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "strings.pxd":18
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef Utf8Str* c
 */
struct __pyx_obj_5spacy_7strings_StringStore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5spacy_7strings_Utf8Str *c;
  int64_t size;
  int is_frozen;
  struct __pyx_obj_7preshed_4maps_PreshMap *_map;
  struct __pyx_obj_7preshed_4maps_PreshMap *_oov;
  int64_t _resize_at;
};


/* "morphology.pxd":25
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_10morphology_Morphology {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  PyObject *lemmatizer;
  PyObject *tag_map;
  PyObject *n_tags;
  PyObject *reverse_index;
  PyObject *tag_names;
  struct __pyx_t_5spacy_10morphology_RichTagC *rich_tags;
  struct __pyx_obj_7preshed_4maps_PreshMapArray *_cache;
};


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */
struct __pyx_obj_5spacy_5vocab_Vocab {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_5spacy_10morphology_Morphology *morphology;
  int length;
  PyObject *_serializer;
  PyObject *data_dir;
  PyObject *lex_attr_getters;
  PyObject *serializer_freqs;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_hash;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_orth;
  int vectors_length;
};


/* "lexeme.pxd":14
 * cdef LexemeC EMPTY_LEXEME
 * 
 * cdef class Lexeme:             # <<<<<<<<<<<<<<
 *     cdef LexemeC* c
 *     cdef readonly Vocab vocab
 */
struct __pyx_obj_5spacy_6lexeme_Lexeme {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme *__pyx_vtab;
  struct __pyx_t_5spacy_7structs_LexemeC *c;
  struct __pyx_obj_5spacy_5vocab_Vocab *vocab;
  __pyx_t_5spacy_8typedefs_attr_t orth;
};


/* "stateclass.pxd":12
 * 
 * 
 * cdef class StateClass:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef StateC* c
 */
struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_10stateclass_StateClass *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5spacy_6syntax_6_state_StateC *c;
};


/* "gold.pxd":15
 * 
 * 
 * cdef class GoldParse:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
 */
struct __pyx_obj_5spacy_4gold_GoldParse {
  PyObject_HEAD
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_5spacy_4gold_GoldParseC c;
  int length;
  int loss;
  PyObject *words;
  PyObject *tags;
  PyObject *heads;
  PyObject *labels;
  PyObject *orths;
  PyObject *ner;
  PyObject *ents;
  PyObject *brackets;
  PyObject *cand_to_gold;
  PyObject *gold_to_cand;
  PyObject *orig_annot;
};


/* "transition_system.pxd":33
 * ctypedef void* (*init_state_t)(Pool mem, int length, void* tokens) except NULL
 * 
 * cdef class TransitionSystem:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef StringStore strings
 */
struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition *c;
  int n_moves;
  int _size;
  int root_label;
  PyObject *freqs;
  __pyx_t_5spacy_6syntax_17transition_system_init_state_t init_beam_state;
};


/* "spacy\syntax\arc_eager.pxd":11
 * 
 * 
 * cdef class ArcEager(TransitionSystem):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager {
  struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem __pyx_base;
};


/* "spacy\syntax\arc_eager.pyx":117
 * 
 * 
 * cdef class Shift:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_Shift {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Shift *__pyx_vtab;
};


/* "spacy\syntax\arc_eager.pyx":140
 * 
 * 
 * cdef class Reduce:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_Reduce {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Reduce *__pyx_vtab;
};


/* "spacy\syntax\arc_eager.pyx":177
 * 
 * 
 * cdef class LeftArc:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_LeftArc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_LeftArc *__pyx_vtab;
};


/* "spacy\syntax\arc_eager.pyx":211
 * 
 * 
 * cdef class RightArc:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_RightArc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_RightArc *__pyx_vtab;
};


/* "spacy\syntax\arc_eager.pyx":240
 * 
 * 
 * cdef class Break:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */
struct __pyx_obj_5spacy_6syntax_9arc_eager_Break {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Break *__pyx_vtab;
};



/* "cymem\cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed\maps.pxd":36
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed\maps.pxd":44
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "strings.pxd":18
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef Utf8Str* c
 */

struct __pyx_vtabstruct_5spacy_7strings_StringStore {
  __pyx_t_5spacy_7strings_Utf8Str const *(*intern_unicode)(struct __pyx_obj_5spacy_7strings_StringStore *, PyObject *);
  __pyx_t_5spacy_7strings_Utf8Str const *(*_intern_utf8)(struct __pyx_obj_5spacy_7strings_StringStore *, char *, int);
};
static struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtabptr_5spacy_7strings_StringStore;


/* "morphology.pxd":25
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
 */

struct __pyx_vtabstruct_5spacy_10morphology_Morphology {
  int (*assign_tag)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, PyObject *);
  int (*assign_tag_id)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_TokenC *, int);
  int (*assign_feature)(struct __pyx_obj_5spacy_10morphology_Morphology *, uint64_t *, enum __pyx_t_5spacy_10morphology_univ_morph_t, int);
};
static struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtabptr_5spacy_10morphology_Morphology;


/* "vocab.pxd":27
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cpdef readonly StringStore strings
 */

struct __pyx_vtabstruct_5spacy_5vocab_Vocab {
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get_by_orth)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5spacy_8typedefs_attr_t);
  struct __pyx_t_5spacy_7structs_TokenC const *(*make_fused_token)(struct __pyx_obj_5spacy_5vocab_Vocab *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*_new_lexeme)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  int (*_add_lex_to_vocab)(struct __pyx_obj_5spacy_5vocab_Vocab *, __pyx_t_5spacy_8typedefs_hash_t, struct __pyx_t_5spacy_7structs_LexemeC const *);
};
static struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtabptr_5spacy_5vocab_Vocab;


/* "lexeme.pxd":14
 * cdef LexemeC EMPTY_LEXEME
 * 
 * cdef class Lexeme:             # <<<<<<<<<<<<<<
 *     cdef LexemeC* c
 *     cdef readonly Vocab vocab
 */

struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme {
  struct __pyx_obj_5spacy_6lexeme_Lexeme *(*from_ptr)(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_obj_5spacy_5vocab_Vocab *, int);
  void (*set_struct_attr)(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, __pyx_t_5spacy_8typedefs_attr_t);
  __pyx_t_5spacy_8typedefs_attr_t (*get_struct_attr)(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
  int (*c_check_flag)(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
  int (*c_set_flag)(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, int);
};
static struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme *__pyx_vtabptr_5spacy_6lexeme_Lexeme;
static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *, struct __pyx_obj_5spacy_5vocab_Vocab *, int);
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, __pyx_t_5spacy_8typedefs_attr_t);
static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *, enum __pyx_t_5spacy_5attrs_attr_id_t);
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *, enum __pyx_t_5spacy_5attrs_attr_id_t, int);


/* "stateclass.pxd":12
 * 
 * 
 * cdef class StateClass:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef StateC* c
 */

struct __pyx_vtabstruct_5spacy_6syntax_10stateclass_StateClass {
  struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *(*init)(struct __pyx_t_5spacy_7structs_TokenC const *, int);
  int (*S)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*B)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*S_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*B_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*H_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*E_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*L_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*R_)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
  struct __pyx_t_5spacy_7structs_TokenC const *(*safe_get)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*H)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*E)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*L)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
  int (*R)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
  int (*empty)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*eol)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*at_break)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*is_final)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*has_head)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*n_L)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*n_R)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  int (*stack_is_connected)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*entity_is_open)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*stack_depth)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  int (*buffer_length)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*push)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*pop)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*unshift)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*add_arc)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int, int);
  void (*del_arc)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
  void (*open_ent)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  void (*close_ent)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*set_ent_tag)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int, int);
  void (*set_break)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
  void (*clone)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
  void (*fast_forward)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
};
static struct __pyx_vtabstruct_5spacy_6syntax_10stateclass_StateClass *__pyx_vtabptr_5spacy_6syntax_10stateclass_StateClass;
static CYTHON_INLINE struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_init(struct __pyx_t_5spacy_7structs_TokenC const *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_H_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_E_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_L_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_R_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_safe_get(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_H(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_E(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_empty(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_eol(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_at_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_is_final(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_is_connected(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_entity_is_open(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_buffer_length(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_push(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_pop(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_unshift(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_add_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int, int);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_del_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_open_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_close_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_ent_tag(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int, int, int);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, int);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_clone(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_fast_forward(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *);


/* "transition_system.pxd":33
 * ctypedef void* (*init_state_t)(Pool mem, int length, void* tokens) except NULL
 * 
 * cdef class TransitionSystem:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef StringStore strings
 */

struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem {
  int (*initialize_state)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, __pyx_t_5spacy_6syntax_6_state_StateC *);
  int (*finalize_state)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, __pyx_t_5spacy_6syntax_6_state_StateC *);
  int (*preprocess_gold)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, struct __pyx_obj_5spacy_4gold_GoldParse *);
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition (*lookup_transition)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, PyObject *);
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition (*init_transition)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int, int, int);
  int (*set_valid)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int *, __pyx_t_5spacy_6syntax_6_state_StateC const *);
  int (*set_costs)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_obj_5spacy_4gold_GoldParse *);
};
static struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem *__pyx_vtabptr_5spacy_6syntax_17transition_system_TransitionSystem;


/* "spacy\syntax\arc_eager.pyx":308
 * 
 * 
 * cdef class ArcEager(TransitionSystem):             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         TransitionSystem.__init__(self, *args, **kwargs)
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_ArcEager {
  struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem __pyx_base;
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_ArcEager *__pyx_vtabptr_5spacy_6syntax_9arc_eager_ArcEager;


/* "spacy\syntax\arc_eager.pyx":117
 * 
 * 
 * cdef class Shift:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Shift {
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  int (*transition)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*move_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
  __pyx_t_5thinc_8typedefs_weight_t (*label_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Shift *__pyx_vtabptr_5spacy_6syntax_9arc_eager_Shift;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);


/* "spacy\syntax\arc_eager.pyx":140
 * 
 * 
 * cdef class Reduce:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Reduce {
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  int (*transition)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*move_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
  __pyx_t_5thinc_8typedefs_weight_t (*label_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Reduce *__pyx_vtabptr_5spacy_6syntax_9arc_eager_Reduce;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);


/* "spacy\syntax\arc_eager.pyx":177
 * 
 * 
 * cdef class LeftArc:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_LeftArc {
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  int (*transition)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*move_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
  __pyx_t_5thinc_8typedefs_weight_t (*label_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_LeftArc *__pyx_vtabptr_5spacy_6syntax_9arc_eager_LeftArc;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);


/* "spacy\syntax\arc_eager.pyx":211
 * 
 * 
 * cdef class RightArc:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_RightArc {
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  int (*transition)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*move_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
  __pyx_t_5thinc_8typedefs_weight_t (*label_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_RightArc *__pyx_vtabptr_5spacy_6syntax_9arc_eager_RightArc;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);


/* "spacy\syntax\arc_eager.pyx":240
 * 
 * 
 * cdef class Break:             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 */

struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Break {
  int (*is_valid)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int);
  int (*transition)(__pyx_t_5spacy_6syntax_6_state_StateC *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
  __pyx_t_5thinc_8typedefs_weight_t (*move_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
  __pyx_t_5thinc_8typedefs_weight_t (*label_cost)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Break *__pyx_vtabptr_5spacy_6syntax_9arc_eager_Break;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *);
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int);

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple();\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      PyErr_Restore(type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if (1); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      frame->f_lineno = lineno;
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          PyErr_Restore(type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if (1); else goto_error;
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(enum __pyx_t_5spacy_5attrs_attr_id_t value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_5spacy_6syntax_9arc_eager_5Shift_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_5Shift_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_st, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_st, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, int __pyx_v_label); /* proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold); /* proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_5Break_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold); /* proto*/
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_preprocess_gold(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, struct __pyx_obj_5spacy_4gold_GoldParse *__pyx_v_gold); /* proto*/
static struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_lookup_transition(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_name); /* proto*/
static struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_init_transition(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int __pyx_v_clas, int __pyx_v_move, int __pyx_v_label); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_initialize_state(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, __pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_finalize_state(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, __pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_valid(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int *__pyx_v_output, __pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st); /* proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_costs(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int *__pyx_v_is_valid, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_costs, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_stcls, struct __pyx_obj_5spacy_4gold_GoldParse *__pyx_v_gold); /* proto*/
static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, CYTHON_UNUSED int __pyx_v_vector_length); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_name, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_value); /* proto*/
static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_feat_name); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lexeme, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id, int __pyx_v_value); /* proto*/
static CYTHON_INLINE struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_init(struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_sent, int __pyx_v_length); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_H_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_E_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_L_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_R_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx); /* proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_safe_get(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_H(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_E(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_empty(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_eol(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_at_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_is_final(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_is_connected(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_entity_is_open(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_buffer_length(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_push(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_pop(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_unshift(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_add_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_head, int __pyx_v_child, int __pyx_v_label); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_del_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_head, int __pyx_v_child); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_open_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_label); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_close_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_ent_tag(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_ent_iob, int __pyx_v_ent_type); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_clone(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_src); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_fast_forward(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'thinc.typedefs' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'spacy.typedefs' */

/* Module declarations from 'spacy' */

/* Module declarations from 'spacy.symbols' */

/* Module declarations from 'spacy.parts_of_speech' */

/* Module declarations from 'spacy.structs' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;

/* Module declarations from 'murmurhash.mrmr' */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from 'spacy.strings' */
static PyTypeObject *__pyx_ptype_5spacy_7strings_StringStore = 0;

/* Module declarations from 'spacy.morphology' */
static PyTypeObject *__pyx_ptype_5spacy_10morphology_Morphology = 0;

/* Module declarations from 'spacy.vocab' */
static PyTypeObject *__pyx_ptype_5spacy_5vocab_Vocab = 0;
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_5vocab_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_5vocab_EMPTY_LEXEME (*__pyx_vp_5spacy_5vocab_EMPTY_LEXEME)

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'spacy.attrs' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'spacy.lexeme' */
static PyTypeObject *__pyx_ptype_5spacy_6lexeme_Lexeme = 0;
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_6lexeme_EMPTY_LEXEME (*__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME)

/* Module declarations from 'spacy.syntax._state' */
static CYTHON_INLINE int __pyx_f_5spacy_6syntax_6_state_is_space_token(struct __pyx_t_5spacy_7structs_TokenC const *); /*proto*/

/* Module declarations from 'spacy.syntax.stateclass' */
static PyTypeObject *__pyx_ptype_5spacy_6syntax_10stateclass_StateClass = 0;

/* Module declarations from 'spacy.gold' */
static PyTypeObject *__pyx_ptype_5spacy_4gold_GoldParse = 0;

/* Module declarations from 'spacy.syntax.transition_system' */
static PyTypeObject *__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem = 0;

/* Module declarations from 'spacy.syntax.arc_eager' */
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_ArcEager = 0;
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_Shift = 0;
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_Reduce = 0;
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_LeftArc = 0;
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_RightArc = 0;
static PyTypeObject *__pyx_ptype_5spacy_6syntax_9arc_eager_Break = 0;
static __pyx_t_5thinc_8typedefs_weight_t __pyx_v_5spacy_6syntax_9arc_eager_MIN_SCORE;
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_push_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int); /*proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_arc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int, int); /*proto*/
static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_pop_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int); /*proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(struct __pyx_t_5spacy_4gold_GoldParseC const *, int, int); /*proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager_label_is_gold(struct __pyx_t_5spacy_4gold_GoldParseC const *, int, int, int); /*proto*/
static int __pyx_f_5spacy_6syntax_9arc_eager__get_root(int, struct __pyx_t_5spacy_4gold_GoldParseC const *); /*proto*/
static void *__pyx_f_5spacy_6syntax_9arc_eager__init_state(struct __pyx_obj_5cymem_5cymem_Pool *, int, void *); /*proto*/
#define __Pyx_MODULE_NAME "spacy.syntax.arc_eager"
int __pyx_module_is_main_spacy__syntax__arc_eager = 0;

/* Implementation of 'spacy.syntax.arc_eager' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_[] = "";
static char __pyx_k_B[] = "B";
static char __pyx_k_D[] = "D";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_R[] = "R";
static char __pyx_k_S[] = "S";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__2[] = "-";
static char __pyx_k_end[] = "end";
static char __pyx_k_get[] = "get";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_ROOT[] = "ROOT";
static char __pyx_k_file[] = "file";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_move[] = "move";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_index[] = "index";
static char __pyx_k_label[] = "label";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_split[] = "split";
static char __pyx_k_upper[] = "upper";
static char __pyx_k_append[] = "append";
static char __pyx_k_ctypes[] = "ctypes";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_actions[] = "actions";
static char __pyx_k_nonproj[] = "nonproj";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_is_parsed[] = "is_parsed";
static char __pyx_k_MOVE_NAMES[] = "MOVE_NAMES";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_get_actions[] = "get_actions";
static char __pyx_k_gold_parses[] = "gold_parses";
static char __pyx_k_left_labels[] = "left_labels";
static char __pyx_k_print_state[] = "print_state";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_right_labels[] = "right_labels";
static char __pyx_k_is_nonproj_tree[] = "is_nonproj_tree";
static char __pyx_k_PseudoProjectivity[] = "PseudoProjectivity";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Could_not_find_a_gold_standard_a[] = "Could not find a gold-standard action to supervise the dependency parser.\nLikely cause: the tree is non-projective (i.e. it has crossing arcs -- see spacy/syntax/nonproj.pyx for definitions)\nThe ArcEager transition system only supports projective trees.\nTo learn non-projective representations, transform the data before training and after parsing. Either pass make_projective=True to the GoldParse class, or use PseudoProjectivity.preprocess_training_data";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Could_not_find_a_gold_standard_a_2[] = "Could not find a gold-standard action to supervise the dependency parser.\nThe GoldParse was projective.\nThe transition system has %d actions.\nState at failure:\n%s";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_u_B;
static PyObject *__pyx_kp_u_Could_not_find_a_gold_standard_a;
static PyObject *__pyx_kp_u_Could_not_find_a_gold_standard_a_2;
static PyObject *__pyx_n_u_D;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_u_L;
static PyObject *__pyx_n_s_MOVE_NAMES;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_PseudoProjectivity;
static PyObject *__pyx_n_u_R;
static PyObject *__pyx_n_u_ROOT;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_u_S;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_n_u_actions;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_actions;
static PyObject *__pyx_n_u_gold_parses;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_is_nonproj_tree;
static PyObject *__pyx_n_s_is_parsed;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_u_left_labels;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_move;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_nonproj;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_u_right_labels;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_zip;
static int __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager___init__(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_2get_actions(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_12action_types___get__(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_4move_name(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int __pyx_v_move, int __pyx_v_label); /* proto */
static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_6finalize_doc(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_doc); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_ArcEager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Shift(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Reduce(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_LeftArc(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_RightArc(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Break(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;

/* "spacy\syntax\arc_eager.pyx":54
 * # Helper functions for the arc-eager oracle
 * 
 * cdef weight_t push_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:             # <<<<<<<<<<<<<<
 *     cdef weight_t cost = 0
 *     cdef int i, S_i
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_push_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_stcls, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_target) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_cost;
  int __pyx_v_i;
  int __pyx_v_S_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("push_cost", __pyx_f[0], 54, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":55
 * 
 * cdef weight_t push_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:
 *     cdef weight_t cost = 0             # <<<<<<<<<<<<<<
 *     cdef int i, S_i
 *     for i in range(stcls.stack_depth()):
 */
  __pyx_v_cost = 0.0;

  /* "spacy\syntax\arc_eager.pyx":57
 *     cdef weight_t cost = 0
 *     cdef int i, S_i
 *     for i in range(stcls.stack_depth()):             # <<<<<<<<<<<<<<
 *         S_i = stcls.S(i)
 *         if gold.heads[target] == S_i:
 */
  __pyx_t_1 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(__pyx_v_stcls);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":58
 *     cdef int i, S_i
 *     for i in range(stcls.stack_depth()):
 *         S_i = stcls.S(i)             # <<<<<<<<<<<<<<
 *         if gold.heads[target] == S_i:
 *             cost += 1
 */
    __pyx_v_S_i = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_stcls, __pyx_v_i);

    /* "spacy\syntax\arc_eager.pyx":59
 *     for i in range(stcls.stack_depth()):
 *         S_i = stcls.S(i)
 *         if gold.heads[target] == S_i:             # <<<<<<<<<<<<<<
 *             cost += 1
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):
 */
    __pyx_t_3 = (((__pyx_v_gold->heads[__pyx_v_target]) == __pyx_v_S_i) != 0);
    if (__pyx_t_3) {

      /* "spacy\syntax\arc_eager.pyx":60
 *         S_i = stcls.S(i)
 *         if gold.heads[target] == S_i:
 *             cost += 1             # <<<<<<<<<<<<<<
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):
 *             cost += 1
 */
      __pyx_v_cost = (__pyx_v_cost + 1.0);

      /* "spacy\syntax\arc_eager.pyx":59
 *     for i in range(stcls.stack_depth()):
 *         S_i = stcls.S(i)
 *         if gold.heads[target] == S_i:             # <<<<<<<<<<<<<<
 *             cost += 1
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):
 */
    }

    /* "spacy\syntax\arc_eager.pyx":61
 *         if gold.heads[target] == S_i:
 *             cost += 1
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):             # <<<<<<<<<<<<<<
 *             cost += 1
 *     cost += Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0
 */
    __pyx_t_4 = (((__pyx_v_gold->heads[__pyx_v_S_i]) == __pyx_v_target) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = 1;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_3) {

      /* "spacy\syntax\arc_eager.pyx":62
 *             cost += 1
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):
 *             cost += 1             # <<<<<<<<<<<<<<
 *     cost += Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0
 *     return cost
 */
      __pyx_v_cost = (__pyx_v_cost + 1.0);

      /* "spacy\syntax\arc_eager.pyx":61
 *         if gold.heads[target] == S_i:
 *             cost += 1
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):             # <<<<<<<<<<<<<<
 *             cost += 1
 *     cost += Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0
 */
    }
  }

  /* "spacy\syntax\arc_eager.pyx":63
 *         if gold.heads[S_i] == target and (NON_MONOTONIC or not stcls.has_head(S_i)):
 *             cost += 1
 *     cost += Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0             # <<<<<<<<<<<<<<
 *     return cost
 * 
 */
  __pyx_t_3 = __pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_v_stcls->c, -1);
  if (__pyx_t_3) {
  } else {
    __pyx_t_5 = __pyx_t_3;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(__pyx_v_stcls, __pyx_v_gold) == 0.0);
  __pyx_t_5 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  __pyx_v_cost = (__pyx_v_cost + __pyx_t_5);

  /* "spacy\syntax\arc_eager.pyx":64
 *             cost += 1
 *     cost += Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0
 *     return cost             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_cost;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":54
 * # Helper functions for the arc-eager oracle
 * 
 * cdef weight_t push_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:             # <<<<<<<<<<<<<<
 *     cdef weight_t cost = 0
 *     cdef int i, S_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.push_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":67
 * 
 * 
 * cdef weight_t pop_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:             # <<<<<<<<<<<<<<
 *     cdef weight_t cost = 0
 *     cdef int i, B_i
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_pop_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_stcls, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_target) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_cost;
  int __pyx_v_i;
  int __pyx_v_B_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("pop_cost", __pyx_f[0], 67, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":68
 * 
 * cdef weight_t pop_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:
 *     cdef weight_t cost = 0             # <<<<<<<<<<<<<<
 *     cdef int i, B_i
 *     for i in range(stcls.buffer_length()):
 */
  __pyx_v_cost = 0.0;

  /* "spacy\syntax\arc_eager.pyx":70
 *     cdef weight_t cost = 0
 *     cdef int i, B_i
 *     for i in range(stcls.buffer_length()):             # <<<<<<<<<<<<<<
 *         B_i = stcls.B(i)
 *         cost += gold.heads[B_i] == target
 */
  __pyx_t_1 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_buffer_length(__pyx_v_stcls);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":71
 *     cdef int i, B_i
 *     for i in range(stcls.buffer_length()):
 *         B_i = stcls.B(i)             # <<<<<<<<<<<<<<
 *         cost += gold.heads[B_i] == target
 *         cost += gold.heads[target] == B_i
 */
    __pyx_v_B_i = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_stcls, __pyx_v_i);

    /* "spacy\syntax\arc_eager.pyx":72
 *     for i in range(stcls.buffer_length()):
 *         B_i = stcls.B(i)
 *         cost += gold.heads[B_i] == target             # <<<<<<<<<<<<<<
 *         cost += gold.heads[target] == B_i
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:
 */
    __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_v_B_i]) == __pyx_v_target));

    /* "spacy\syntax\arc_eager.pyx":73
 *         B_i = stcls.B(i)
 *         cost += gold.heads[B_i] == target
 *         cost += gold.heads[target] == B_i             # <<<<<<<<<<<<<<
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:
 *             break
 */
    __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_v_target]) == __pyx_v_B_i));

    /* "spacy\syntax\arc_eager.pyx":74
 *         cost += gold.heads[B_i] == target
 *         cost += gold.heads[target] == B_i
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:             # <<<<<<<<<<<<<<
 *             break
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:
 */
    __pyx_t_4 = (((__pyx_v_gold->heads[__pyx_v_B_i]) == __pyx_v_B_i) != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = (((__pyx_v_gold->heads[__pyx_v_B_i]) < __pyx_v_target) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "spacy\syntax\arc_eager.pyx":75
 *         cost += gold.heads[target] == B_i
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:
 *             break             # <<<<<<<<<<<<<<
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:
 *         cost += 1
 */
      goto __pyx_L4_break;

      /* "spacy\syntax\arc_eager.pyx":74
 *         cost += gold.heads[B_i] == target
 *         cost += gold.heads[target] == B_i
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:             # <<<<<<<<<<<<<<
 *             break
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:
 */
    }
  }
  __pyx_L4_break:;

  /* "spacy\syntax\arc_eager.pyx":76
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:
 *             break
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:             # <<<<<<<<<<<<<<
 *         cost += 1
 *     return cost
 */
  __pyx_t_4 = (__pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_v_stcls->c, -1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(__pyx_v_stcls, __pyx_v_gold) == 0.0) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_3) {

    /* "spacy\syntax\arc_eager.pyx":77
 *             break
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:
 *         cost += 1             # <<<<<<<<<<<<<<
 *     return cost
 * 
 */
    __pyx_v_cost = (__pyx_v_cost + 1.0);

    /* "spacy\syntax\arc_eager.pyx":76
 *         if gold.heads[B_i] == B_i or gold.heads[B_i] < target:
 *             break
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:             # <<<<<<<<<<<<<<
 *         cost += 1
 *     return cost
 */
  }

  /* "spacy\syntax\arc_eager.pyx":78
 *     if Break.is_valid(stcls.c, -1) and Break.move_cost(stcls, gold) == 0:
 *         cost += 1
 *     return cost             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_cost;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":67
 * 
 * 
 * cdef weight_t pop_cost(StateClass stcls, const GoldParseC* gold, int target) nogil:             # <<<<<<<<<<<<<<
 *     cdef weight_t cost = 0
 *     cdef int i, B_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.pop_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":81
 * 
 * 
 * cdef weight_t arc_cost(StateClass stcls, const GoldParseC* gold, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *     if arc_is_gold(gold, head, child):
 *         return 0
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_arc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_stcls, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_head, int __pyx_v_child) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("arc_cost", __pyx_f[0], 81, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":82
 * 
 * cdef weight_t arc_cost(StateClass stcls, const GoldParseC* gold, int head, int child) nogil:
 *     if arc_is_gold(gold, head, child):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif stcls.H(child) == gold.heads[child]:
 */
  __pyx_t_1 = (__pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(__pyx_v_gold, __pyx_v_head, __pyx_v_child) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":83
 * cdef weight_t arc_cost(StateClass stcls, const GoldParseC* gold, int head, int child) nogil:
 *     if arc_is_gold(gold, head, child):
 *         return 0             # <<<<<<<<<<<<<<
 *     elif stcls.H(child) == gold.heads[child]:
 *         return 1
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":82
 * 
 * cdef weight_t arc_cost(StateClass stcls, const GoldParseC* gold, int head, int child) nogil:
 *     if arc_is_gold(gold, head, child):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif stcls.H(child) == gold.heads[child]:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":84
 *     if arc_is_gold(gold, head, child):
 *         return 0
 *     elif stcls.H(child) == gold.heads[child]:             # <<<<<<<<<<<<<<
 *         return 1
 *     # Head in buffer
 */
  __pyx_t_1 = ((__pyx_f_5spacy_6syntax_10stateclass_10StateClass_H(__pyx_v_stcls, __pyx_v_child) == (__pyx_v_gold->heads[__pyx_v_child])) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":85
 *         return 0
 *     elif stcls.H(child) == gold.heads[child]:
 *         return 1             # <<<<<<<<<<<<<<
 *     # Head in buffer
 *     elif gold.heads[child] >= stcls.B(0) and stcls.B(1) != -1:
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":84
 *     if arc_is_gold(gold, head, child):
 *         return 0
 *     elif stcls.H(child) == gold.heads[child]:             # <<<<<<<<<<<<<<
 *         return 1
 *     # Head in buffer
 */
  }

  /* "spacy\syntax\arc_eager.pyx":87
 *         return 1
 *     # Head in buffer
 *     elif gold.heads[child] >= stcls.B(0) and stcls.B(1) != -1:             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_gold->heads[__pyx_v_child]) >= __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_stcls, 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_stcls, 1) != -1L) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":88
 *     # Head in buffer
 *     elif gold.heads[child] >= stcls.B(0) and stcls.B(1) != -1:
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":87
 *         return 1
 *     # Head in buffer
 *     elif gold.heads[child] >= stcls.B(0) and stcls.B(1) != -1:             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":90
 *         return 1
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = 0.0;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":81
 * 
 * 
 * cdef weight_t arc_cost(StateClass stcls, const GoldParseC* gold, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *     if arc_is_gold(gold, head, child):
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.arc_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":93
 * 
 * 
 * cdef bint arc_is_gold(const GoldParseC* gold, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *     if gold.labels[child] == -1:
 *         return True
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_head, int __pyx_v_child) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("arc_is_gold", __pyx_f[0], 93, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":94
 * 
 * cdef bint arc_is_gold(const GoldParseC* gold, int head, int child) nogil:
 *     if gold.labels[child] == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif gold.heads[child] == head:
 */
  __pyx_t_1 = (((__pyx_v_gold->labels[__pyx_v_child]) == -1L) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":95
 * cdef bint arc_is_gold(const GoldParseC* gold, int head, int child) nogil:
 *     if gold.labels[child] == -1:
 *         return True             # <<<<<<<<<<<<<<
 *     elif gold.heads[child] == head:
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":94
 * 
 * cdef bint arc_is_gold(const GoldParseC* gold, int head, int child) nogil:
 *     if gold.labels[child] == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif gold.heads[child] == head:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":96
 *     if gold.labels[child] == -1:
 *         return True
 *     elif gold.heads[child] == head:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  __pyx_t_1 = (((__pyx_v_gold->heads[__pyx_v_child]) == __pyx_v_head) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":97
 *         return True
 *     elif gold.heads[child] == head:
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":96
 *     if gold.labels[child] == -1:
 *         return True
 *     elif gold.heads[child] == head:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":99
 *         return True
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":93
 * 
 * 
 * cdef bint arc_is_gold(const GoldParseC* gold, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *     if gold.labels[child] == -1:
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.arc_is_gold", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":102
 * 
 * 
 * cdef bint label_is_gold(const GoldParseC* gold, int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *     if gold.labels[child] == -1:
 *         return True
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_label_is_gold(struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_head, int __pyx_v_child, int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_is_gold", __pyx_f[0], 102, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":103
 * 
 * cdef bint label_is_gold(const GoldParseC* gold, int head, int child, int label) nogil:
 *     if gold.labels[child] == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif label == -1:
 */
  __pyx_t_1 = (((__pyx_v_gold->labels[__pyx_v_child]) == -1L) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":104
 * cdef bint label_is_gold(const GoldParseC* gold, int head, int child, int label) nogil:
 *     if gold.labels[child] == -1:
 *         return True             # <<<<<<<<<<<<<<
 *     elif label == -1:
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":103
 * 
 * cdef bint label_is_gold(const GoldParseC* gold, int head, int child, int label) nogil:
 *     if gold.labels[child] == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif label == -1:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":105
 *     if gold.labels[child] == -1:
 *         return True
 *     elif label == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif gold.labels[child] == label:
 */
  __pyx_t_1 = ((__pyx_v_label == -1L) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":106
 *         return True
 *     elif label == -1:
 *         return True             # <<<<<<<<<<<<<<
 *     elif gold.labels[child] == label:
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":105
 *     if gold.labels[child] == -1:
 *         return True
 *     elif label == -1:             # <<<<<<<<<<<<<<
 *         return True
 *     elif gold.labels[child] == label:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":107
 *     elif label == -1:
 *         return True
 *     elif gold.labels[child] == label:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  __pyx_t_1 = (((__pyx_v_gold->labels[__pyx_v_child]) == __pyx_v_label) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":108
 *         return True
 *     elif gold.labels[child] == label:
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":107
 *     elif label == -1:
 *         return True
 *     elif gold.labels[child] == label:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":110
 *         return True
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":102
 * 
 * 
 * cdef bint label_is_gold(const GoldParseC* gold, int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *     if gold.labels[child] == -1:
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.label_is_gold", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":113
 * 
 * 
 * cdef bint _is_gold_root(const GoldParseC* gold, int word) nogil:             # <<<<<<<<<<<<<<
 *     return gold.labels[word] == -1 or gold.heads[word] == word
 * 
 */

static int __pyx_f_5spacy_6syntax_9arc_eager__is_gold_root(struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_word) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("_is_gold_root", __pyx_f[0], 113, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":114
 * 
 * cdef bint _is_gold_root(const GoldParseC* gold, int word) nogil:
 *     return gold.labels[word] == -1 or gold.heads[word] == word             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (((__pyx_v_gold->labels[__pyx_v_word]) == -1L) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (((__pyx_v_gold->heads[__pyx_v_word]) == __pyx_v_word) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":113
 * 
 * 
 * cdef bint _is_gold_root(const GoldParseC* gold, int word) nogil:             # <<<<<<<<<<<<<<
 *     return gold.labels[word] == -1 or gold.heads[word] == word
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager._is_gold_root", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":119
 * cdef class Shift:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return st.buffer_length() >= 2 and not st.shifted[st.B(0)] and not st.B_(0).sent_start
 * 
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_5Shift_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_valid", __pyx_f[0], 119, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":120
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 *         return st.buffer_length() >= 2 and not st.shifted[st.B(0)] and not st.B_(0).sent_start             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = ((__pyx_v_st->buffer_length() >= 2) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((!((__pyx_v_st->shifted[__pyx_v_st->B(0)]) != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_st->B_(0)->sent_start != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":119
 * cdef class Shift:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return st.buffer_length() >= 2 and not st.shifted[st.B(0)] and not st.B_(0).sent_start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Shift.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":123
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.push()
 *         st.fast_forward()
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_5Shift_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transition", __pyx_f[0], 123, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":124
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.push()             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
  __pyx_v_st->push();

  /* "spacy\syntax\arc_eager.pyx":125
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.push()
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":123
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.push()
 *         st.fast_forward()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Shift.transition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":128
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass st, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Shift.move_cost(st, gold) + Shift.label_cost(st, gold, label)
 * 
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_st, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cost", __pyx_f[0], 128, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":129
 *     @staticmethod
 *     cdef weight_t cost(StateClass st, const GoldParseC* gold, int label) nogil:
 *         return Shift.move_cost(st, gold) + Shift.label_cost(st, gold, label)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost(__pyx_v_st, __pyx_v_gold) + __pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost(__pyx_v_st, __pyx_v_gold, __pyx_v_label));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":128
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass st, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Shift.move_cost(st, gold) + Shift.label_cost(st, gold, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Shift.cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":132
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         return push_cost(s, gold, s.B(0))
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("move_cost", __pyx_f[0], 132, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":133
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         return push_cost(s, gold, s.B(0))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_f_5spacy_6syntax_9arc_eager_push_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":132
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         return push_cost(s, gold, s.B(0))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Shift.move_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":136
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_cost", __pyx_f[0], 136, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":137
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":136
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Shift.label_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":142
 * cdef class Reduce:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return st.stack_depth() >= 2
 * 
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_valid", __pyx_f[0], 142, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":143
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 *         return st.stack_depth() >= 2             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_v_st->stack_depth() >= 2);
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":142
 * cdef class Reduce:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return st.stack_depth() >= 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Reduce.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":146
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         if st.has_head(st.S(0)):
 *             st.pop()
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transition", __pyx_f[0], 146, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":147
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         if st.has_head(st.S(0)):             # <<<<<<<<<<<<<<
 *             st.pop()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_st->has_head(__pyx_v_st->S(0)) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":148
 *     cdef int transition(StateC* st, int label) nogil:
 *         if st.has_head(st.S(0)):
 *             st.pop()             # <<<<<<<<<<<<<<
 *         else:
 *             st.unshift()
 */
    __pyx_v_st->pop();

    /* "spacy\syntax\arc_eager.pyx":147
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         if st.has_head(st.S(0)):             # <<<<<<<<<<<<<<
 *             st.pop()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "spacy\syntax\arc_eager.pyx":150
 *             st.pop()
 *         else:
 *             st.unshift()             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
  /*else*/ {
    __pyx_v_st->unshift();
  }
  __pyx_L3:;

  /* "spacy\syntax\arc_eager.pyx":151
 *         else:
 *             st.unshift()
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":146
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         if st.has_head(st.S(0)):
 *             st.pop()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Reduce.transition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":154
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Reduce.move_cost(s, gold) + Reduce.label_cost(s, gold, label)
 * 
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cost", __pyx_f[0], 154, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":155
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return Reduce.move_cost(s, gold) + Reduce.label_cost(s, gold, label)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost(__pyx_v_s, __pyx_v_gold) + __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost(__pyx_v_s, __pyx_v_gold, __pyx_v_label));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":154
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Reduce.move_cost(s, gold) + Reduce.label_cost(s, gold, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Reduce.cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":158
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass st, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cost = pop_cost(st, gold, st.S(0))
 *         if not st.has_head(st.S(0)):
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_st, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_cost;
  long __pyx_v_i;
  int __pyx_v_S_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("move_cost", __pyx_f[0], 158, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":159
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass st, const GoldParseC* gold) nogil:
 *         cost = pop_cost(st, gold, st.S(0))             # <<<<<<<<<<<<<<
 *         if not st.has_head(st.S(0)):
 *             # Decrement cost for the arcs e save
 */
  __pyx_v_cost = __pyx_f_5spacy_6syntax_9arc_eager_pop_cost(__pyx_v_st, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_st, 0));

  /* "spacy\syntax\arc_eager.pyx":160
 *     cdef inline weight_t move_cost(StateClass st, const GoldParseC* gold) nogil:
 *         cost = pop_cost(st, gold, st.S(0))
 *         if not st.has_head(st.S(0)):             # <<<<<<<<<<<<<<
 *             # Decrement cost for the arcs e save
 *             for i in range(1, st.stack_depth()):
 */
  __pyx_t_1 = ((!(__pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(__pyx_v_st, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_st, 0)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":162
 *         if not st.has_head(st.S(0)):
 *             # Decrement cost for the arcs e save
 *             for i in range(1, st.stack_depth()):             # <<<<<<<<<<<<<<
 *                 S_i = st.S(i)
 *                 if gold.heads[st.S(0)] == S_i:
 */
    __pyx_t_2 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(__pyx_v_st);
    for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "spacy\syntax\arc_eager.pyx":163
 *             # Decrement cost for the arcs e save
 *             for i in range(1, st.stack_depth()):
 *                 S_i = st.S(i)             # <<<<<<<<<<<<<<
 *                 if gold.heads[st.S(0)] == S_i:
 *                     cost -= 1
 */
      __pyx_v_S_i = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_st, __pyx_v_i);

      /* "spacy\syntax\arc_eager.pyx":164
 *             for i in range(1, st.stack_depth()):
 *                 S_i = st.S(i)
 *                 if gold.heads[st.S(0)] == S_i:             # <<<<<<<<<<<<<<
 *                     cost -= 1
 *                 if gold.heads[S_i] == st.S(0):
 */
      __pyx_t_1 = (((__pyx_v_gold->heads[__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_st, 0)]) == __pyx_v_S_i) != 0);
      if (__pyx_t_1) {

        /* "spacy\syntax\arc_eager.pyx":165
 *                 S_i = st.S(i)
 *                 if gold.heads[st.S(0)] == S_i:
 *                     cost -= 1             # <<<<<<<<<<<<<<
 *                 if gold.heads[S_i] == st.S(0):
 *                     cost -= 1
 */
        __pyx_v_cost = (__pyx_v_cost - 1.0);

        /* "spacy\syntax\arc_eager.pyx":164
 *             for i in range(1, st.stack_depth()):
 *                 S_i = st.S(i)
 *                 if gold.heads[st.S(0)] == S_i:             # <<<<<<<<<<<<<<
 *                     cost -= 1
 *                 if gold.heads[S_i] == st.S(0):
 */
      }

      /* "spacy\syntax\arc_eager.pyx":166
 *                 if gold.heads[st.S(0)] == S_i:
 *                     cost -= 1
 *                 if gold.heads[S_i] == st.S(0):             # <<<<<<<<<<<<<<
 *                     cost -= 1
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:
 */
      __pyx_t_1 = (((__pyx_v_gold->heads[__pyx_v_S_i]) == __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_st, 0)) != 0);
      if (__pyx_t_1) {

        /* "spacy\syntax\arc_eager.pyx":167
 *                     cost -= 1
 *                 if gold.heads[S_i] == st.S(0):
 *                     cost -= 1             # <<<<<<<<<<<<<<
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:
 *                 cost -= 1
 */
        __pyx_v_cost = (__pyx_v_cost - 1.0);

        /* "spacy\syntax\arc_eager.pyx":166
 *                 if gold.heads[st.S(0)] == S_i:
 *                     cost -= 1
 *                 if gold.heads[S_i] == st.S(0):             # <<<<<<<<<<<<<<
 *                     cost -= 1
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:
 */
      }
    }

    /* "spacy\syntax\arc_eager.pyx":168
 *                 if gold.heads[S_i] == st.S(0):
 *                     cost -= 1
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:             # <<<<<<<<<<<<<<
 *                 cost -= 1
 *         return cost
 */
    __pyx_t_4 = (__pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_v_st->c, -1) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_4 = ((__pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(__pyx_v_st, __pyx_v_gold) == 0.0) != 0);
    __pyx_t_1 = __pyx_t_4;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "spacy\syntax\arc_eager.pyx":169
 *                     cost -= 1
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:
 *                 cost -= 1             # <<<<<<<<<<<<<<
 *         return cost
 * 
 */
      __pyx_v_cost = (__pyx_v_cost - 1.0);

      /* "spacy\syntax\arc_eager.pyx":168
 *                 if gold.heads[S_i] == st.S(0):
 *                     cost -= 1
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:             # <<<<<<<<<<<<<<
 *                 cost -= 1
 *         return cost
 */
    }

    /* "spacy\syntax\arc_eager.pyx":160
 *     cdef inline weight_t move_cost(StateClass st, const GoldParseC* gold) nogil:
 *         cost = pop_cost(st, gold, st.S(0))
 *         if not st.has_head(st.S(0)):             # <<<<<<<<<<<<<<
 *             # Decrement cost for the arcs e save
 *             for i in range(1, st.stack_depth()):
 */
  }

  /* "spacy\syntax\arc_eager.pyx":170
 *             if Break.is_valid(st.c, -1) and Break.move_cost(st, gold) == 0:
 *                 cost -= 1
 *         return cost             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_cost;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":158
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass st, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cost = pop_cost(st, gold, st.S(0))
 *         if not st.has_head(st.S(0)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Reduce.move_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":173
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_cost", __pyx_f[0], 173, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":174
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":173
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Reduce.label_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":179
 * cdef class LeftArc:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return not st.B_(0).sent_start
 * 
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_valid", __pyx_f[0], 179, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":180
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 *         return not st.B_(0).sent_start             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (!(__pyx_v_st->B_(0)->sent_start != 0));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":179
 * cdef class LeftArc:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return not st.B_(0).sent_start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.LeftArc.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":183
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.add_arc(st.B(0), st.S(0), label)
 *         st.pop()
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transition", __pyx_f[0], 183, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":184
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.add_arc(st.B(0), st.S(0), label)             # <<<<<<<<<<<<<<
 *         st.pop()
 *         st.fast_forward()
 */
  __pyx_v_st->add_arc(__pyx_v_st->B(0), __pyx_v_st->S(0), __pyx_v_label);

  /* "spacy\syntax\arc_eager.pyx":185
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.add_arc(st.B(0), st.S(0), label)
 *         st.pop()             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
  __pyx_v_st->pop();

  /* "spacy\syntax\arc_eager.pyx":186
 *         st.add_arc(st.B(0), st.S(0), label)
 *         st.pop()
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":183
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.add_arc(st.B(0), st.S(0), label)
 *         st.pop()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.LeftArc.transition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":189
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return LeftArc.move_cost(s, gold) + LeftArc.label_cost(s, gold, label)
 * 
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cost", __pyx_f[0], 189, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":190
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return LeftArc.move_cost(s, gold) + LeftArc.label_cost(s, gold, label)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost(__pyx_v_s, __pyx_v_gold) + __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost(__pyx_v_s, __pyx_v_gold, __pyx_v_label));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":189
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return LeftArc.move_cost(s, gold) + LeftArc.label_cost(s, gold, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.LeftArc.cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":193
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t cost = 0
 *         if arc_is_gold(gold, s.B(0), s.S(0)):
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_cost;
  long __pyx_v_i;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("move_cost", __pyx_f[0], 193, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":194
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         cdef weight_t cost = 0             # <<<<<<<<<<<<<<
 *         if arc_is_gold(gold, s.B(0), s.S(0)):
 *             # Have a negative cost if we 'recover' from the wrong dependency
 */
  __pyx_v_cost = 0.0;

  /* "spacy\syntax\arc_eager.pyx":195
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         cdef weight_t cost = 0
 *         if arc_is_gold(gold, s.B(0), s.S(0)):             # <<<<<<<<<<<<<<
 *             # Have a negative cost if we 'recover' from the wrong dependency
 *             return 0 if not s.has_head(s.S(0)) else -1
 */
  __pyx_t_1 = (__pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":197
 *         if arc_is_gold(gold, s.B(0), s.S(0)):
 *             # Have a negative cost if we 'recover' from the wrong dependency
 *             return 0 if not s.has_head(s.S(0)) else -1             # <<<<<<<<<<<<<<
 *         else:
 *             # Account for deps we might lose between S0 and stack
 */
    if (((!(__pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(__pyx_v_s, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)) != 0)) != 0)) {
      __pyx_t_2 = 0.0;
    } else {
      __pyx_t_2 = -1.0;
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":195
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         cdef weight_t cost = 0
 *         if arc_is_gold(gold, s.B(0), s.S(0)):             # <<<<<<<<<<<<<<
 *             # Have a negative cost if we 'recover' from the wrong dependency
 *             return 0 if not s.has_head(s.S(0)) else -1
 */
  }

  /* "spacy\syntax\arc_eager.pyx":200
 *         else:
 *             # Account for deps we might lose between S0 and stack
 *             if not s.has_head(s.S(0)):             # <<<<<<<<<<<<<<
 *                 for i in range(1, s.stack_depth()):
 *                     cost += gold.heads[s.S(i)] == s.S(0)
 */
  /*else*/ {
    __pyx_t_1 = ((!(__pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(__pyx_v_s, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)) != 0)) != 0);
    if (__pyx_t_1) {

      /* "spacy\syntax\arc_eager.pyx":201
 *             # Account for deps we might lose between S0 and stack
 *             if not s.has_head(s.S(0)):
 *                 for i in range(1, s.stack_depth()):             # <<<<<<<<<<<<<<
 *                     cost += gold.heads[s.S(i)] == s.S(0)
 *                     cost += gold.heads[s.S(0)] == s.S(i)
 */
      __pyx_t_3 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(__pyx_v_s);
      for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "spacy\syntax\arc_eager.pyx":202
 *             if not s.has_head(s.S(0)):
 *                 for i in range(1, s.stack_depth()):
 *                     cost += gold.heads[s.S(i)] == s.S(0)             # <<<<<<<<<<<<<<
 *                     cost += gold.heads[s.S(0)] == s.S(i)
 *             return cost + pop_cost(s, gold, s.S(0)) + arc_cost(s, gold, s.B(0), s.S(0))
 */
        __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, __pyx_v_i)]) == __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)));

        /* "spacy\syntax\arc_eager.pyx":203
 *                 for i in range(1, s.stack_depth()):
 *                     cost += gold.heads[s.S(i)] == s.S(0)
 *                     cost += gold.heads[s.S(0)] == s.S(i)             # <<<<<<<<<<<<<<
 *             return cost + pop_cost(s, gold, s.S(0)) + arc_cost(s, gold, s.B(0), s.S(0))
 * 
 */
        __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)]) == __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, __pyx_v_i)));
      }

      /* "spacy\syntax\arc_eager.pyx":200
 *         else:
 *             # Account for deps we might lose between S0 and stack
 *             if not s.has_head(s.S(0)):             # <<<<<<<<<<<<<<
 *                 for i in range(1, s.stack_depth()):
 *                     cost += gold.heads[s.S(i)] == s.S(0)
 */
    }

    /* "spacy\syntax\arc_eager.pyx":204
 *                     cost += gold.heads[s.S(i)] == s.S(0)
 *                     cost += gold.heads[s.S(0)] == s.S(i)
 *             return cost + pop_cost(s, gold, s.S(0)) + arc_cost(s, gold, s.B(0), s.S(0))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_r = ((__pyx_v_cost + __pyx_f_5spacy_6syntax_9arc_eager_pop_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0))) + __pyx_f_5spacy_6syntax_9arc_eager_arc_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0)));
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":193
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t cost = 0
 *         if arc_is_gold(gold, s.B(0), s.S(0)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.LeftArc.move_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":207
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return arc_is_gold(gold, s.B(0), s.S(0)) and not label_is_gold(gold, s.B(0), s.S(0), label)
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_cost", __pyx_f[0], 207, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":208
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return arc_is_gold(gold, s.B(0), s.S(0)) and not label_is_gold(gold, s.B(0), s.S(0), label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (!(__pyx_f_5spacy_6syntax_9arc_eager_label_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_v_label) != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":207
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return arc_is_gold(gold, s.B(0), s.S(0)) and not label_is_gold(gold, s.B(0), s.S(0), label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.LeftArc.label_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":213
 * cdef class RightArc:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return not st.B_(0).sent_start
 * 
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_valid", __pyx_f[0], 213, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":214
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:
 *         return not st.B_(0).sent_start             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (!(__pyx_v_st->B_(0)->sent_start != 0));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":213
 * cdef class RightArc:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         return not st.B_(0).sent_start
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.RightArc.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":217
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.add_arc(st.S(0), st.B(0), label)
 *         st.push()
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transition", __pyx_f[0], 217, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":218
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.add_arc(st.S(0), st.B(0), label)             # <<<<<<<<<<<<<<
 *         st.push()
 *         st.fast_forward()
 */
  __pyx_v_st->add_arc(__pyx_v_st->S(0), __pyx_v_st->B(0), __pyx_v_label);

  /* "spacy\syntax\arc_eager.pyx":219
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.add_arc(st.S(0), st.B(0), label)
 *         st.push()             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
  __pyx_v_st->push();

  /* "spacy\syntax\arc_eager.pyx":220
 *         st.add_arc(st.S(0), st.B(0), label)
 *         st.push()
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":217
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.add_arc(st.S(0), st.B(0), label)
 *         st.push()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.RightArc.transition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":223
 * 
 *     @staticmethod
 *     cdef inline weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return RightArc.move_cost(s, gold) + RightArc.label_cost(s, gold, label)
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cost", __pyx_f[0], 223, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":224
 *     @staticmethod
 *     cdef inline weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return RightArc.move_cost(s, gold) + RightArc.label_cost(s, gold, label)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost(__pyx_v_s, __pyx_v_gold) + __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_label_cost(__pyx_v_s, __pyx_v_gold, __pyx_v_label));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":223
 * 
 *     @staticmethod
 *     cdef inline weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return RightArc.move_cost(s, gold) + RightArc.label_cost(s, gold, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.RightArc.cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":227
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         if arc_is_gold(gold, s.S(0), s.B(0)):
 *             return 0
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("move_cost", __pyx_f[0], 227, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":228
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         if arc_is_gold(gold, s.S(0), s.B(0)):             # <<<<<<<<<<<<<<
 *             return 0
 *         elif s.c.shifted[s.B(0)]:
 */
  __pyx_t_1 = (__pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0)) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":229
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         if arc_is_gold(gold, s.S(0), s.B(0)):
 *             return 0             # <<<<<<<<<<<<<<
 *         elif s.c.shifted[s.B(0)]:
 *             return push_cost(s, gold, s.B(0))
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":228
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         if arc_is_gold(gold, s.S(0), s.B(0)):             # <<<<<<<<<<<<<<
 *             return 0
 *         elif s.c.shifted[s.B(0)]:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":230
 *         if arc_is_gold(gold, s.S(0), s.B(0)):
 *             return 0
 *         elif s.c.shifted[s.B(0)]:             # <<<<<<<<<<<<<<
 *             return push_cost(s, gold, s.B(0))
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_s->c->shifted[__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0)]) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":231
 *             return 0
 *         elif s.c.shifted[s.B(0)]:
 *             return push_cost(s, gold, s.B(0))             # <<<<<<<<<<<<<<
 *         else:
 *             return push_cost(s, gold, s.B(0)) + arc_cost(s, gold, s.S(0), s.B(0))
 */
    __pyx_r = __pyx_f_5spacy_6syntax_9arc_eager_push_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0));
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":230
 *         if arc_is_gold(gold, s.S(0), s.B(0)):
 *             return 0
 *         elif s.c.shifted[s.B(0)]:             # <<<<<<<<<<<<<<
 *             return push_cost(s, gold, s.B(0))
 *         else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":233
 *             return push_cost(s, gold, s.B(0))
 *         else:
 *             return push_cost(s, gold, s.B(0)) + arc_cost(s, gold, s.S(0), s.B(0))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_push_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0)) + __pyx_f_5spacy_6syntax_9arc_eager_arc_cost(__pyx_v_s, __pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0)));
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":227
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         if arc_is_gold(gold, s.S(0), s.B(0)):
 *             return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.RightArc.move_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":236
 * 
 *     @staticmethod
 *     cdef weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return arc_is_gold(gold, s.S(0), s.B(0)) and not label_is_gold(gold, s.S(0), s.B(0), label)
 * 
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_label_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  __pyx_t_5thinc_8typedefs_weight_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_cost", __pyx_f[0], 236, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":237
 *     @staticmethod
 *     cdef weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return arc_is_gold(gold, s.S(0), s.B(0)) and not label_is_gold(gold, s.S(0), s.B(0), label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_5spacy_6syntax_9arc_eager_arc_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (!(__pyx_f_5spacy_6syntax_9arc_eager_label_is_gold(__pyx_v_gold, __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_v_label) != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":236
 * 
 *     @staticmethod
 *     cdef weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return arc_is_gold(gold, s.S(0), s.B(0)) and not label_is_gold(gold, s.S(0), s.B(0), label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.RightArc.label_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":242
 * cdef class Break:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if not USE_BREAK:
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_valid", __pyx_f[0], 242, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":246
 *         if not USE_BREAK:
 *             return False
 *         elif st.at_break():             # <<<<<<<<<<<<<<
 *             return False
 *         elif st.stack_depth() < 1:
 */
  __pyx_t_1 = (__pyx_v_st->at_break() != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":247
 *             return False
 *         elif st.at_break():
 *             return False             # <<<<<<<<<<<<<<
 *         elif st.stack_depth() < 1:
 *             return False
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":246
 *         if not USE_BREAK:
 *             return False
 *         elif st.at_break():             # <<<<<<<<<<<<<<
 *             return False
 *         elif st.stack_depth() < 1:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":248
 *         elif st.at_break():
 *             return False
 *         elif st.stack_depth() < 1:             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_st->stack_depth() < 1) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":249
 *             return False
 *         elif st.stack_depth() < 1:
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             return True
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":248
 *         elif st.at_break():
 *             return False
 *         elif st.stack_depth() < 1:             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":251
 *             return False
 *         else:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":242
 * cdef class Break:
 *     @staticmethod
 *     cdef bint is_valid(const StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if not USE_BREAK:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Break.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":254
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.set_break(st.B_(0).l_edge)
 *         st.fast_forward()
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_5Break_transition(__pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st, CYTHON_UNUSED int __pyx_v_label) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transition", __pyx_f[0], 254, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":255
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.set_break(st.B_(0).l_edge)             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
  __pyx_v_st->set_break(__pyx_v_st->B_(0)->l_edge);

  /* "spacy\syntax\arc_eager.pyx":256
 *     cdef int transition(StateC* st, int label) nogil:
 *         st.set_break(st.B_(0).l_edge)
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":254
 * 
 *     @staticmethod
 *     cdef int transition(StateC* st, int label) nogil:             # <<<<<<<<<<<<<<
 *         st.set_break(st.B_(0).l_edge)
 *         st.fast_forward()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Break.transition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":259
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Break.move_cost(s, gold) + Break.label_cost(s, gold, label)
 * 
 */

static __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("cost", __pyx_f[0], 259, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":260
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return Break.move_cost(s, gold) + Break.label_cost(s, gold, label)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (__pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(__pyx_v_s, __pyx_v_gold) + __pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost(__pyx_v_s, __pyx_v_gold, __pyx_v_label));
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":259
 * 
 *     @staticmethod
 *     cdef weight_t cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return Break.move_cost(s, gold) + Break.label_cost(s, gold, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Break.cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":263
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t cost = 0
 *         cdef int i, j, S_i, B_i
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_cost;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_S_i;
  int __pyx_v_B_i;
  int __pyx_v_s0_root;
  int __pyx_v_b0_root;
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("move_cost", __pyx_f[0], 263, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":264
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:
 *         cdef weight_t cost = 0             # <<<<<<<<<<<<<<
 *         cdef int i, j, S_i, B_i
 *         for i in range(s.stack_depth()):
 */
  __pyx_v_cost = 0.0;

  /* "spacy\syntax\arc_eager.pyx":266
 *         cdef weight_t cost = 0
 *         cdef int i, j, S_i, B_i
 *         for i in range(s.stack_depth()):             # <<<<<<<<<<<<<<
 *             S_i = s.S(i)
 *             for j in range(s.buffer_length()):
 */
  __pyx_t_1 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(__pyx_v_s);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":267
 *         cdef int i, j, S_i, B_i
 *         for i in range(s.stack_depth()):
 *             S_i = s.S(i)             # <<<<<<<<<<<<<<
 *             for j in range(s.buffer_length()):
 *                 B_i = s.B(j)
 */
    __pyx_v_S_i = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, __pyx_v_i);

    /* "spacy\syntax\arc_eager.pyx":268
 *         for i in range(s.stack_depth()):
 *             S_i = s.S(i)
 *             for j in range(s.buffer_length()):             # <<<<<<<<<<<<<<
 *                 B_i = s.B(j)
 *                 cost += gold.heads[S_i] == B_i
 */
    __pyx_t_3 = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_buffer_length(__pyx_v_s);
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "spacy\syntax\arc_eager.pyx":269
 *             S_i = s.S(i)
 *             for j in range(s.buffer_length()):
 *                 B_i = s.B(j)             # <<<<<<<<<<<<<<
 *                 cost += gold.heads[S_i] == B_i
 *                 cost += gold.heads[B_i] == S_i
 */
      __pyx_v_B_i = __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, __pyx_v_j);

      /* "spacy\syntax\arc_eager.pyx":270
 *             for j in range(s.buffer_length()):
 *                 B_i = s.B(j)
 *                 cost += gold.heads[S_i] == B_i             # <<<<<<<<<<<<<<
 *                 cost += gold.heads[B_i] == S_i
 *                 if cost != 0:
 */
      __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_v_S_i]) == __pyx_v_B_i));

      /* "spacy\syntax\arc_eager.pyx":271
 *                 B_i = s.B(j)
 *                 cost += gold.heads[S_i] == B_i
 *                 cost += gold.heads[B_i] == S_i             # <<<<<<<<<<<<<<
 *                 if cost != 0:
 *                     return cost
 */
      __pyx_v_cost = (__pyx_v_cost + ((__pyx_v_gold->heads[__pyx_v_B_i]) == __pyx_v_S_i));

      /* "spacy\syntax\arc_eager.pyx":272
 *                 cost += gold.heads[S_i] == B_i
 *                 cost += gold.heads[B_i] == S_i
 *                 if cost != 0:             # <<<<<<<<<<<<<<
 *                     return cost
 *         # Check for sentence boundary --- if it's here, we can't have any deps
 */
      __pyx_t_5 = ((__pyx_v_cost != 0.0) != 0);
      if (__pyx_t_5) {

        /* "spacy\syntax\arc_eager.pyx":273
 *                 cost += gold.heads[B_i] == S_i
 *                 if cost != 0:
 *                     return cost             # <<<<<<<<<<<<<<
 *         # Check for sentence boundary --- if it's here, we can't have any deps
 *         # between stack and buffer, so rest of action is irrelevant.
 */
        __pyx_r = __pyx_v_cost;
        goto __pyx_L0;

        /* "spacy\syntax\arc_eager.pyx":272
 *                 cost += gold.heads[S_i] == B_i
 *                 cost += gold.heads[B_i] == S_i
 *                 if cost != 0:             # <<<<<<<<<<<<<<
 *                     return cost
 *         # Check for sentence boundary --- if it's here, we can't have any deps
 */
      }
    }
  }

  /* "spacy\syntax\arc_eager.pyx":276
 *         # Check for sentence boundary --- if it's here, we can't have any deps
 *         # between stack and buffer, so rest of action is irrelevant.
 *         s0_root = _get_root(s.S(0), gold)             # <<<<<<<<<<<<<<
 *         b0_root = _get_root(s.B(0), gold)
 *         if s0_root != b0_root or s0_root == -1 or b0_root == -1:
 */
  __pyx_v_s0_root = __pyx_f_5spacy_6syntax_9arc_eager__get_root(__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(__pyx_v_s, 0), __pyx_v_gold);

  /* "spacy\syntax\arc_eager.pyx":277
 *         # between stack and buffer, so rest of action is irrelevant.
 *         s0_root = _get_root(s.S(0), gold)
 *         b0_root = _get_root(s.B(0), gold)             # <<<<<<<<<<<<<<
 *         if s0_root != b0_root or s0_root == -1 or b0_root == -1:
 *             return cost
 */
  __pyx_v_b0_root = __pyx_f_5spacy_6syntax_9arc_eager__get_root(__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(__pyx_v_s, 0), __pyx_v_gold);

  /* "spacy\syntax\arc_eager.pyx":278
 *         s0_root = _get_root(s.S(0), gold)
 *         b0_root = _get_root(s.B(0), gold)
 *         if s0_root != b0_root or s0_root == -1 or b0_root == -1:             # <<<<<<<<<<<<<<
 *             return cost
 *         else:
 */
  __pyx_t_6 = ((__pyx_v_s0_root != __pyx_v_b0_root) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_s0_root == -1L) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_b0_root == -1L) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_5) {

    /* "spacy\syntax\arc_eager.pyx":279
 *         b0_root = _get_root(s.B(0), gold)
 *         if s0_root != b0_root or s0_root == -1 or b0_root == -1:
 *             return cost             # <<<<<<<<<<<<<<
 *         else:
 *             return cost + 1
 */
    __pyx_r = __pyx_v_cost;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":278
 *         s0_root = _get_root(s.S(0), gold)
 *         b0_root = _get_root(s.B(0), gold)
 *         if s0_root != b0_root or s0_root == -1 or b0_root == -1:             # <<<<<<<<<<<<<<
 *             return cost
 *         else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":281
 *             return cost
 *         else:
 *             return cost + 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = (__pyx_v_cost + 1.0);
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":263
 * 
 *     @staticmethod
 *     cdef inline weight_t move_cost(StateClass s, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *         cdef weight_t cost = 0
 *         cdef int i, j, S_i, B_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Break.move_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":284
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t __pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_s, CYTHON_UNUSED struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold, CYTHON_UNUSED int __pyx_v_label) {
  __pyx_t_5thinc_8typedefs_weight_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("label_cost", __pyx_f[0], 284, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":285
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int _get_root(int word, const GoldParseC* gold) nogil:
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":284
 * 
 *     @staticmethod
 *     cdef inline weight_t label_cost(StateClass s, const GoldParseC* gold, int label) nogil:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.Break.label_cost", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":287
 *         return 0
 * 
 * cdef int _get_root(int word, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:
 *         word = gold.heads[word]
 */

static int __pyx_f_5spacy_6syntax_9arc_eager__get_root(int __pyx_v_word, struct __pyx_t_5spacy_4gold_GoldParseC const *__pyx_v_gold) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("_get_root", __pyx_f[0], 287, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":288
 * 
 * cdef int _get_root(int word, const GoldParseC* gold) nogil:
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:             # <<<<<<<<<<<<<<
 *         word = gold.heads[word]
 *     if gold.labels[word] == -1:
 */
  while (1) {
    __pyx_t_2 = (((__pyx_v_gold->heads[__pyx_v_word]) != __pyx_v_word) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_gold->labels[__pyx_v_word]) != -1L) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_word >= 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "spacy\syntax\arc_eager.pyx":289
 * cdef int _get_root(int word, const GoldParseC* gold) nogil:
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:
 *         word = gold.heads[word]             # <<<<<<<<<<<<<<
 *     if gold.labels[word] == -1:
 *         return -1
 */
    __pyx_v_word = (__pyx_v_gold->heads[__pyx_v_word]);
  }

  /* "spacy\syntax\arc_eager.pyx":290
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:
 *         word = gold.heads[word]
 *     if gold.labels[word] == -1:             # <<<<<<<<<<<<<<
 *         return -1
 *     else:
 */
  __pyx_t_1 = (((__pyx_v_gold->labels[__pyx_v_word]) == -1L) != 0);
  if (__pyx_t_1) {

    /* "spacy\syntax\arc_eager.pyx":291
 *         word = gold.heads[word]
 *     if gold.labels[word] == -1:
 *         return -1             # <<<<<<<<<<<<<<
 *     else:
 *         return word
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":290
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:
 *         word = gold.heads[word]
 *     if gold.labels[word] == -1:             # <<<<<<<<<<<<<<
 *         return -1
 *     else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":293
 *         return -1
 *     else:
 *         return word             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = __pyx_v_word;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":287
 *         return 0
 * 
 * cdef int _get_root(int word, const GoldParseC* gold) nogil:             # <<<<<<<<<<<<<<
 *     while gold.heads[word] != word and gold.labels[word] != -1 and word >= 0:
 *         word = gold.heads[word]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager._get_root", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":296
 * 
 * 
 * cdef void* _init_state(Pool mem, int length, void* tokens) except NULL:             # <<<<<<<<<<<<<<
 *     cdef StateClass st = StateClass.init(<const TokenC*>tokens, length)
 *     # Ensure sent_start is set to 0 throughout
 */

static void *__pyx_f_5spacy_6syntax_9arc_eager__init_state(CYTHON_UNUSED struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem, int __pyx_v_length, void *__pyx_v_tokens) {
  struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_st = 0;
  int __pyx_v_i;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_state", 0);
  __Pyx_TraceCall("_init_state", __pyx_f[0], 296, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":297
 * 
 * cdef void* _init_state(Pool mem, int length, void* tokens) except NULL:
 *     cdef StateClass st = StateClass.init(<const TokenC*>tokens, length)             # <<<<<<<<<<<<<<
 *     # Ensure sent_start is set to 0 throughout
 *     for i in range(st.c.length):
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5spacy_6syntax_10stateclass_10StateClass_init(((struct __pyx_t_5spacy_7structs_TokenC const *)__pyx_v_tokens), __pyx_v_length)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_st = ((struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy\syntax\arc_eager.pyx":299
 *     cdef StateClass st = StateClass.init(<const TokenC*>tokens, length)
 *     # Ensure sent_start is set to 0 throughout
 *     for i in range(st.c.length):             # <<<<<<<<<<<<<<
 *         st.c._sent[i].sent_start = False
 *         st.c._sent[i].l_edge = i
 */
  __pyx_t_2 = __pyx_v_st->c->length;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "spacy\syntax\arc_eager.pyx":300
 *     # Ensure sent_start is set to 0 throughout
 *     for i in range(st.c.length):
 *         st.c._sent[i].sent_start = False             # <<<<<<<<<<<<<<
 *         st.c._sent[i].l_edge = i
 *         st.c._sent[i].r_edge = i
 */
    (__pyx_v_st->c->_sent[__pyx_v_i]).sent_start = 0;

    /* "spacy\syntax\arc_eager.pyx":301
 *     for i in range(st.c.length):
 *         st.c._sent[i].sent_start = False
 *         st.c._sent[i].l_edge = i             # <<<<<<<<<<<<<<
 *         st.c._sent[i].r_edge = i
 *     st.fast_forward()
 */
    (__pyx_v_st->c->_sent[__pyx_v_i]).l_edge = __pyx_v_i;

    /* "spacy\syntax\arc_eager.pyx":302
 *         st.c._sent[i].sent_start = False
 *         st.c._sent[i].l_edge = i
 *         st.c._sent[i].r_edge = i             # <<<<<<<<<<<<<<
 *     st.fast_forward()
 *     Py_INCREF(st)
 */
    (__pyx_v_st->c->_sent[__pyx_v_i]).r_edge = __pyx_v_i;
  }

  /* "spacy\syntax\arc_eager.pyx":303
 *         st.c._sent[i].l_edge = i
 *         st.c._sent[i].r_edge = i
 *     st.fast_forward()             # <<<<<<<<<<<<<<
 *     Py_INCREF(st)
 *     return <void*>st
 */
  __pyx_f_5spacy_6syntax_10stateclass_10StateClass_fast_forward(__pyx_v_st);

  /* "spacy\syntax\arc_eager.pyx":304
 *         st.c._sent[i].r_edge = i
 *     st.fast_forward()
 *     Py_INCREF(st)             # <<<<<<<<<<<<<<
 *     return <void*>st
 * 
 */
  Py_INCREF(((PyObject *)__pyx_v_st));

  /* "spacy\syntax\arc_eager.pyx":305
 *     st.fast_forward()
 *     Py_INCREF(st)
 *     return <void*>st             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_st);
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":296
 * 
 * 
 * cdef void* _init_state(Pool mem, int length, void* tokens) except NULL:             # <<<<<<<<<<<<<<
 *     cdef StateClass st = StateClass.init(<const TokenC*>tokens, length)
 *     # Ensure sent_start is set to 0 throughout
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.syntax.arc_eager._init_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_st);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":309
 * 
 * cdef class ArcEager(TransitionSystem):
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         TransitionSystem.__init__(self, *args, **kwargs)
 *         self.init_beam_state = _init_state
 */

/* Python wrapper */
static int __pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager___init__(((struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager___init__(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 309, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":310
 * cdef class ArcEager(TransitionSystem):
 *     def __init__(self, *args, **kwargs):
 *         TransitionSystem.__init__(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 *         self.init_beam_state = _init_state
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem), __pyx_n_s_init); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy\syntax\arc_eager.pyx":311
 *     def __init__(self, *args, **kwargs):
 *         TransitionSystem.__init__(self, *args, **kwargs)
 *         self.init_beam_state = _init_state             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_v_self->__pyx_base.init_beam_state = __pyx_f_5spacy_6syntax_9arc_eager__init_state;

  /* "spacy\syntax\arc_eager.pyx":309
 * 
 * cdef class ArcEager(TransitionSystem):
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         TransitionSystem.__init__(self, *args, **kwargs)
 *         self.init_beam_state = _init_state
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":314
 * 
 *     @classmethod
 *     def get_actions(cls, **kwargs):             # <<<<<<<<<<<<<<
 *         actions = kwargs.get('actions',
 *                     {
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_3get_actions(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_3get_actions(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_actions (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_actions", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_actions", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_2get_actions(((PyTypeObject*)__pyx_v_cls), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_2get_actions(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_actions = NULL;
  PyObject *__pyx_v_seen_actions = NULL;
  PyObject *__pyx_v_label = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_raw_text = NULL;
  PyObject *__pyx_v_sents = NULL;
  PyObject *__pyx_v_ids = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_words = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_tags = NULL;
  PyObject *__pyx_v_heads = NULL;
  PyObject *__pyx_v_labels = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_iob = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ctnts = NULL;
  PyObject *__pyx_v_child = NULL;
  PyObject *__pyx_v_head = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  Py_ssize_t __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_actions", 0);
  __Pyx_TraceCall("get_actions", __pyx_f[0], 314, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":317
 *         actions = kwargs.get('actions',
 *                     {
 *                         SHIFT: [''],             # <<<<<<<<<<<<<<
 *                         REDUCE: [''],
 *                         RIGHT: [],
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_SHIFT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_);
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":318
 *                     {
 *                         SHIFT: [''],
 *                         REDUCE: [''],             # <<<<<<<<<<<<<<
 *                         RIGHT: [],
 *                         LEFT: [],
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_REDUCE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_);
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy\syntax\arc_eager.pyx":319
 *                         SHIFT: [''],
 *                         REDUCE: [''],
 *                         RIGHT: [],             # <<<<<<<<<<<<<<
 *                         LEFT: [],
 *                         BREAK: ['ROOT']})
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_RIGHT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":320
 *                         REDUCE: [''],
 *                         RIGHT: [],
 *                         LEFT: [],             # <<<<<<<<<<<<<<
 *                         BREAK: ['ROOT']})
 *         seen_actions = set()
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_LEFT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy\syntax\arc_eager.pyx":321
 *                         RIGHT: [],
 *                         LEFT: [],
 *                         BREAK: ['ROOT']})             # <<<<<<<<<<<<<<
 *         seen_actions = set()
 *         for label in kwargs.get('left_labels', []):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_BREAK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_ROOT);
  __Pyx_GIVEREF(__pyx_n_u_ROOT);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_ROOT);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":315
 *     @classmethod
 *     def get_actions(cls, **kwargs):
 *         actions = kwargs.get('actions',             # <<<<<<<<<<<<<<
 *                     {
 *                         SHIFT: [''],
 */
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_actions, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_actions = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":322
 *                         LEFT: [],
 *                         BREAK: ['ROOT']})
 *         seen_actions = set()             # <<<<<<<<<<<<<<
 *         for label in kwargs.get('left_labels', []):
 *             if label.upper() != 'ROOT':
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_seen_actions = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":323
 *                         BREAK: ['ROOT']})
 *         seen_actions = set()
 *         for label in kwargs.get('left_labels', []):             # <<<<<<<<<<<<<<
 *             if label.upper() != 'ROOT':
 *                 if (LEFT, label) not in seen_actions:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_left_labels, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_label, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy\syntax\arc_eager.pyx":324
 *         seen_actions = set()
 *         for label in kwargs.get('left_labels', []):
 *             if label.upper() != 'ROOT':             # <<<<<<<<<<<<<<
 *                 if (LEFT, label) not in seen_actions:
 *                     actions[LEFT].append(label)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_label, __pyx_n_s_upper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_ROOT, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "spacy\syntax\arc_eager.pyx":325
 *         for label in kwargs.get('left_labels', []):
 *             if label.upper() != 'ROOT':
 *                 if (LEFT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_LEFT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_label);
      __Pyx_GIVEREF(__pyx_v_label);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_label);
      __pyx_t_1 = 0;
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_seen_actions, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "spacy\syntax\arc_eager.pyx":326
 *             if label.upper() != 'ROOT':
 *                 if (LEFT, label) not in seen_actions:
 *                     actions[LEFT].append(label)             # <<<<<<<<<<<<<<
 *         for label in kwargs.get('right_labels', []):
 *             if label.upper() != 'ROOT':
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_actions, __pyx_e_5spacy_6syntax_9arc_eager_LEFT, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_label); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "spacy\syntax\arc_eager.pyx":325
 *         for label in kwargs.get('left_labels', []):
 *             if label.upper() != 'ROOT':
 *                 if (LEFT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):
 */
      }

      /* "spacy\syntax\arc_eager.pyx":324
 *         seen_actions = set()
 *         for label in kwargs.get('left_labels', []):
 *             if label.upper() != 'ROOT':             # <<<<<<<<<<<<<<
 *                 if (LEFT, label) not in seen_actions:
 *                     actions[LEFT].append(label)
 */
    }

    /* "spacy\syntax\arc_eager.pyx":323
 *                         BREAK: ['ROOT']})
 *         seen_actions = set()
 *         for label in kwargs.get('left_labels', []):             # <<<<<<<<<<<<<<
 *             if label.upper() != 'ROOT':
 *                 if (LEFT, label) not in seen_actions:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":327
 *                 if (LEFT, label) not in seen_actions:
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):             # <<<<<<<<<<<<<<
 *             if label.upper() != 'ROOT':
 *                 if (RIGHT, label) not in seen_actions:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_right_labels, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_label, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "spacy\syntax\arc_eager.pyx":328
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):
 *             if label.upper() != 'ROOT':             # <<<<<<<<<<<<<<
 *                 if (RIGHT, label) not in seen_actions:
 *                     actions[RIGHT].append(label)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_label, __pyx_n_s_upper); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_ROOT, Py_NE)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "spacy\syntax\arc_eager.pyx":329
 *         for label in kwargs.get('right_labels', []):
 *             if label.upper() != 'ROOT':
 *                 if (RIGHT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                     actions[RIGHT].append(label)
 * 
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_RIGHT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_label);
      __Pyx_GIVEREF(__pyx_v_label);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_label);
      __pyx_t_2 = 0;
      __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_seen_actions, Py_NE)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = (__pyx_t_8 != 0);
      if (__pyx_t_7) {

        /* "spacy\syntax\arc_eager.pyx":330
 *             if label.upper() != 'ROOT':
 *                 if (RIGHT, label) not in seen_actions:
 *                     actions[RIGHT].append(label)             # <<<<<<<<<<<<<<
 * 
 *         for raw_text, sents in kwargs.get('gold_parses', []):
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_actions, __pyx_e_5spacy_6syntax_9arc_eager_RIGHT, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_label); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "spacy\syntax\arc_eager.pyx":329
 *         for label in kwargs.get('right_labels', []):
 *             if label.upper() != 'ROOT':
 *                 if (RIGHT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                     actions[RIGHT].append(label)
 * 
 */
      }

      /* "spacy\syntax\arc_eager.pyx":328
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):
 *             if label.upper() != 'ROOT':             # <<<<<<<<<<<<<<
 *                 if (RIGHT, label) not in seen_actions:
 *                     actions[RIGHT].append(label)
 */
    }

    /* "spacy\syntax\arc_eager.pyx":327
 *                 if (LEFT, label) not in seen_actions:
 *                     actions[LEFT].append(label)
 *         for label in kwargs.get('right_labels', []):             # <<<<<<<<<<<<<<
 *             if label.upper() != 'ROOT':
 *                 if (RIGHT, label) not in seen_actions:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":332
 *                     actions[RIGHT].append(label)
 * 
 *         for raw_text, sents in kwargs.get('gold_parses', []):             # <<<<<<<<<<<<<<
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_gold_parses, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L14_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_raw_text, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sents, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "spacy\syntax\arc_eager.pyx":333
 * 
 *         for raw_text, sents in kwargs.get('gold_parses', []):
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:             # <<<<<<<<<<<<<<
 *                 for child, head, label in zip(ids, heads, labels):
 *                     if label.upper() == 'ROOT':
 */
    if (likely(PyList_CheckExact(__pyx_v_sents)) || PyTuple_CheckExact(__pyx_v_sents)) {
      __pyx_t_1 = __pyx_v_sents; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_sents); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_13(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_14); if (unlikely(!__pyx_t_2)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_10 = __pyx_t_11(__pyx_t_14); if (unlikely(!__pyx_t_10)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_14), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L18_unpacking_done;
        __pyx_L17_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L18_unpacking_done:;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 6)) {
          if (size > 6) __Pyx_RaiseTooManyValuesError(6);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_16 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_17 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_18 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_19 = PyTuple_GET_ITEM(sequence, 5); 
        } else {
          __pyx_t_14 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_16 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_17 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_18 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_19 = PyList_GET_ITEM(sequence, 5); 
        }
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_19);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[6] = {&__pyx_t_14,&__pyx_t_15,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18,&__pyx_t_19};
          for (i=0; i < 6; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[6] = {&__pyx_t_14,&__pyx_t_15,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18,&__pyx_t_19};
        __pyx_t_20 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_20)->tp_iternext;
        for (index=0; index < 6; index++) {
          PyObject* item = __pyx_t_11(__pyx_t_20); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_20), 6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        goto __pyx_L20_unpacking_done;
        __pyx_L19_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L20_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_ids, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_words, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tags, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_XDECREF_SET(__pyx_v_heads, __pyx_t_17);
      __pyx_t_17 = 0;
      __Pyx_XDECREF_SET(__pyx_v_labels, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_XDECREF_SET(__pyx_v_iob, __pyx_t_19);
      __pyx_t_19 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ctnts, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "spacy\syntax\arc_eager.pyx":334
 *         for raw_text, sents in kwargs.get('gold_parses', []):
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):             # <<<<<<<<<<<<<<
 *                     if label.upper() == 'ROOT':
 *                         label = 'ROOT'
 */
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_ids);
      __Pyx_GIVEREF(__pyx_v_ids);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_ids);
      __Pyx_INCREF(__pyx_v_heads);
      __Pyx_GIVEREF(__pyx_v_heads);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_heads);
      __Pyx_INCREF(__pyx_v_labels);
      __Pyx_GIVEREF(__pyx_v_labels);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_labels);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_6, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_6 = __pyx_t_10; __Pyx_INCREF(__pyx_t_6); __pyx_t_21 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_21 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_22 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_21); __Pyx_INCREF(__pyx_t_10); __pyx_t_21++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_21); __Pyx_INCREF(__pyx_t_10); __pyx_t_21++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_22(__pyx_t_6);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
          PyObject* sequence = __pyx_t_10;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_19 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_19 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(__pyx_t_18);
          #else
          __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_19 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_18 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_18);
          #endif
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_17 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_17)->tp_iternext;
          index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_17); if (unlikely(!__pyx_t_2)) goto __pyx_L23_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_2);
          index = 1; __pyx_t_19 = __pyx_t_11(__pyx_t_17); if (unlikely(!__pyx_t_19)) goto __pyx_L23_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_19);
          index = 2; __pyx_t_18 = __pyx_t_11(__pyx_t_17); if (unlikely(!__pyx_t_18)) goto __pyx_L23_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_18);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_17), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L24_unpacking_done;
          __pyx_L23_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_L24_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_child, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_head, __pyx_t_19);
        __pyx_t_19 = 0;
        __Pyx_XDECREF_SET(__pyx_v_label, __pyx_t_18);
        __pyx_t_18 = 0;

        /* "spacy\syntax\arc_eager.pyx":335
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):
 *                     if label.upper() == 'ROOT':             # <<<<<<<<<<<<<<
 *                         label = 'ROOT'
 *                     if label != 'ROOT':
 */
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_label, __pyx_n_s_upper); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_19 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_18))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_18, function);
          }
        }
        if (__pyx_t_19) {
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        } else {
          __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_18); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_ROOT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_7) {

          /* "spacy\syntax\arc_eager.pyx":336
 *                 for child, head, label in zip(ids, heads, labels):
 *                     if label.upper() == 'ROOT':
 *                         label = 'ROOT'             # <<<<<<<<<<<<<<
 *                     if label != 'ROOT':
 *                         if head < child:
 */
          __Pyx_INCREF(__pyx_n_u_ROOT);
          __Pyx_DECREF_SET(__pyx_v_label, __pyx_n_u_ROOT);

          /* "spacy\syntax\arc_eager.pyx":335
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):
 *                     if label.upper() == 'ROOT':             # <<<<<<<<<<<<<<
 *                         label = 'ROOT'
 *                     if label != 'ROOT':
 */
        }

        /* "spacy\syntax\arc_eager.pyx":337
 *                     if label.upper() == 'ROOT':
 *                         label = 'ROOT'
 *                     if label != 'ROOT':             # <<<<<<<<<<<<<<
 *                         if head < child:
 *                             if (RIGHT, label) not in seen_actions:
 */
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_label, __pyx_n_u_ROOT, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        if (__pyx_t_7) {

          /* "spacy\syntax\arc_eager.pyx":338
 *                         label = 'ROOT'
 *                     if label != 'ROOT':
 *                         if head < child:             # <<<<<<<<<<<<<<
 *                             if (RIGHT, label) not in seen_actions:
 *                                 actions[RIGHT].append(label)
 */
          __pyx_t_10 = PyObject_RichCompare(__pyx_v_head, __pyx_v_child, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_7) {

            /* "spacy\syntax\arc_eager.pyx":339
 *                     if label != 'ROOT':
 *                         if head < child:
 *                             if (RIGHT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:
 */
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_RIGHT); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_10);
            __Pyx_INCREF(__pyx_v_label);
            __Pyx_GIVEREF(__pyx_v_label);
            PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_v_label);
            __pyx_t_10 = 0;
            __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_18, __pyx_v_seen_actions, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_8 = (__pyx_t_7 != 0);
            if (__pyx_t_8) {

              /* "spacy\syntax\arc_eager.pyx":340
 *                         if head < child:
 *                             if (RIGHT, label) not in seen_actions:
 *                                 actions[RIGHT].append(label)             # <<<<<<<<<<<<<<
 *                         elif head > child:
 *                             if (LEFT, label) not in seen_actions:
 */
              __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_actions, __pyx_e_5spacy_6syntax_9arc_eager_RIGHT, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_18 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_18, __pyx_v_label); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

              /* "spacy\syntax\arc_eager.pyx":339
 *                     if label != 'ROOT':
 *                         if head < child:
 *                             if (RIGHT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:
 */
            }

            /* "spacy\syntax\arc_eager.pyx":338
 *                         label = 'ROOT'
 *                     if label != 'ROOT':
 *                         if head < child:             # <<<<<<<<<<<<<<
 *                             if (RIGHT, label) not in seen_actions:
 *                                 actions[RIGHT].append(label)
 */
            goto __pyx_L27;
          }

          /* "spacy\syntax\arc_eager.pyx":341
 *                             if (RIGHT, label) not in seen_actions:
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:             # <<<<<<<<<<<<<<
 *                             if (LEFT, label) not in seen_actions:
 *                                 actions[LEFT].append(label)
 */
          __pyx_t_18 = PyObject_RichCompare(__pyx_v_head, __pyx_v_child, Py_GT); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (__pyx_t_8) {

            /* "spacy\syntax\arc_eager.pyx":342
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:
 *                             if (LEFT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                                 actions[LEFT].append(label)
 *         return actions
 */
            __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_LEFT); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_18);
            PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_18);
            __Pyx_INCREF(__pyx_v_label);
            __Pyx_GIVEREF(__pyx_v_label);
            PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_label);
            __pyx_t_18 = 0;
            __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_10, __pyx_v_seen_actions, Py_NE)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_7 = (__pyx_t_8 != 0);
            if (__pyx_t_7) {

              /* "spacy\syntax\arc_eager.pyx":343
 *                         elif head > child:
 *                             if (LEFT, label) not in seen_actions:
 *                                 actions[LEFT].append(label)             # <<<<<<<<<<<<<<
 *         return actions
 * 
 */
              __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_actions, __pyx_e_5spacy_6syntax_9arc_eager_LEFT, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_v_label); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

              /* "spacy\syntax\arc_eager.pyx":342
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:
 *                             if (LEFT, label) not in seen_actions:             # <<<<<<<<<<<<<<
 *                                 actions[LEFT].append(label)
 *         return actions
 */
            }

            /* "spacy\syntax\arc_eager.pyx":341
 *                             if (RIGHT, label) not in seen_actions:
 *                                 actions[RIGHT].append(label)
 *                         elif head > child:             # <<<<<<<<<<<<<<
 *                             if (LEFT, label) not in seen_actions:
 *                                 actions[LEFT].append(label)
 */
          }
          __pyx_L27:;

          /* "spacy\syntax\arc_eager.pyx":337
 *                     if label.upper() == 'ROOT':
 *                         label = 'ROOT'
 *                     if label != 'ROOT':             # <<<<<<<<<<<<<<
 *                         if head < child:
 *                             if (RIGHT, label) not in seen_actions:
 */
        }

        /* "spacy\syntax\arc_eager.pyx":334
 *         for raw_text, sents in kwargs.get('gold_parses', []):
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):             # <<<<<<<<<<<<<<
 *                     if label.upper() == 'ROOT':
 *                         label = 'ROOT'
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "spacy\syntax\arc_eager.pyx":333
 * 
 *         for raw_text, sents in kwargs.get('gold_parses', []):
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:             # <<<<<<<<<<<<<<
 *                 for child, head, label in zip(ids, heads, labels):
 *                     if label.upper() == 'ROOT':
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy\syntax\arc_eager.pyx":332
 *                     actions[RIGHT].append(label)
 * 
 *         for raw_text, sents in kwargs.get('gold_parses', []):             # <<<<<<<<<<<<<<
 *             for (ids, words, tags, heads, labels, iob), ctnts in sents:
 *                 for child, head, label in zip(ids, heads, labels):
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy\syntax\arc_eager.pyx":344
 *                             if (LEFT, label) not in seen_actions:
 *                                 actions[LEFT].append(label)
 *         return actions             # <<<<<<<<<<<<<<
 * 
 *     property action_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_actions);
  __pyx_r = __pyx_v_actions;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":314
 * 
 *     @classmethod
 *     def get_actions(cls, **kwargs):             # <<<<<<<<<<<<<<
 *         actions = kwargs.get('actions',
 *                     {
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.get_actions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_actions);
  __Pyx_XDECREF(__pyx_v_seen_actions);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_raw_text);
  __Pyx_XDECREF(__pyx_v_sents);
  __Pyx_XDECREF(__pyx_v_ids);
  __Pyx_XDECREF(__pyx_v_words);
  __Pyx_XDECREF(__pyx_v_tags);
  __Pyx_XDECREF(__pyx_v_heads);
  __Pyx_XDECREF(__pyx_v_labels);
  __Pyx_XDECREF(__pyx_v_iob);
  __Pyx_XDECREF(__pyx_v_ctnts);
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_head);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":347
 * 
 *     property action_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (SHIFT, REDUCE, LEFT, RIGHT, BREAK)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_12action_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_12action_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_12action_types___get__(((struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_12action_types___get__(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 347, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":348
 *     property action_types:
 *         def __get__(self):
 *             return (SHIFT, REDUCE, LEFT, RIGHT, BREAK)             # <<<<<<<<<<<<<<
 * 
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_SHIFT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_REDUCE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_LEFT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_RIGHT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_e_5spacy_6syntax_9arc_eager_BREAK); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":347
 * 
 *     property action_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (SHIFT, REDUCE, LEFT, RIGHT, BREAK)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.action_types.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":350
 *             return (SHIFT, REDUCE, LEFT, RIGHT, BREAK)
 * 
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:             # <<<<<<<<<<<<<<
 *         for i in range(gold.length):
 *             if gold.heads[i] is None: # Missing values
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_preprocess_gold(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, struct __pyx_obj_5spacy_4gold_GoldParse *__pyx_v_gold) {
  int __pyx_v_i;
  PyObject *__pyx_v_label = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preprocess_gold", 0);
  __Pyx_TraceCall("preprocess_gold", __pyx_f[0], 350, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":351
 * 
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:
 *         for i in range(gold.length):             # <<<<<<<<<<<<<<
 *             if gold.heads[i] is None: # Missing values
 *                 gold.c.heads[i] = i
 */
  __pyx_t_1 = __pyx_v_gold->length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":352
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:
 *         for i in range(gold.length):
 *             if gold.heads[i] is None: # Missing values             # <<<<<<<<<<<<<<
 *                 gold.c.heads[i] = i
 *                 gold.c.labels[i] = -1
 */
    if (unlikely(__pyx_v_gold->heads == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_gold->heads, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__pyx_t_3 == Py_None);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "spacy\syntax\arc_eager.pyx":353
 *         for i in range(gold.length):
 *             if gold.heads[i] is None: # Missing values
 *                 gold.c.heads[i] = i             # <<<<<<<<<<<<<<
 *                 gold.c.labels[i] = -1
 *             else:
 */
      (__pyx_v_gold->c.heads[__pyx_v_i]) = __pyx_v_i;

      /* "spacy\syntax\arc_eager.pyx":354
 *             if gold.heads[i] is None: # Missing values
 *                 gold.c.heads[i] = i
 *                 gold.c.labels[i] = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 label = gold.labels[i]
 */
      (__pyx_v_gold->c.labels[__pyx_v_i]) = -1;

      /* "spacy\syntax\arc_eager.pyx":352
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:
 *         for i in range(gold.length):
 *             if gold.heads[i] is None: # Missing values             # <<<<<<<<<<<<<<
 *                 gold.c.heads[i] = i
 *                 gold.c.labels[i] = -1
 */
      goto __pyx_L5;
    }

    /* "spacy\syntax\arc_eager.pyx":356
 *                 gold.c.labels[i] = -1
 *             else:
 *                 label = gold.labels[i]             # <<<<<<<<<<<<<<
 *                 if label.upper() == 'ROOT':
 *                     label = 'ROOT'
 */
    /*else*/ {
      if (unlikely(__pyx_v_gold->labels == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_gold->labels, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_label, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "spacy\syntax\arc_eager.pyx":357
 *             else:
 *                 label = gold.labels[i]
 *                 if label.upper() == 'ROOT':             # <<<<<<<<<<<<<<
 *                     label = 'ROOT'
 *                 gold.c.heads[i] = gold.heads[i]
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_label, __pyx_n_s_upper); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_ROOT, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "spacy\syntax\arc_eager.pyx":358
 *                 label = gold.labels[i]
 *                 if label.upper() == 'ROOT':
 *                     label = 'ROOT'             # <<<<<<<<<<<<<<
 *                 gold.c.heads[i] = gold.heads[i]
 *                 gold.c.labels[i] = self.strings[label]
 */
        __Pyx_INCREF(__pyx_n_u_ROOT);
        __Pyx_DECREF_SET(__pyx_v_label, __pyx_n_u_ROOT);

        /* "spacy\syntax\arc_eager.pyx":357
 *             else:
 *                 label = gold.labels[i]
 *                 if label.upper() == 'ROOT':             # <<<<<<<<<<<<<<
 *                     label = 'ROOT'
 *                 gold.c.heads[i] = gold.heads[i]
 */
      }

      /* "spacy\syntax\arc_eager.pyx":359
 *                 if label.upper() == 'ROOT':
 *                     label = 'ROOT'
 *                 gold.c.heads[i] = gold.heads[i]             # <<<<<<<<<<<<<<
 *                 gold.c.labels[i] = self.strings[label]
 *                 # Count frequencies, for use in encoder
 */
      if (unlikely(__pyx_v_gold->heads == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_gold->heads, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_gold->c.heads[__pyx_v_i]) = __pyx_t_8;

      /* "spacy\syntax\arc_eager.pyx":360
 *                     label = 'ROOT'
 *                 gold.c.heads[i] = gold.heads[i]
 *                 gold.c.labels[i] = self.strings[label]             # <<<<<<<<<<<<<<
 *                 # Count frequencies, for use in encoder
 *                 self.freqs[HEAD][gold.c.heads[i] - i] += 1
 */
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.strings), __pyx_v_label); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_gold->c.labels[__pyx_v_i]) = __pyx_t_8;

      /* "spacy\syntax\arc_eager.pyx":362
 *                 gold.c.labels[i] = self.strings[label]
 *                 # Count frequencies, for use in encoder
 *                 self.freqs[HEAD][gold.c.heads[i] - i] += 1             # <<<<<<<<<<<<<<
 *                 self.freqs[DEP][gold.c.labels[i]] += 1
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_HEAD); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyObject_GetItem(__pyx_v_self->__pyx_base.freqs, __pyx_t_3); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = ((__pyx_v_gold->c.heads[__pyx_v_i]) - __pyx_v_i);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_t_6, __pyx_t_8, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "spacy\syntax\arc_eager.pyx":363
 *                 # Count frequencies, for use in encoder
 *                 self.freqs[HEAD][gold.c.heads[i] - i] += 1
 *                 self.freqs[DEP][gold.c.labels[i]] += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef Transition lookup_transition(self, object name) except *:
 */
      __pyx_t_6 = __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(__pyx_e_5spacy_5attrs_DEP); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyObject_GetItem(__pyx_v_self->__pyx_base.freqs, __pyx_t_6); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__pyx_v_gold->c.labels[__pyx_v_i]);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_t_7, __pyx_t_8, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L5:;
  }

  /* "spacy\syntax\arc_eager.pyx":350
 *             return (SHIFT, REDUCE, LEFT, RIGHT, BREAK)
 * 
 *     cdef int preprocess_gold(self, GoldParse gold) except -1:             # <<<<<<<<<<<<<<
 *         for i in range(gold.length):
 *             if gold.heads[i] is None: # Missing values
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.preprocess_gold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":365
 *                 self.freqs[DEP][gold.c.labels[i]] += 1
 * 
 *     cdef Transition lookup_transition(self, object name) except *:             # <<<<<<<<<<<<<<
 *         if '-' in name:
 *             move_str, label_str = name.split('-', 1)
 */

static struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_lookup_transition(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_move_str = NULL;
  PyObject *__pyx_v_label_str = NULL;
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_v_move = NULL;
  int __pyx_v_i;
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lookup_transition", 0);
  __Pyx_TraceCall("lookup_transition", __pyx_f[0], 365, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":366
 * 
 *     cdef Transition lookup_transition(self, object name) except *:
 *         if '-' in name:             # <<<<<<<<<<<<<<
 *             move_str, label_str = name.split('-', 1)
 *             label = self.strings[label_str]
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u__2, __pyx_v_name, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "spacy\syntax\arc_eager.pyx":367
 *     cdef Transition lookup_transition(self, object name) except *:
 *         if '-' in name:
 *             move_str, label_str = name.split('-', 1)             # <<<<<<<<<<<<<<
 *             label = self.strings[label_str]
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_move_str = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_label_str = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "spacy\syntax\arc_eager.pyx":368
 *         if '-' in name:
 *             move_str, label_str = name.split('-', 1)
 *             label = self.strings[label_str]             # <<<<<<<<<<<<<<
 *         else:
 *             move_str = name
 */
    __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.strings), __pyx_v_label_str); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_label = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "spacy\syntax\arc_eager.pyx":366
 * 
 *     cdef Transition lookup_transition(self, object name) except *:
 *         if '-' in name:             # <<<<<<<<<<<<<<
 *             move_str, label_str = name.split('-', 1)
 *             label = self.strings[label_str]
 */
    goto __pyx_L3;
  }

  /* "spacy\syntax\arc_eager.pyx":370
 *             label = self.strings[label_str]
 *         else:
 *             move_str = name             # <<<<<<<<<<<<<<
 *             label = 0
 *         move = MOVE_NAMES.index(move_str)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_name);
    __pyx_v_move_str = __pyx_v_name;

    /* "spacy\syntax\arc_eager.pyx":371
 *         else:
 *             move_str = name
 *             label = 0             # <<<<<<<<<<<<<<
 *         move = MOVE_NAMES.index(move_str)
 *         for i in range(self.n_moves):
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_label = __pyx_int_0;
  }
  __pyx_L3:;

  /* "spacy\syntax\arc_eager.pyx":372
 *             move_str = name
 *             label = 0
 *         move = MOVE_NAMES.index(move_str)             # <<<<<<<<<<<<<<
 *         for i in range(self.n_moves):
 *             if self.c[i].move == move and self.c[i].label == label:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_move_str); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_move_str);
    __Pyx_GIVEREF(__pyx_v_move_str);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_move_str);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_move = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":373
 *             label = 0
 *         move = MOVE_NAMES.index(move_str)
 *         for i in range(self.n_moves):             # <<<<<<<<<<<<<<
 *             if self.c[i].move == move and self.c[i].label == label:
 *                 return self.c[i]
 */
  __pyx_t_8 = __pyx_v_self->__pyx_base.n_moves;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "spacy\syntax\arc_eager.pyx":374
 *         move = MOVE_NAMES.index(move_str)
 *         for i in range(self.n_moves):
 *             if self.c[i].move == move and self.c[i].label == label:             # <<<<<<<<<<<<<<
 *                 return self.c[i]
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.c[__pyx_v_i]).move); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_v_move, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.c[__pyx_v_i]).label); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_label, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "spacy\syntax\arc_eager.pyx":375
 *         for i in range(self.n_moves):
 *             if self.c[i].move == move and self.c[i].label == label:
 *                 return self.c[i]             # <<<<<<<<<<<<<<
 * 
 *     def move_name(self, int move, int label):
 */
      __pyx_r = (__pyx_v_self->__pyx_base.c[__pyx_v_i]);
      goto __pyx_L0;

      /* "spacy\syntax\arc_eager.pyx":374
 *         move = MOVE_NAMES.index(move_str)
 *         for i in range(self.n_moves):
 *             if self.c[i].move == move and self.c[i].label == label:             # <<<<<<<<<<<<<<
 *                 return self.c[i]
 * 
 */
    }
  }

  /* "spacy\syntax\arc_eager.pyx":365
 *                 self.freqs[DEP][gold.c.labels[i]] += 1
 * 
 *     cdef Transition lookup_transition(self, object name) except *:             # <<<<<<<<<<<<<<
 *         if '-' in name:
 *             move_str, label_str = name.split('-', 1)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.lookup_transition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_move_str);
  __Pyx_XDECREF(__pyx_v_label_str);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_move);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":377
 *                 return self.c[i]
 * 
 *     def move_name(self, int move, int label):             # <<<<<<<<<<<<<<
 *         label_str = self.strings[label]
 *         if label_str:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_5move_name(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_5move_name(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_move;
  int __pyx_v_label;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move_name (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_move,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_move)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("move_name", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "move_name") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_move = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_move == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_label = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_label == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("move_name", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.move_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_4move_name(((struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *)__pyx_v_self), __pyx_v_move, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_4move_name(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int __pyx_v_move, int __pyx_v_label) {
  PyObject *__pyx_v_label_str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_name", 0);
  __Pyx_TraceCall("move_name", __pyx_f[0], 377, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":378
 * 
 *     def move_name(self, int move, int label):
 *         label_str = self.strings[label]             # <<<<<<<<<<<<<<
 *         if label_str:
 *             return MOVE_NAMES[move] + '-' + label_str
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->__pyx_base.strings), __pyx_v_label, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_label_str = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy\syntax\arc_eager.pyx":379
 *     def move_name(self, int move, int label):
 *         label_str = self.strings[label]
 *         if label_str:             # <<<<<<<<<<<<<<
 *             return MOVE_NAMES[move] + '-' + label_str
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_label_str); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "spacy\syntax\arc_eager.pyx":380
 *         label_str = self.strings[label]
 *         if label_str:
 *             return MOVE_NAMES[move] + '-' + label_str             # <<<<<<<<<<<<<<
 *         else:
 *             return MOVE_NAMES[move]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_move, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_u__2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_label_str); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "spacy\syntax\arc_eager.pyx":379
 *     def move_name(self, int move, int label):
 *         label_str = self.strings[label]
 *         if label_str:             # <<<<<<<<<<<<<<
 *             return MOVE_NAMES[move] + '-' + label_str
 *         else:
 */
  }

  /* "spacy\syntax\arc_eager.pyx":382
 *             return MOVE_NAMES[move] + '-' + label_str
 *         else:
 *             return MOVE_NAMES[move]             # <<<<<<<<<<<<<<
 * 
 *     cdef Transition init_transition(self, int clas, int move, int label) except *:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_move, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "spacy\syntax\arc_eager.pyx":377
 *                 return self.c[i]
 * 
 *     def move_name(self, int move, int label):             # <<<<<<<<<<<<<<
 *         label_str = self.strings[label]
 *         if label_str:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.move_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_label_str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":384
 *             return MOVE_NAMES[move]
 * 
 *     cdef Transition init_transition(self, int clas, int move, int label) except *:             # <<<<<<<<<<<<<<
 *         # TODO: Apparent Cython bug here when we try to use the Transition()
 *         # constructor with the function pointers
 */

static struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_init_transition(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int __pyx_v_clas, int __pyx_v_move, int __pyx_v_label) {
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_v_t;
  struct __pyx_t_5spacy_6syntax_17transition_system_Transition __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_transition", 0);
  __Pyx_TraceCall("init_transition", __pyx_f[0], 384, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":388
 *         # constructor with the function pointers
 *         cdef Transition t
 *         t.score = 0             # <<<<<<<<<<<<<<
 *         t.clas = clas
 *         t.move = move
 */
  __pyx_v_t.score = 0.0;

  /* "spacy\syntax\arc_eager.pyx":389
 *         cdef Transition t
 *         t.score = 0
 *         t.clas = clas             # <<<<<<<<<<<<<<
 *         t.move = move
 *         t.label = label
 */
  __pyx_v_t.clas = __pyx_v_clas;

  /* "spacy\syntax\arc_eager.pyx":390
 *         t.score = 0
 *         t.clas = clas
 *         t.move = move             # <<<<<<<<<<<<<<
 *         t.label = label
 *         if move == SHIFT:
 */
  __pyx_v_t.move = __pyx_v_move;

  /* "spacy\syntax\arc_eager.pyx":391
 *         t.clas = clas
 *         t.move = move
 *         t.label = label             # <<<<<<<<<<<<<<
 *         if move == SHIFT:
 *             t.is_valid = Shift.is_valid
 */
  __pyx_v_t.label = __pyx_v_label;

  /* "spacy\syntax\arc_eager.pyx":392
 *         t.move = move
 *         t.label = label
 *         if move == SHIFT:             # <<<<<<<<<<<<<<
 *             t.is_valid = Shift.is_valid
 *             t.do = Shift.transition
 */
  switch (__pyx_v_move) {
    case __pyx_e_5spacy_6syntax_9arc_eager_SHIFT:

    /* "spacy\syntax\arc_eager.pyx":393
 *         t.label = label
 *         if move == SHIFT:
 *             t.is_valid = Shift.is_valid             # <<<<<<<<<<<<<<
 *             t.do = Shift.transition
 *             t.get_cost = Shift.cost
 */
    __pyx_v_t.is_valid = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_is_valid;

    /* "spacy\syntax\arc_eager.pyx":394
 *         if move == SHIFT:
 *             t.is_valid = Shift.is_valid
 *             t.do = Shift.transition             # <<<<<<<<<<<<<<
 *             t.get_cost = Shift.cost
 *         elif move == REDUCE:
 */
    __pyx_v_t.__pyx_do = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_transition;

    /* "spacy\syntax\arc_eager.pyx":395
 *             t.is_valid = Shift.is_valid
 *             t.do = Shift.transition
 *             t.get_cost = Shift.cost             # <<<<<<<<<<<<<<
 *         elif move == REDUCE:
 *             t.is_valid = Reduce.is_valid
 */
    __pyx_v_t.get_cost = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_cost;

    /* "spacy\syntax\arc_eager.pyx":392
 *         t.move = move
 *         t.label = label
 *         if move == SHIFT:             # <<<<<<<<<<<<<<
 *             t.is_valid = Shift.is_valid
 *             t.do = Shift.transition
 */
    break;

    /* "spacy\syntax\arc_eager.pyx":396
 *             t.do = Shift.transition
 *             t.get_cost = Shift.cost
 *         elif move == REDUCE:             # <<<<<<<<<<<<<<
 *             t.is_valid = Reduce.is_valid
 *             t.do = Reduce.transition
 */
    case __pyx_e_5spacy_6syntax_9arc_eager_REDUCE:

    /* "spacy\syntax\arc_eager.pyx":397
 *             t.get_cost = Shift.cost
 *         elif move == REDUCE:
 *             t.is_valid = Reduce.is_valid             # <<<<<<<<<<<<<<
 *             t.do = Reduce.transition
 *             t.get_cost = Reduce.cost
 */
    __pyx_v_t.is_valid = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_is_valid;

    /* "spacy\syntax\arc_eager.pyx":398
 *         elif move == REDUCE:
 *             t.is_valid = Reduce.is_valid
 *             t.do = Reduce.transition             # <<<<<<<<<<<<<<
 *             t.get_cost = Reduce.cost
 *         elif move == LEFT:
 */
    __pyx_v_t.__pyx_do = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_transition;

    /* "spacy\syntax\arc_eager.pyx":399
 *             t.is_valid = Reduce.is_valid
 *             t.do = Reduce.transition
 *             t.get_cost = Reduce.cost             # <<<<<<<<<<<<<<
 *         elif move == LEFT:
 *             t.is_valid = LeftArc.is_valid
 */
    __pyx_v_t.get_cost = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_cost;

    /* "spacy\syntax\arc_eager.pyx":396
 *             t.do = Shift.transition
 *             t.get_cost = Shift.cost
 *         elif move == REDUCE:             # <<<<<<<<<<<<<<
 *             t.is_valid = Reduce.is_valid
 *             t.do = Reduce.transition
 */
    break;

    /* "spacy\syntax\arc_eager.pyx":400
 *             t.do = Reduce.transition
 *             t.get_cost = Reduce.cost
 *         elif move == LEFT:             # <<<<<<<<<<<<<<
 *             t.is_valid = LeftArc.is_valid
 *             t.do = LeftArc.transition
 */
    case __pyx_e_5spacy_6syntax_9arc_eager_LEFT:

    /* "spacy\syntax\arc_eager.pyx":401
 *             t.get_cost = Reduce.cost
 *         elif move == LEFT:
 *             t.is_valid = LeftArc.is_valid             # <<<<<<<<<<<<<<
 *             t.do = LeftArc.transition
 *             t.get_cost = LeftArc.cost
 */
    __pyx_v_t.is_valid = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_is_valid;

    /* "spacy\syntax\arc_eager.pyx":402
 *         elif move == LEFT:
 *             t.is_valid = LeftArc.is_valid
 *             t.do = LeftArc.transition             # <<<<<<<<<<<<<<
 *             t.get_cost = LeftArc.cost
 *         elif move == RIGHT:
 */
    __pyx_v_t.__pyx_do = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_transition;

    /* "spacy\syntax\arc_eager.pyx":403
 *             t.is_valid = LeftArc.is_valid
 *             t.do = LeftArc.transition
 *             t.get_cost = LeftArc.cost             # <<<<<<<<<<<<<<
 *         elif move == RIGHT:
 *             t.is_valid = RightArc.is_valid
 */
    __pyx_v_t.get_cost = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_cost;

    /* "spacy\syntax\arc_eager.pyx":400
 *             t.do = Reduce.transition
 *             t.get_cost = Reduce.cost
 *         elif move == LEFT:             # <<<<<<<<<<<<<<
 *             t.is_valid = LeftArc.is_valid
 *             t.do = LeftArc.transition
 */
    break;

    /* "spacy\syntax\arc_eager.pyx":404
 *             t.do = LeftArc.transition
 *             t.get_cost = LeftArc.cost
 *         elif move == RIGHT:             # <<<<<<<<<<<<<<
 *             t.is_valid = RightArc.is_valid
 *             t.do = RightArc.transition
 */
    case __pyx_e_5spacy_6syntax_9arc_eager_RIGHT:

    /* "spacy\syntax\arc_eager.pyx":405
 *             t.get_cost = LeftArc.cost
 *         elif move == RIGHT:
 *             t.is_valid = RightArc.is_valid             # <<<<<<<<<<<<<<
 *             t.do = RightArc.transition
 *             t.get_cost = RightArc.cost
 */
    __pyx_v_t.is_valid = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_is_valid;

    /* "spacy\syntax\arc_eager.pyx":406
 *         elif move == RIGHT:
 *             t.is_valid = RightArc.is_valid
 *             t.do = RightArc.transition             # <<<<<<<<<<<<<<
 *             t.get_cost = RightArc.cost
 *         elif move == BREAK:
 */
    __pyx_v_t.__pyx_do = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_transition;

    /* "spacy\syntax\arc_eager.pyx":407
 *             t.is_valid = RightArc.is_valid
 *             t.do = RightArc.transition
 *             t.get_cost = RightArc.cost             # <<<<<<<<<<<<<<
 *         elif move == BREAK:
 *             t.is_valid = Break.is_valid
 */
    __pyx_v_t.get_cost = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_cost;

    /* "spacy\syntax\arc_eager.pyx":404
 *             t.do = LeftArc.transition
 *             t.get_cost = LeftArc.cost
 *         elif move == RIGHT:             # <<<<<<<<<<<<<<
 *             t.is_valid = RightArc.is_valid
 *             t.do = RightArc.transition
 */
    break;

    /* "spacy\syntax\arc_eager.pyx":408
 *             t.do = RightArc.transition
 *             t.get_cost = RightArc.cost
 *         elif move == BREAK:             # <<<<<<<<<<<<<<
 *             t.is_valid = Break.is_valid
 *             t.do = Break.transition
 */
    case __pyx_e_5spacy_6syntax_9arc_eager_BREAK:

    /* "spacy\syntax\arc_eager.pyx":409
 *             t.get_cost = RightArc.cost
 *         elif move == BREAK:
 *             t.is_valid = Break.is_valid             # <<<<<<<<<<<<<<
 *             t.do = Break.transition
 *             t.get_cost = Break.cost
 */
    __pyx_v_t.is_valid = __pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid;

    /* "spacy\syntax\arc_eager.pyx":410
 *         elif move == BREAK:
 *             t.is_valid = Break.is_valid
 *             t.do = Break.transition             # <<<<<<<<<<<<<<
 *             t.get_cost = Break.cost
 *         else:
 */
    __pyx_v_t.__pyx_do = __pyx_f_5spacy_6syntax_9arc_eager_5Break_transition;

    /* "spacy\syntax\arc_eager.pyx":411
 *             t.is_valid = Break.is_valid
 *             t.do = Break.transition
 *             t.get_cost = Break.cost             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception(move)
 */
    __pyx_v_t.get_cost = __pyx_f_5spacy_6syntax_9arc_eager_5Break_cost;

    /* "spacy\syntax\arc_eager.pyx":408
 *             t.do = RightArc.transition
 *             t.get_cost = RightArc.cost
 *         elif move == BREAK:             # <<<<<<<<<<<<<<
 *             t.is_valid = Break.is_valid
 *             t.do = Break.transition
 */
    break;
    default:

    /* "spacy\syntax\arc_eager.pyx":413
 *             t.get_cost = Break.cost
 *         else:
 *             raise Exception(move)             # <<<<<<<<<<<<<<
 *         return t
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_move); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
  }

  /* "spacy\syntax\arc_eager.pyx":414
 *         else:
 *             raise Exception(move)
 *         return t             # <<<<<<<<<<<<<<
 * 
 *     cdef int initialize_state(self, StateC* st) nogil:
 */
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "spacy\syntax\arc_eager.pyx":384
 *             return MOVE_NAMES[move]
 * 
 *     cdef Transition init_transition(self, int clas, int move, int label) except *:             # <<<<<<<<<<<<<<
 *         # TODO: Apparent Cython bug here when we try to use the Transition()
 *         # constructor with the function pointers
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.init_transition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":416
 *         return t
 * 
 *     cdef int initialize_state(self, StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         # Ensure sent_start is set to 0 throughout
 *         for i in range(st.length):
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_initialize_state(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, __pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("initialize_state", __pyx_f[0], 416, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":418
 *     cdef int initialize_state(self, StateC* st) nogil:
 *         # Ensure sent_start is set to 0 throughout
 *         for i in range(st.length):             # <<<<<<<<<<<<<<
 *             st._sent[i].sent_start = False
 *             st._sent[i].l_edge = i
 */
  __pyx_t_1 = __pyx_v_st->length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":419
 *         # Ensure sent_start is set to 0 throughout
 *         for i in range(st.length):
 *             st._sent[i].sent_start = False             # <<<<<<<<<<<<<<
 *             st._sent[i].l_edge = i
 *             st._sent[i].r_edge = i
 */
    (__pyx_v_st->_sent[__pyx_v_i]).sent_start = 0;

    /* "spacy\syntax\arc_eager.pyx":420
 *         for i in range(st.length):
 *             st._sent[i].sent_start = False
 *             st._sent[i].l_edge = i             # <<<<<<<<<<<<<<
 *             st._sent[i].r_edge = i
 *         st.fast_forward()
 */
    (__pyx_v_st->_sent[__pyx_v_i]).l_edge = __pyx_v_i;

    /* "spacy\syntax\arc_eager.pyx":421
 *             st._sent[i].sent_start = False
 *             st._sent[i].l_edge = i
 *             st._sent[i].r_edge = i             # <<<<<<<<<<<<<<
 *         st.fast_forward()
 * 
 */
    (__pyx_v_st->_sent[__pyx_v_i]).r_edge = __pyx_v_i;
  }

  /* "spacy\syntax\arc_eager.pyx":422
 *             st._sent[i].l_edge = i
 *             st._sent[i].r_edge = i
 *         st.fast_forward()             # <<<<<<<<<<<<<<
 * 
 *     cdef int finalize_state(self, StateC* st) nogil:
 */
  __pyx_v_st->fast_forward();

  /* "spacy\syntax\arc_eager.pyx":416
 *         return t
 * 
 *     cdef int initialize_state(self, StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         # Ensure sent_start is set to 0 throughout
 *         for i in range(st.length):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.ArcEager.initialize_state", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":424
 *         st.fast_forward()
 * 
 *     cdef int finalize_state(self, StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(st.length):
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_finalize_state(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, __pyx_t_5spacy_6syntax_6_state_StateC *__pyx_v_st) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("finalize_state", __pyx_f[0], 424, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":426
 *     cdef int finalize_state(self, StateC* st) nogil:
 *         cdef int i
 *         for i in range(st.length):             # <<<<<<<<<<<<<<
 *             if st._sent[i].head == 0 and st._sent[i].dep == 0:
 *                 st._sent[i].dep = self.root_label
 */
  __pyx_t_1 = __pyx_v_st->length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":427
 *         cdef int i
 *         for i in range(st.length):
 *             if st._sent[i].head == 0 and st._sent[i].dep == 0:             # <<<<<<<<<<<<<<
 *                 st._sent[i].dep = self.root_label
 * 
 */
    __pyx_t_4 = (((__pyx_v_st->_sent[__pyx_v_i]).head == 0) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = (((__pyx_v_st->_sent[__pyx_v_i]).dep == 0) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "spacy\syntax\arc_eager.pyx":428
 *         for i in range(st.length):
 *             if st._sent[i].head == 0 and st._sent[i].dep == 0:
 *                 st._sent[i].dep = self.root_label             # <<<<<<<<<<<<<<
 * 
 *     def finalize_doc(self, doc):
 */
      __pyx_t_5 = __pyx_v_self->__pyx_base.root_label;
      (__pyx_v_st->_sent[__pyx_v_i]).dep = __pyx_t_5;

      /* "spacy\syntax\arc_eager.pyx":427
 *         cdef int i
 *         for i in range(st.length):
 *             if st._sent[i].head == 0 and st._sent[i].dep == 0:             # <<<<<<<<<<<<<<
 *                 st._sent[i].dep = self.root_label
 * 
 */
    }
  }

  /* "spacy\syntax\arc_eager.pyx":424
 *         st.fast_forward()
 * 
 *     cdef int finalize_state(self, StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(st.length):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.ArcEager.finalize_state", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":430
 *                 st._sent[i].dep = self.root_label
 * 
 *     def finalize_doc(self, doc):             # <<<<<<<<<<<<<<
 *         doc.is_parsed = True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_7finalize_doc(PyObject *__pyx_v_self, PyObject *__pyx_v_doc); /*proto*/
static PyObject *__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_7finalize_doc(PyObject *__pyx_v_self, PyObject *__pyx_v_doc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize_doc (wrapper)", 0);
  __pyx_r = __pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_6finalize_doc(((struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *)__pyx_v_self), ((PyObject *)__pyx_v_doc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_6syntax_9arc_eager_8ArcEager_6finalize_doc(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, PyObject *__pyx_v_doc) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finalize_doc", 0);
  __Pyx_TraceCall("finalize_doc", __pyx_f[0], 430, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":431
 * 
 *     def finalize_doc(self, doc):
 *         doc.is_parsed = True             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_valid(self, int* output, const StateC* st) nogil:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_doc, __pyx_n_s_is_parsed, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "spacy\syntax\arc_eager.pyx":430
 *                 st._sent[i].dep = self.root_label
 * 
 *     def finalize_doc(self, doc):             # <<<<<<<<<<<<<<
 *         doc.is_parsed = True
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.finalize_doc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":433
 *         doc.is_parsed = True
 * 
 *     cdef int set_valid(self, int* output, const StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         cdef bint[N_MOVES] is_valid
 *         is_valid[SHIFT] = Shift.is_valid(st, -1)
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_valid(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int *__pyx_v_output, __pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_st) {
  int __pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES];
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_valid", __pyx_f[0], 433, 1, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":435
 *     cdef int set_valid(self, int* output, const StateC* st) nogil:
 *         cdef bint[N_MOVES] is_valid
 *         is_valid[SHIFT] = Shift.is_valid(st, -1)             # <<<<<<<<<<<<<<
 *         is_valid[REDUCE] = Reduce.is_valid(st, -1)
 *         is_valid[LEFT] = LeftArc.is_valid(st, -1)
 */
  (__pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_SHIFT]) = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_is_valid(__pyx_v_st, -1);

  /* "spacy\syntax\arc_eager.pyx":436
 *         cdef bint[N_MOVES] is_valid
 *         is_valid[SHIFT] = Shift.is_valid(st, -1)
 *         is_valid[REDUCE] = Reduce.is_valid(st, -1)             # <<<<<<<<<<<<<<
 *         is_valid[LEFT] = LeftArc.is_valid(st, -1)
 *         is_valid[RIGHT] = RightArc.is_valid(st, -1)
 */
  (__pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_REDUCE]) = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_is_valid(__pyx_v_st, -1);

  /* "spacy\syntax\arc_eager.pyx":437
 *         is_valid[SHIFT] = Shift.is_valid(st, -1)
 *         is_valid[REDUCE] = Reduce.is_valid(st, -1)
 *         is_valid[LEFT] = LeftArc.is_valid(st, -1)             # <<<<<<<<<<<<<<
 *         is_valid[RIGHT] = RightArc.is_valid(st, -1)
 *         is_valid[BREAK] = Break.is_valid(st, -1)
 */
  (__pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_LEFT]) = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_is_valid(__pyx_v_st, -1);

  /* "spacy\syntax\arc_eager.pyx":438
 *         is_valid[REDUCE] = Reduce.is_valid(st, -1)
 *         is_valid[LEFT] = LeftArc.is_valid(st, -1)
 *         is_valid[RIGHT] = RightArc.is_valid(st, -1)             # <<<<<<<<<<<<<<
 *         is_valid[BREAK] = Break.is_valid(st, -1)
 *         cdef int i
 */
  (__pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_RIGHT]) = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_is_valid(__pyx_v_st, -1);

  /* "spacy\syntax\arc_eager.pyx":439
 *         is_valid[LEFT] = LeftArc.is_valid(st, -1)
 *         is_valid[RIGHT] = RightArc.is_valid(st, -1)
 *         is_valid[BREAK] = Break.is_valid(st, -1)             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self.n_moves):
 */
  (__pyx_v_is_valid[__pyx_e_5spacy_6syntax_9arc_eager_BREAK]) = __pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid(__pyx_v_st, -1);

  /* "spacy\syntax\arc_eager.pyx":441
 *         is_valid[BREAK] = Break.is_valid(st, -1)
 *         cdef int i
 *         for i in range(self.n_moves):             # <<<<<<<<<<<<<<
 *             output[i] = is_valid[self.c[i].move]
 * 
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.n_moves;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":442
 *         cdef int i
 *         for i in range(self.n_moves):
 *             output[i] = is_valid[self.c[i].move]             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_costs(self, int* is_valid, weight_t* costs,
 */
    (__pyx_v_output[__pyx_v_i]) = (__pyx_v_is_valid[(__pyx_v_self->__pyx_base.c[__pyx_v_i]).move]);
  }

  /* "spacy\syntax\arc_eager.pyx":433
 *         doc.is_parsed = True
 * 
 *     cdef int set_valid(self, int* output, const StateC* st) nogil:             # <<<<<<<<<<<<<<
 *         cdef bint[N_MOVES] is_valid
 *         is_valid[SHIFT] = Shift.is_valid(st, -1)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.arc_eager.ArcEager.set_valid", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "spacy\syntax\arc_eager.pyx":444
 *             output[i] = is_valid[self.c[i].move]
 * 
 *     cdef int set_costs(self, int* is_valid, weight_t* costs,             # <<<<<<<<<<<<<<
 *                        StateClass stcls, GoldParse gold) except -1:
 *         cdef int i, move, label
 */

static int __pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_costs(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *__pyx_v_self, int *__pyx_v_is_valid, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_costs, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_stcls, struct __pyx_obj_5spacy_4gold_GoldParse *__pyx_v_gold) {
  int __pyx_v_i;
  int __pyx_v_move;
  int __pyx_v_label;
  __pyx_t_5spacy_6syntax_17transition_system_label_cost_func_t __pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES];
  __pyx_t_5spacy_6syntax_17transition_system_move_cost_func_t __pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES];
  __pyx_t_5thinc_8typedefs_weight_t __pyx_v_move_costs[__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES];
  CYTHON_UNUSED int *__pyx_v_labels;
  CYTHON_UNUSED int *__pyx_v_heads;
  PyObject *__pyx_v_n_gold = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_costs", 0);
  __Pyx_TraceCall("set_costs", __pyx_f[0], 444, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":450
 *         cdef move_cost_func_t[N_MOVES] move_cost_funcs
 *         cdef weight_t[N_MOVES] move_costs
 *         for i in range(N_MOVES):             # <<<<<<<<<<<<<<
 *             move_costs[i] = 9000
 *         move_cost_funcs[SHIFT] = Shift.move_cost
 */
  __pyx_t_1 = __pyx_e_5spacy_6syntax_9arc_eager_N_MOVES;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "spacy\syntax\arc_eager.pyx":451
 *         cdef weight_t[N_MOVES] move_costs
 *         for i in range(N_MOVES):
 *             move_costs[i] = 9000             # <<<<<<<<<<<<<<
 *         move_cost_funcs[SHIFT] = Shift.move_cost
 *         move_cost_funcs[REDUCE] = Reduce.move_cost
 */
    (__pyx_v_move_costs[__pyx_v_i]) = 9000.0;
  }

  /* "spacy\syntax\arc_eager.pyx":452
 *         for i in range(N_MOVES):
 *             move_costs[i] = 9000
 *         move_cost_funcs[SHIFT] = Shift.move_cost             # <<<<<<<<<<<<<<
 *         move_cost_funcs[REDUCE] = Reduce.move_cost
 *         move_cost_funcs[LEFT] = LeftArc.move_cost
 */
  (__pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_SHIFT]) = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost;

  /* "spacy\syntax\arc_eager.pyx":453
 *             move_costs[i] = 9000
 *         move_cost_funcs[SHIFT] = Shift.move_cost
 *         move_cost_funcs[REDUCE] = Reduce.move_cost             # <<<<<<<<<<<<<<
 *         move_cost_funcs[LEFT] = LeftArc.move_cost
 *         move_cost_funcs[RIGHT] = RightArc.move_cost
 */
  (__pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_REDUCE]) = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost;

  /* "spacy\syntax\arc_eager.pyx":454
 *         move_cost_funcs[SHIFT] = Shift.move_cost
 *         move_cost_funcs[REDUCE] = Reduce.move_cost
 *         move_cost_funcs[LEFT] = LeftArc.move_cost             # <<<<<<<<<<<<<<
 *         move_cost_funcs[RIGHT] = RightArc.move_cost
 *         move_cost_funcs[BREAK] = Break.move_cost
 */
  (__pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_LEFT]) = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost;

  /* "spacy\syntax\arc_eager.pyx":455
 *         move_cost_funcs[REDUCE] = Reduce.move_cost
 *         move_cost_funcs[LEFT] = LeftArc.move_cost
 *         move_cost_funcs[RIGHT] = RightArc.move_cost             # <<<<<<<<<<<<<<
 *         move_cost_funcs[BREAK] = Break.move_cost
 * 
 */
  (__pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_RIGHT]) = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost;

  /* "spacy\syntax\arc_eager.pyx":456
 *         move_cost_funcs[LEFT] = LeftArc.move_cost
 *         move_cost_funcs[RIGHT] = RightArc.move_cost
 *         move_cost_funcs[BREAK] = Break.move_cost             # <<<<<<<<<<<<<<
 * 
 *         label_cost_funcs[SHIFT] = Shift.label_cost
 */
  (__pyx_v_move_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_BREAK]) = __pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost;

  /* "spacy\syntax\arc_eager.pyx":458
 *         move_cost_funcs[BREAK] = Break.move_cost
 * 
 *         label_cost_funcs[SHIFT] = Shift.label_cost             # <<<<<<<<<<<<<<
 *         label_cost_funcs[REDUCE] = Reduce.label_cost
 *         label_cost_funcs[LEFT] = LeftArc.label_cost
 */
  (__pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_SHIFT]) = __pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost;

  /* "spacy\syntax\arc_eager.pyx":459
 * 
 *         label_cost_funcs[SHIFT] = Shift.label_cost
 *         label_cost_funcs[REDUCE] = Reduce.label_cost             # <<<<<<<<<<<<<<
 *         label_cost_funcs[LEFT] = LeftArc.label_cost
 *         label_cost_funcs[RIGHT] = RightArc.label_cost
 */
  (__pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_REDUCE]) = __pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost;

  /* "spacy\syntax\arc_eager.pyx":460
 *         label_cost_funcs[SHIFT] = Shift.label_cost
 *         label_cost_funcs[REDUCE] = Reduce.label_cost
 *         label_cost_funcs[LEFT] = LeftArc.label_cost             # <<<<<<<<<<<<<<
 *         label_cost_funcs[RIGHT] = RightArc.label_cost
 *         label_cost_funcs[BREAK] = Break.label_cost
 */
  (__pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_LEFT]) = __pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost;

  /* "spacy\syntax\arc_eager.pyx":461
 *         label_cost_funcs[REDUCE] = Reduce.label_cost
 *         label_cost_funcs[LEFT] = LeftArc.label_cost
 *         label_cost_funcs[RIGHT] = RightArc.label_cost             # <<<<<<<<<<<<<<
 *         label_cost_funcs[BREAK] = Break.label_cost
 * 
 */
  (__pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_RIGHT]) = __pyx_f_5spacy_6syntax_9arc_eager_8RightArc_label_cost;

  /* "spacy\syntax\arc_eager.pyx":462
 *         label_cost_funcs[LEFT] = LeftArc.label_cost
 *         label_cost_funcs[RIGHT] = RightArc.label_cost
 *         label_cost_funcs[BREAK] = Break.label_cost             # <<<<<<<<<<<<<<
 * 
 *         cdef int* labels = gold.c.labels
 */
  (__pyx_v_label_cost_funcs[__pyx_e_5spacy_6syntax_9arc_eager_BREAK]) = __pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost;

  /* "spacy\syntax\arc_eager.pyx":464
 *         label_cost_funcs[BREAK] = Break.label_cost
 * 
 *         cdef int* labels = gold.c.labels             # <<<<<<<<<<<<<<
 *         cdef int* heads = gold.c.heads
 * 
 */
  __pyx_t_3 = __pyx_v_gold->c.labels;
  __pyx_v_labels = __pyx_t_3;

  /* "spacy\syntax\arc_eager.pyx":465
 * 
 *         cdef int* labels = gold.c.labels
 *         cdef int* heads = gold.c.heads             # <<<<<<<<<<<<<<
 * 
 *         n_gold = 0
 */
  __pyx_t_3 = __pyx_v_gold->c.heads;
  __pyx_v_heads = __pyx_t_3;

  /* "spacy\syntax\arc_eager.pyx":467
 *         cdef int* heads = gold.c.heads
 * 
 *         n_gold = 0             # <<<<<<<<<<<<<<
 *         for i in range(self.n_moves):
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_n_gold = __pyx_int_0;

  /* "spacy\syntax\arc_eager.pyx":468
 * 
 *         n_gold = 0
 *         for i in range(self.n_moves):             # <<<<<<<<<<<<<<
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):
 *                 is_valid[i] = True
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.n_moves;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "spacy\syntax\arc_eager.pyx":469
 *         n_gold = 0
 *         for i in range(self.n_moves):
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):             # <<<<<<<<<<<<<<
 *                 is_valid[i] = True
 *                 move = self.c[i].move
 */
    __pyx_t_5 = ((__pyx_v_self->__pyx_base.c[__pyx_v_i]).is_valid(__pyx_v_stcls->c, (__pyx_v_self->__pyx_base.c[__pyx_v_i]).label) != 0);
    if (__pyx_t_5) {

      /* "spacy\syntax\arc_eager.pyx":470
 *         for i in range(self.n_moves):
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):
 *                 is_valid[i] = True             # <<<<<<<<<<<<<<
 *                 move = self.c[i].move
 *                 label = self.c[i].label
 */
      (__pyx_v_is_valid[__pyx_v_i]) = 1;

      /* "spacy\syntax\arc_eager.pyx":471
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):
 *                 is_valid[i] = True
 *                 move = self.c[i].move             # <<<<<<<<<<<<<<
 *                 label = self.c[i].label
 *                 if move_costs[move] == 9000:
 */
      __pyx_t_6 = (__pyx_v_self->__pyx_base.c[__pyx_v_i]).move;
      __pyx_v_move = __pyx_t_6;

      /* "spacy\syntax\arc_eager.pyx":472
 *                 is_valid[i] = True
 *                 move = self.c[i].move
 *                 label = self.c[i].label             # <<<<<<<<<<<<<<
 *                 if move_costs[move] == 9000:
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)
 */
      __pyx_t_6 = (__pyx_v_self->__pyx_base.c[__pyx_v_i]).label;
      __pyx_v_label = __pyx_t_6;

      /* "spacy\syntax\arc_eager.pyx":473
 *                 move = self.c[i].move
 *                 label = self.c[i].label
 *                 if move_costs[move] == 9000:             # <<<<<<<<<<<<<<
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)
 *                 costs[i] = move_costs[move] + label_cost_funcs[move](stcls, &gold.c, label)
 */
      __pyx_t_5 = (((__pyx_v_move_costs[__pyx_v_move]) == 9000.0) != 0);
      if (__pyx_t_5) {

        /* "spacy\syntax\arc_eager.pyx":474
 *                 label = self.c[i].label
 *                 if move_costs[move] == 9000:
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)             # <<<<<<<<<<<<<<
 *                 costs[i] = move_costs[move] + label_cost_funcs[move](stcls, &gold.c, label)
 *                 n_gold += costs[i] <= 0
 */
        (__pyx_v_move_costs[__pyx_v_move]) = (__pyx_v_move_cost_funcs[__pyx_v_move])(__pyx_v_stcls, (&__pyx_v_gold->c));

        /* "spacy\syntax\arc_eager.pyx":473
 *                 move = self.c[i].move
 *                 label = self.c[i].label
 *                 if move_costs[move] == 9000:             # <<<<<<<<<<<<<<
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)
 *                 costs[i] = move_costs[move] + label_cost_funcs[move](stcls, &gold.c, label)
 */
      }

      /* "spacy\syntax\arc_eager.pyx":475
 *                 if move_costs[move] == 9000:
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)
 *                 costs[i] = move_costs[move] + label_cost_funcs[move](stcls, &gold.c, label)             # <<<<<<<<<<<<<<
 *                 n_gold += costs[i] <= 0
 *             else:
 */
      (__pyx_v_costs[__pyx_v_i]) = ((__pyx_v_move_costs[__pyx_v_move]) + (__pyx_v_label_cost_funcs[__pyx_v_move])(__pyx_v_stcls, (&__pyx_v_gold->c), __pyx_v_label));

      /* "spacy\syntax\arc_eager.pyx":476
 *                     move_costs[move] = move_cost_funcs[move](stcls, &gold.c)
 *                 costs[i] = move_costs[move] + label_cost_funcs[move](stcls, &gold.c, label)
 *                 n_gold += costs[i] <= 0             # <<<<<<<<<<<<<<
 *             else:
 *                 is_valid[i] = False
 */
      __pyx_t_7 = __Pyx_PyBool_FromLong(((__pyx_v_costs[__pyx_v_i]) <= 0.0)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_n_gold, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_n_gold, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "spacy\syntax\arc_eager.pyx":469
 *         n_gold = 0
 *         for i in range(self.n_moves):
 *             if self.c[i].is_valid(stcls.c, self.c[i].label):             # <<<<<<<<<<<<<<
 *                 is_valid[i] = True
 *                 move = self.c[i].move
 */
      goto __pyx_L7;
    }

    /* "spacy\syntax\arc_eager.pyx":478
 *                 n_gold += costs[i] <= 0
 *             else:
 *                 is_valid[i] = False             # <<<<<<<<<<<<<<
 *                 costs[i] = 9000
 *         if n_gold < 1:
 */
    /*else*/ {
      (__pyx_v_is_valid[__pyx_v_i]) = 0;

      /* "spacy\syntax\arc_eager.pyx":479
 *             else:
 *                 is_valid[i] = False
 *                 costs[i] = 9000             # <<<<<<<<<<<<<<
 *         if n_gold < 1:
 *             # Check projectivity --- leading cause
 */
      (__pyx_v_costs[__pyx_v_i]) = 9000.0;
    }
    __pyx_L7:;
  }

  /* "spacy\syntax\arc_eager.pyx":480
 *                 is_valid[i] = False
 *                 costs[i] = 9000
 *         if n_gold < 1:             # <<<<<<<<<<<<<<
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):
 */
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_n_gold, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_5) {

    /* "spacy\syntax\arc_eager.pyx":482
 *         if n_gold < 1:
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Could not find a gold-standard action to supervise the dependency "
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_is_nonproj_tree); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_gold->heads); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_gold->heads);
      __Pyx_GIVEREF(__pyx_v_gold->heads);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_gold->heads);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_5) {

      /* "spacy\syntax\arc_eager.pyx":483
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Could not find a gold-standard action to supervise the dependency "
 *                     "parser.\n"
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "spacy\syntax\arc_eager.pyx":482
 *         if n_gold < 1:
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Could not find a gold-standard action to supervise the dependency "
 */
    }

    /* "spacy\syntax\arc_eager.pyx":493
 *                     "to the GoldParse class, or use PseudoProjectivity.preprocess_training_data")
 *             else:
 *                 print(gold.words)             # <<<<<<<<<<<<<<
 *                 print(gold.heads)
 *                 print(gold.labels)
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_v_gold->words) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "spacy\syntax\arc_eager.pyx":494
 *             else:
 *                 print(gold.words)
 *                 print(gold.heads)             # <<<<<<<<<<<<<<
 *                 print(gold.labels)
 *                 raise ValueError(
 */
      if (__Pyx_PrintOne(0, __pyx_v_gold->heads) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "spacy\syntax\arc_eager.pyx":495
 *                 print(gold.words)
 *                 print(gold.heads)
 *                 print(gold.labels)             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Could not find a gold-standard action to supervise the dependency "
 */
      if (__Pyx_PrintOne(0, __pyx_v_gold->labels) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "spacy\syntax\arc_eager.pyx":502
 *                     "The transition system has %d actions.\n"
 *                     "State at failure:\n"
 *                     "%s" % (self.n_moves, stcls.print_state(gold.words)))             # <<<<<<<<<<<<<<
 *         assert n_gold >= 1
 */
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.n_moves); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_stcls), __pyx_n_s_print_state); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_gold->words); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
      } else {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_INCREF(__pyx_v_gold->words);
        __Pyx_GIVEREF(__pyx_v_gold->words);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_gold->words);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_Could_not_find_a_gold_standard_a_2, __pyx_t_10); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "spacy\syntax\arc_eager.pyx":496
 *                 print(gold.heads)
 *                 print(gold.labels)
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Could not find a gold-standard action to supervise the dependency "
 *                     "parser.\n"
 */
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "spacy\syntax\arc_eager.pyx":480
 *                 is_valid[i] = False
 *                 costs[i] = 9000
 *         if n_gold < 1:             # <<<<<<<<<<<<<<
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):
 */
  }

  /* "spacy\syntax\arc_eager.pyx":503
 *                     "State at failure:\n"
 *                     "%s" % (self.n_moves, stcls.print_state(gold.words)))
 *         assert n_gold >= 1             # <<<<<<<<<<<<<<
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_n_gold, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "spacy\syntax\arc_eager.pyx":444
 *             output[i] = is_valid[self.c[i].move]
 * 
 *     cdef int set_costs(self, int* is_valid, weight_t* costs,             # <<<<<<<<<<<<<<
 *                        StateClass stcls, GoldParse gold) except -1:
 *         cdef int i, move, label
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("spacy.syntax.arc_eager.ArcEager.set_costs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n_gold);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }
  __Pyx_TraceCall("__getbuffer__", __pyx_f[1], 197, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);
  __Pyx_TraceCall("__releasebuffer__", __pyx_f[1], 290, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.ndarray.__releasebuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[1], 770, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[1], 773, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[1], 776, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[1], 779, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[1], 782, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);
  __Pyx_TraceCall("_util_dtypestring", __pyx_f[1], 785, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[1], 966, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[1], 976, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lexeme.pxd":20
 * 
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):             # <<<<<<<<<<<<<<
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 */

static CYTHON_INLINE struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_f_5spacy_6lexeme_6Lexeme_from_ptr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, CYTHON_UNUSED int __pyx_v_vector_length) {
  struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_v_self = 0;
  struct __pyx_obj_5spacy_6lexeme_Lexeme *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);
  __Pyx_TraceCall("from_ptr", __pyx_f[2], 20, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "lexeme.pxd":21
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)             # <<<<<<<<<<<<<<
 *         self.c = lex
 *         self.vocab = vocab
 */
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_lex->orth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vocab));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5spacy_6lexeme_Lexeme), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5spacy_6lexeme_Lexeme)))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self = ((struct __pyx_obj_5spacy_6lexeme_Lexeme *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lexeme.pxd":22
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex             # <<<<<<<<<<<<<<
 *         self.vocab = vocab
 *         self.orth = lex.orth
 */
  __pyx_v_self->c = __pyx_v_lex;

  /* "lexeme.pxd":23
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 *         self.vocab = vocab             # <<<<<<<<<<<<<<
 *         self.orth = lex.orth
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vocab));
  __Pyx_GOTREF(__pyx_v_self->vocab);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vocab));
  __pyx_v_self->vocab = __pyx_v_vocab;

  /* "lexeme.pxd":24
 *         self.c = lex
 *         self.vocab = vocab
 *         self.orth = lex.orth             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = __pyx_v_lex->orth;
  __pyx_v_self->orth = __pyx_t_3;

  /* "lexeme.pxd":20
 * 
 *     @staticmethod
 *     cdef inline Lexeme from_ptr(LexemeC* lex, Vocab vocab, int vector_length):             # <<<<<<<<<<<<<<
 *         cdef Lexeme self = Lexeme.__new__(Lexeme, vocab, lex.orth)
 *         self.c = lex
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_5spacy_6lexeme_Lexeme *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.lexeme.Lexeme.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lexeme.pxd":27
 * 
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:             # <<<<<<<<<<<<<<
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 */

static CYTHON_INLINE void __pyx_f_5spacy_6lexeme_6Lexeme_set_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_name, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_value) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_struct_attr", __pyx_f[2], 27, 1, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "lexeme.pxd":28
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 */
  __pyx_t_1 = ((__pyx_v_name < ((sizeof(__pyx_t_5spacy_8typedefs_flags_t)) * 8)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":29
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)             # <<<<<<<<<<<<<<
 *         elif name == ID:
 *             lex.id = value
 */
    __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(__pyx_v_lex, __pyx_v_name, __pyx_v_value);

    /* "lexeme.pxd":28
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:
 *         if name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":30
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:             # <<<<<<<<<<<<<<
 *             lex.id = value
 *         elif name == LOWER:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_ID) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":31
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:
 *             lex.id = value             # <<<<<<<<<<<<<<
 *         elif name == LOWER:
 *             lex.lower = value
 */
    __pyx_v_lex->id = __pyx_v_value;

    /* "lexeme.pxd":30
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 *         elif name == ID:             # <<<<<<<<<<<<<<
 *             lex.id = value
 *         elif name == LOWER:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":32
 *         elif name == ID:
 *             lex.id = value
 *         elif name == LOWER:             # <<<<<<<<<<<<<<
 *             lex.lower = value
 *         elif name == NORM:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_LOWER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":33
 *             lex.id = value
 *         elif name == LOWER:
 *             lex.lower = value             # <<<<<<<<<<<<<<
 *         elif name == NORM:
 *             lex.norm = value
 */
    __pyx_v_lex->lower = __pyx_v_value;

    /* "lexeme.pxd":32
 *         elif name == ID:
 *             lex.id = value
 *         elif name == LOWER:             # <<<<<<<<<<<<<<
 *             lex.lower = value
 *         elif name == NORM:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":34
 *         elif name == LOWER:
 *             lex.lower = value
 *         elif name == NORM:             # <<<<<<<<<<<<<<
 *             lex.norm = value
 *         elif name == SHAPE:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_NORM) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":35
 *             lex.lower = value
 *         elif name == NORM:
 *             lex.norm = value             # <<<<<<<<<<<<<<
 *         elif name == SHAPE:
 *             lex.shape = value
 */
    __pyx_v_lex->norm = __pyx_v_value;

    /* "lexeme.pxd":34
 *         elif name == LOWER:
 *             lex.lower = value
 *         elif name == NORM:             # <<<<<<<<<<<<<<
 *             lex.norm = value
 *         elif name == SHAPE:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":36
 *         elif name == NORM:
 *             lex.norm = value
 *         elif name == SHAPE:             # <<<<<<<<<<<<<<
 *             lex.shape = value
 *         elif name == PREFIX:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_SHAPE) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":37
 *             lex.norm = value
 *         elif name == SHAPE:
 *             lex.shape = value             # <<<<<<<<<<<<<<
 *         elif name == PREFIX:
 *             lex.prefix = value
 */
    __pyx_v_lex->shape = __pyx_v_value;

    /* "lexeme.pxd":36
 *         elif name == NORM:
 *             lex.norm = value
 *         elif name == SHAPE:             # <<<<<<<<<<<<<<
 *             lex.shape = value
 *         elif name == PREFIX:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":38
 *         elif name == SHAPE:
 *             lex.shape = value
 *         elif name == PREFIX:             # <<<<<<<<<<<<<<
 *             lex.prefix = value
 *         elif name == SUFFIX:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_PREFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":39
 *             lex.shape = value
 *         elif name == PREFIX:
 *             lex.prefix = value             # <<<<<<<<<<<<<<
 *         elif name == SUFFIX:
 *             lex.suffix = value
 */
    __pyx_v_lex->prefix = __pyx_v_value;

    /* "lexeme.pxd":38
 *         elif name == SHAPE:
 *             lex.shape = value
 *         elif name == PREFIX:             # <<<<<<<<<<<<<<
 *             lex.prefix = value
 *         elif name == SUFFIX:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":40
 *         elif name == PREFIX:
 *             lex.prefix = value
 *         elif name == SUFFIX:             # <<<<<<<<<<<<<<
 *             lex.suffix = value
 *         elif name == CLUSTER:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_SUFFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":41
 *             lex.prefix = value
 *         elif name == SUFFIX:
 *             lex.suffix = value             # <<<<<<<<<<<<<<
 *         elif name == CLUSTER:
 *             lex.cluster = value
 */
    __pyx_v_lex->suffix = __pyx_v_value;

    /* "lexeme.pxd":40
 *         elif name == PREFIX:
 *             lex.prefix = value
 *         elif name == SUFFIX:             # <<<<<<<<<<<<<<
 *             lex.suffix = value
 *         elif name == CLUSTER:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":42
 *         elif name == SUFFIX:
 *             lex.suffix = value
 *         elif name == CLUSTER:             # <<<<<<<<<<<<<<
 *             lex.cluster = value
 *         elif name == LANG:
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_CLUSTER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":43
 *             lex.suffix = value
 *         elif name == CLUSTER:
 *             lex.cluster = value             # <<<<<<<<<<<<<<
 *         elif name == LANG:
 *             lex.lang = value
 */
    __pyx_v_lex->cluster = __pyx_v_value;

    /* "lexeme.pxd":42
 *         elif name == SUFFIX:
 *             lex.suffix = value
 *         elif name == CLUSTER:             # <<<<<<<<<<<<<<
 *             lex.cluster = value
 *         elif name == LANG:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":44
 *         elif name == CLUSTER:
 *             lex.cluster = value
 *         elif name == LANG:             # <<<<<<<<<<<<<<
 *             lex.lang = value
 * 
 */
  __pyx_t_1 = ((__pyx_v_name == __pyx_e_5spacy_5attrs_LANG) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":45
 *             lex.cluster = value
 *         elif name == LANG:
 *             lex.lang = value             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_v_lex->lang = __pyx_v_value;

    /* "lexeme.pxd":44
 *         elif name == CLUSTER:
 *             lex.cluster = value
 *         elif name == LANG:             # <<<<<<<<<<<<<<
 *             lex.lang = value
 * 
 */
  }
  __pyx_L3:;

  /* "lexeme.pxd":27
 * 
 *     @staticmethod
 *     cdef inline void set_struct_attr(LexemeC* lex, attr_id_t name, attr_t value) nogil:             # <<<<<<<<<<<<<<
 *         if name < (sizeof(flags_t) * 8):
 *             Lexeme.c_set_flag(lex, name, value)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.lexeme.Lexeme.set_struct_attr", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "lexeme.pxd":48
 * 
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:             # <<<<<<<<<<<<<<
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 */

static CYTHON_INLINE __pyx_t_5spacy_8typedefs_attr_t __pyx_f_5spacy_6lexeme_6Lexeme_get_struct_attr(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_feat_name) {
  __pyx_t_5spacy_8typedefs_attr_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_struct_attr", __pyx_f[2], 48, 1, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "lexeme.pxd":49
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1
 */
  __pyx_t_1 = ((__pyx_v_feat_name < ((sizeof(__pyx_t_5spacy_8typedefs_flags_t)) * 8)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":50
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
    __pyx_t_1 = (__pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(__pyx_v_lex, __pyx_v_feat_name) != 0);
    if (__pyx_t_1) {

      /* "lexeme.pxd":51
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1             # <<<<<<<<<<<<<<
 *             else:
 *                 return 0
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "lexeme.pxd":50
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
    }

    /* "lexeme.pxd":53
 *                 return 1
 *             else:
 *                 return 0             # <<<<<<<<<<<<<<
 *         elif feat_name == ID:
 *             return lex.id
 */
    /*else*/ {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "lexeme.pxd":49
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:
 *         if feat_name < (sizeof(flags_t) * 8):             # <<<<<<<<<<<<<<
 *             if Lexeme.c_check_flag(lex, feat_name):
 *                 return 1
 */
  }

  /* "lexeme.pxd":54
 *             else:
 *                 return 0
 *         elif feat_name == ID:             # <<<<<<<<<<<<<<
 *             return lex.id
 *         elif feat_name == ORTH:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_ID) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":55
 *                 return 0
 *         elif feat_name == ID:
 *             return lex.id             # <<<<<<<<<<<<<<
 *         elif feat_name == ORTH:
 *             return lex.orth
 */
    __pyx_r = __pyx_v_lex->id;
    goto __pyx_L0;

    /* "lexeme.pxd":54
 *             else:
 *                 return 0
 *         elif feat_name == ID:             # <<<<<<<<<<<<<<
 *             return lex.id
 *         elif feat_name == ORTH:
 */
  }

  /* "lexeme.pxd":56
 *         elif feat_name == ID:
 *             return lex.id
 *         elif feat_name == ORTH:             # <<<<<<<<<<<<<<
 *             return lex.orth
 *         elif feat_name == LOWER:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_ORTH) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":57
 *             return lex.id
 *         elif feat_name == ORTH:
 *             return lex.orth             # <<<<<<<<<<<<<<
 *         elif feat_name == LOWER:
 *             return lex.lower
 */
    __pyx_r = __pyx_v_lex->orth;
    goto __pyx_L0;

    /* "lexeme.pxd":56
 *         elif feat_name == ID:
 *             return lex.id
 *         elif feat_name == ORTH:             # <<<<<<<<<<<<<<
 *             return lex.orth
 *         elif feat_name == LOWER:
 */
  }

  /* "lexeme.pxd":58
 *         elif feat_name == ORTH:
 *             return lex.orth
 *         elif feat_name == LOWER:             # <<<<<<<<<<<<<<
 *             return lex.lower
 *         elif feat_name == NORM:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LOWER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":59
 *             return lex.orth
 *         elif feat_name == LOWER:
 *             return lex.lower             # <<<<<<<<<<<<<<
 *         elif feat_name == NORM:
 *             return lex.norm
 */
    __pyx_r = __pyx_v_lex->lower;
    goto __pyx_L0;

    /* "lexeme.pxd":58
 *         elif feat_name == ORTH:
 *             return lex.orth
 *         elif feat_name == LOWER:             # <<<<<<<<<<<<<<
 *             return lex.lower
 *         elif feat_name == NORM:
 */
  }

  /* "lexeme.pxd":60
 *         elif feat_name == LOWER:
 *             return lex.lower
 *         elif feat_name == NORM:             # <<<<<<<<<<<<<<
 *             return lex.norm
 *         elif feat_name == SHAPE:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_NORM) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":61
 *             return lex.lower
 *         elif feat_name == NORM:
 *             return lex.norm             # <<<<<<<<<<<<<<
 *         elif feat_name == SHAPE:
 *             return lex.shape
 */
    __pyx_r = __pyx_v_lex->norm;
    goto __pyx_L0;

    /* "lexeme.pxd":60
 *         elif feat_name == LOWER:
 *             return lex.lower
 *         elif feat_name == NORM:             # <<<<<<<<<<<<<<
 *             return lex.norm
 *         elif feat_name == SHAPE:
 */
  }

  /* "lexeme.pxd":62
 *         elif feat_name == NORM:
 *             return lex.norm
 *         elif feat_name == SHAPE:             # <<<<<<<<<<<<<<
 *             return lex.shape
 *         elif feat_name == PREFIX:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_SHAPE) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":63
 *             return lex.norm
 *         elif feat_name == SHAPE:
 *             return lex.shape             # <<<<<<<<<<<<<<
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 */
    __pyx_r = __pyx_v_lex->shape;
    goto __pyx_L0;

    /* "lexeme.pxd":62
 *         elif feat_name == NORM:
 *             return lex.norm
 *         elif feat_name == SHAPE:             # <<<<<<<<<<<<<<
 *             return lex.shape
 *         elif feat_name == PREFIX:
 */
  }

  /* "lexeme.pxd":64
 *         elif feat_name == SHAPE:
 *             return lex.shape
 *         elif feat_name == PREFIX:             # <<<<<<<<<<<<<<
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_PREFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":65
 *             return lex.shape
 *         elif feat_name == PREFIX:
 *             return lex.prefix             # <<<<<<<<<<<<<<
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 */
    __pyx_r = __pyx_v_lex->prefix;
    goto __pyx_L0;

    /* "lexeme.pxd":64
 *         elif feat_name == SHAPE:
 *             return lex.shape
 *         elif feat_name == PREFIX:             # <<<<<<<<<<<<<<
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 */
  }

  /* "lexeme.pxd":66
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 *         elif feat_name == SUFFIX:             # <<<<<<<<<<<<<<
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_SUFFIX) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":67
 *             return lex.prefix
 *         elif feat_name == SUFFIX:
 *             return lex.suffix             # <<<<<<<<<<<<<<
 *         elif feat_name == LENGTH:
 *             return lex.length
 */
    __pyx_r = __pyx_v_lex->suffix;
    goto __pyx_L0;

    /* "lexeme.pxd":66
 *         elif feat_name == PREFIX:
 *             return lex.prefix
 *         elif feat_name == SUFFIX:             # <<<<<<<<<<<<<<
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 */
  }

  /* "lexeme.pxd":68
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 *         elif feat_name == LENGTH:             # <<<<<<<<<<<<<<
 *             return lex.length
 *         elif feat_name == CLUSTER:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LENGTH) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":69
 *             return lex.suffix
 *         elif feat_name == LENGTH:
 *             return lex.length             # <<<<<<<<<<<<<<
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 */
    __pyx_r = __pyx_v_lex->length;
    goto __pyx_L0;

    /* "lexeme.pxd":68
 *         elif feat_name == SUFFIX:
 *             return lex.suffix
 *         elif feat_name == LENGTH:             # <<<<<<<<<<<<<<
 *             return lex.length
 *         elif feat_name == CLUSTER:
 */
  }

  /* "lexeme.pxd":70
 *         elif feat_name == LENGTH:
 *             return lex.length
 *         elif feat_name == CLUSTER:             # <<<<<<<<<<<<<<
 *             return lex.cluster
 *         elif feat_name == LANG:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_CLUSTER) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":71
 *             return lex.length
 *         elif feat_name == CLUSTER:
 *             return lex.cluster             # <<<<<<<<<<<<<<
 *         elif feat_name == LANG:
 *             return lex.lang
 */
    __pyx_r = __pyx_v_lex->cluster;
    goto __pyx_L0;

    /* "lexeme.pxd":70
 *         elif feat_name == LENGTH:
 *             return lex.length
 *         elif feat_name == CLUSTER:             # <<<<<<<<<<<<<<
 *             return lex.cluster
 *         elif feat_name == LANG:
 */
  }

  /* "lexeme.pxd":72
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 *         elif feat_name == LANG:             # <<<<<<<<<<<<<<
 *             return lex.lang
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_feat_name == __pyx_e_5spacy_5attrs_LANG) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":73
 *             return lex.cluster
 *         elif feat_name == LANG:
 *             return lex.lang             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __pyx_r = __pyx_v_lex->lang;
    goto __pyx_L0;

    /* "lexeme.pxd":72
 *         elif feat_name == CLUSTER:
 *             return lex.cluster
 *         elif feat_name == LANG:             # <<<<<<<<<<<<<<
 *             return lex.lang
 *         else:
 */
  }

  /* "lexeme.pxd":75
 *             return lex.lang
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "lexeme.pxd":48
 * 
 *     @staticmethod
 *     cdef inline attr_t get_struct_attr(const LexemeC* lex, attr_id_t feat_name) nogil:             # <<<<<<<<<<<<<<
 *         if feat_name < (sizeof(flags_t) * 8):
 *             if Lexeme.c_check_flag(lex, feat_name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.lexeme.Lexeme.get_struct_attr", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "lexeme.pxd":78
 * 
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 */

static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(struct __pyx_t_5spacy_7structs_LexemeC const *__pyx_v_lexeme, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id) {
  __pyx_t_5spacy_8typedefs_flags_t __pyx_v_one;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("c_check_flag", __pyx_f[2], 78, 1, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "lexeme.pxd":79
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1             # <<<<<<<<<<<<<<
 *         if lexeme.flags & (one << flag_id):
 *             return True
 */
  __pyx_v_one = 1;

  /* "lexeme.pxd":80
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_lexeme->flags & (__pyx_v_one << __pyx_v_flag_id)) != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":81
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "lexeme.pxd":80
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  }

  /* "lexeme.pxd":83
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "lexeme.pxd":78
 * 
 *     @staticmethod
 *     cdef inline bint c_check_flag(const LexemeC* lexeme, attr_id_t flag_id) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if lexeme.flags & (one << flag_id):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.lexeme.Lexeme.c_check_flag", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "lexeme.pxd":86
 * 
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if value:
 */

static CYTHON_INLINE int __pyx_f_5spacy_6lexeme_6Lexeme_c_set_flag(struct __pyx_t_5spacy_7structs_LexemeC *__pyx_v_lex, enum __pyx_t_5spacy_5attrs_attr_id_t __pyx_v_flag_id, int __pyx_v_value) {
  __pyx_t_5spacy_8typedefs_flags_t __pyx_v_one;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("c_set_flag", __pyx_f[2], 86, 1, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "lexeme.pxd":87
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1             # <<<<<<<<<<<<<<
 *         if value:
 *             lex.flags |= one << flag_id
 */
  __pyx_v_one = 1;

  /* "lexeme.pxd":88
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1
 *         if value:             # <<<<<<<<<<<<<<
 *             lex.flags |= one << flag_id
 *         else:
 */
  __pyx_t_1 = (__pyx_v_value != 0);
  if (__pyx_t_1) {

    /* "lexeme.pxd":89
 *         cdef flags_t one = 1
 *         if value:
 *             lex.flags |= one << flag_id             # <<<<<<<<<<<<<<
 *         else:
 *             lex.flags &= ~(one << flag_id)
 */
    __pyx_v_lex->flags = (__pyx_v_lex->flags | (__pyx_v_one << __pyx_v_flag_id));

    /* "lexeme.pxd":88
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:
 *         cdef flags_t one = 1
 *         if value:             # <<<<<<<<<<<<<<
 *             lex.flags |= one << flag_id
 *         else:
 */
    goto __pyx_L3;
  }

  /* "lexeme.pxd":91
 *             lex.flags |= one << flag_id
 *         else:
 *             lex.flags &= ~(one << flag_id)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_v_lex->flags = (__pyx_v_lex->flags & (~(__pyx_v_one << __pyx_v_flag_id)));
  }
  __pyx_L3:;

  /* "lexeme.pxd":86
 * 
 *     @staticmethod
 *     cdef inline bint c_set_flag(LexemeC* lex, attr_id_t flag_id, bint value) nogil:             # <<<<<<<<<<<<<<
 *         cdef flags_t one = 1
 *         if value:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.lexeme.Lexeme.c_set_flag", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":14
 * 
 * 
 * cdef inline bint is_space_token(const TokenC* token) nogil:             # <<<<<<<<<<<<<<
 *     return Lexeme.c_check_flag(token.lex, IS_SPACE)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_6_state_is_space_token(struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_token) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_space_token", __pyx_f[3], 14, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":15
 * 
 * cdef inline bint is_space_token(const TokenC* token) nogil:
 *     return Lexeme.c_check_flag(token.lex, IS_SPACE)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_5spacy_6lexeme_6Lexeme_c_check_flag(__pyx_v_token->lex, __pyx_e_5spacy_5attrs_IS_SPACE);
  goto __pyx_L0;

  /* "_state.pxd":14
 * 
 * 
 * cdef inline bint is_space_token(const TokenC* token) nogil:             # <<<<<<<<<<<<<<
 *     return Lexeme.c_check_flag(token.lex, IS_SPACE)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax._state.is_space_token", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":31
 *     int _break
 * 
 *     __init__(const TokenC* sent, int length) nogil:             # <<<<<<<<<<<<<<
 *         cdef int PADDING = 5
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))
 */

 __pyx_t_5spacy_6syntax_6_state_StateC::__pyx_t_5spacy_6syntax_6_state_StateC(struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_sent, int __pyx_v_length) {
  int __pyx_v_PADDING;
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  long __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("<init>", __pyx_f[3], 31, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":32
 * 
 *     __init__(const TokenC* sent, int length) nogil:
 *         cdef int PADDING = 5             # <<<<<<<<<<<<<<
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this._stack = <int*>calloc(length + (PADDING * 2), sizeof(int))
 */
  __pyx_v_PADDING = 5;

  /* "_state.pxd":33
 *     __init__(const TokenC* sent, int length) nogil:
 *         cdef int PADDING = 5
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))             # <<<<<<<<<<<<<<
 *         this._stack = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this.shifted = <bint*>calloc(length + (PADDING * 2), sizeof(bint))
 */
  this->_buffer = ((int *)calloc((__pyx_v_length + (__pyx_v_PADDING * 2)), (sizeof(int))));

  /* "_state.pxd":34
 *         cdef int PADDING = 5
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this._stack = <int*>calloc(length + (PADDING * 2), sizeof(int))             # <<<<<<<<<<<<<<
 *         this.shifted = <bint*>calloc(length + (PADDING * 2), sizeof(bint))
 *         this._sent = <TokenC*>calloc(length + (PADDING * 2), sizeof(TokenC))
 */
  this->_stack = ((int *)calloc((__pyx_v_length + (__pyx_v_PADDING * 2)), (sizeof(int))));

  /* "_state.pxd":35
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this._stack = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this.shifted = <bint*>calloc(length + (PADDING * 2), sizeof(bint))             # <<<<<<<<<<<<<<
 *         this._sent = <TokenC*>calloc(length + (PADDING * 2), sizeof(TokenC))
 *         this._ents = <Entity*>calloc(length + (PADDING * 2), sizeof(Entity))
 */
  this->shifted = ((int *)calloc((__pyx_v_length + (__pyx_v_PADDING * 2)), (sizeof(int))));

  /* "_state.pxd":36
 *         this._stack = <int*>calloc(length + (PADDING * 2), sizeof(int))
 *         this.shifted = <bint*>calloc(length + (PADDING * 2), sizeof(bint))
 *         this._sent = <TokenC*>calloc(length + (PADDING * 2), sizeof(TokenC))             # <<<<<<<<<<<<<<
 *         this._ents = <Entity*>calloc(length + (PADDING * 2), sizeof(Entity))
 *         cdef int i
 */
  this->_sent = ((struct __pyx_t_5spacy_7structs_TokenC *)calloc((__pyx_v_length + (__pyx_v_PADDING * 2)), (sizeof(struct __pyx_t_5spacy_7structs_TokenC))));

  /* "_state.pxd":37
 *         this.shifted = <bint*>calloc(length + (PADDING * 2), sizeof(bint))
 *         this._sent = <TokenC*>calloc(length + (PADDING * 2), sizeof(TokenC))
 *         this._ents = <Entity*>calloc(length + (PADDING * 2), sizeof(Entity))             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(length + (PADDING * 2)):
 */
  this->_ents = ((struct __pyx_t_5spacy_7structs_Entity *)calloc((__pyx_v_length + (__pyx_v_PADDING * 2)), (sizeof(struct __pyx_t_5spacy_7structs_Entity))));

  /* "_state.pxd":39
 *         this._ents = <Entity*>calloc(length + (PADDING * 2), sizeof(Entity))
 *         cdef int i
 *         for i in range(length + (PADDING * 2)):             # <<<<<<<<<<<<<<
 *             this._ents[i].end = -1
 *             this._sent[i].l_edge = i
 */
  __pyx_t_1 = (__pyx_v_length + (__pyx_v_PADDING * 2));
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "_state.pxd":40
 *         cdef int i
 *         for i in range(length + (PADDING * 2)):
 *             this._ents[i].end = -1             # <<<<<<<<<<<<<<
 *             this._sent[i].l_edge = i
 *             this._sent[i].r_edge = i
 */
    (this->_ents[__pyx_v_i]).end = -1;

    /* "_state.pxd":41
 *         for i in range(length + (PADDING * 2)):
 *             this._ents[i].end = -1
 *             this._sent[i].l_edge = i             # <<<<<<<<<<<<<<
 *             this._sent[i].r_edge = i
 *         for i in range(PADDING):
 */
    (this->_sent[__pyx_v_i]).l_edge = __pyx_v_i;

    /* "_state.pxd":42
 *             this._ents[i].end = -1
 *             this._sent[i].l_edge = i
 *             this._sent[i].r_edge = i             # <<<<<<<<<<<<<<
 *         for i in range(PADDING):
 *             this._sent[i].lex = &EMPTY_LEXEME
 */
    (this->_sent[__pyx_v_i]).r_edge = __pyx_v_i;
  }

  /* "_state.pxd":43
 *             this._sent[i].l_edge = i
 *             this._sent[i].r_edge = i
 *         for i in range(PADDING):             # <<<<<<<<<<<<<<
 *             this._sent[i].lex = &EMPTY_LEXEME
 *         this._sent += PADDING
 */
  __pyx_t_2 = __pyx_v_PADDING;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_state.pxd":44
 *             this._sent[i].r_edge = i
 *         for i in range(PADDING):
 *             this._sent[i].lex = &EMPTY_LEXEME             # <<<<<<<<<<<<<<
 *         this._sent += PADDING
 *         this._ents += PADDING
 */
    (this->_sent[__pyx_v_i]).lex = (&__pyx_v_5spacy_5vocab_EMPTY_LEXEME);
  }

  /* "_state.pxd":45
 *         for i in range(PADDING):
 *             this._sent[i].lex = &EMPTY_LEXEME
 *         this._sent += PADDING             # <<<<<<<<<<<<<<
 *         this._ents += PADDING
 *         this._buffer += PADDING
 */
  this->_sent = (this->_sent + __pyx_v_PADDING);

  /* "_state.pxd":46
 *             this._sent[i].lex = &EMPTY_LEXEME
 *         this._sent += PADDING
 *         this._ents += PADDING             # <<<<<<<<<<<<<<
 *         this._buffer += PADDING
 *         this._stack += PADDING
 */
  this->_ents = (this->_ents + __pyx_v_PADDING);

  /* "_state.pxd":47
 *         this._sent += PADDING
 *         this._ents += PADDING
 *         this._buffer += PADDING             # <<<<<<<<<<<<<<
 *         this._stack += PADDING
 *         this.shifted += PADDING
 */
  this->_buffer = (this->_buffer + __pyx_v_PADDING);

  /* "_state.pxd":48
 *         this._ents += PADDING
 *         this._buffer += PADDING
 *         this._stack += PADDING             # <<<<<<<<<<<<<<
 *         this.shifted += PADDING
 *         this.length = length
 */
  this->_stack = (this->_stack + __pyx_v_PADDING);

  /* "_state.pxd":49
 *         this._buffer += PADDING
 *         this._stack += PADDING
 *         this.shifted += PADDING             # <<<<<<<<<<<<<<
 *         this.length = length
 *         this._break = -1
 */
  this->shifted = (this->shifted + __pyx_v_PADDING);

  /* "_state.pxd":50
 *         this._stack += PADDING
 *         this.shifted += PADDING
 *         this.length = length             # <<<<<<<<<<<<<<
 *         this._break = -1
 *         this._s_i = 0
 */
  this->length = __pyx_v_length;

  /* "_state.pxd":51
 *         this.shifted += PADDING
 *         this.length = length
 *         this._break = -1             # <<<<<<<<<<<<<<
 *         this._s_i = 0
 *         this._b_i = 0
 */
  this->_break = -1;

  /* "_state.pxd":52
 *         this.length = length
 *         this._break = -1
 *         this._s_i = 0             # <<<<<<<<<<<<<<
 *         this._b_i = 0
 *         this._e_i = 0
 */
  this->_s_i = 0;

  /* "_state.pxd":53
 *         this._break = -1
 *         this._s_i = 0
 *         this._b_i = 0             # <<<<<<<<<<<<<<
 *         this._e_i = 0
 *         for i in range(length):
 */
  this->_b_i = 0;

  /* "_state.pxd":54
 *         this._s_i = 0
 *         this._b_i = 0
 *         this._e_i = 0             # <<<<<<<<<<<<<<
 *         for i in range(length):
 *             this._buffer[i] = i
 */
  this->_e_i = 0;

  /* "_state.pxd":55
 *         this._b_i = 0
 *         this._e_i = 0
 *         for i in range(length):             # <<<<<<<<<<<<<<
 *             this._buffer[i] = i
 *         memset(&this._empty_token, 0, sizeof(TokenC))
 */
  __pyx_t_2 = __pyx_v_length;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_state.pxd":56
 *         this._e_i = 0
 *         for i in range(length):
 *             this._buffer[i] = i             # <<<<<<<<<<<<<<
 *         memset(&this._empty_token, 0, sizeof(TokenC))
 *         this._empty_token.lex = &EMPTY_LEXEME
 */
    (this->_buffer[__pyx_v_i]) = __pyx_v_i;
  }

  /* "_state.pxd":57
 *         for i in range(length):
 *             this._buffer[i] = i
 *         memset(&this._empty_token, 0, sizeof(TokenC))             # <<<<<<<<<<<<<<
 *         this._empty_token.lex = &EMPTY_LEXEME
 *         for i in range(length):
 */
  memset((&this->_empty_token), 0, (sizeof(struct __pyx_t_5spacy_7structs_TokenC)));

  /* "_state.pxd":58
 *             this._buffer[i] = i
 *         memset(&this._empty_token, 0, sizeof(TokenC))
 *         this._empty_token.lex = &EMPTY_LEXEME             # <<<<<<<<<<<<<<
 *         for i in range(length):
 *             this._sent[i] = sent[i]
 */
  this->_empty_token.lex = (&__pyx_v_5spacy_5vocab_EMPTY_LEXEME);

  /* "_state.pxd":59
 *         memset(&this._empty_token, 0, sizeof(TokenC))
 *         this._empty_token.lex = &EMPTY_LEXEME
 *         for i in range(length):             # <<<<<<<<<<<<<<
 *             this._sent[i] = sent[i]
 *             this._buffer[i] = i
 */
  __pyx_t_2 = __pyx_v_length;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_state.pxd":60
 *         this._empty_token.lex = &EMPTY_LEXEME
 *         for i in range(length):
 *             this._sent[i] = sent[i]             # <<<<<<<<<<<<<<
 *             this._buffer[i] = i
 *         for i in range(length, length+PADDING):
 */
    (this->_sent[__pyx_v_i]) = (__pyx_v_sent[__pyx_v_i]);

    /* "_state.pxd":61
 *         for i in range(length):
 *             this._sent[i] = sent[i]
 *             this._buffer[i] = i             # <<<<<<<<<<<<<<
 *         for i in range(length, length+PADDING):
 *             this._sent[i].lex = &EMPTY_LEXEME
 */
    (this->_buffer[__pyx_v_i]) = __pyx_v_i;
  }

  /* "_state.pxd":62
 *             this._sent[i] = sent[i]
 *             this._buffer[i] = i
 *         for i in range(length, length+PADDING):             # <<<<<<<<<<<<<<
 *             this._sent[i].lex = &EMPTY_LEXEME
 * 
 */
  __pyx_t_2 = (__pyx_v_length + __pyx_v_PADDING);
  for (__pyx_t_3 = __pyx_v_length; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_state.pxd":63
 *             this._buffer[i] = i
 *         for i in range(length, length+PADDING):
 *             this._sent[i].lex = &EMPTY_LEXEME             # <<<<<<<<<<<<<<
 * 
 *     __dealloc__():
 */
    (this->_sent[__pyx_v_i]).lex = (&__pyx_v_5spacy_5vocab_EMPTY_LEXEME);
  }

  /* "_state.pxd":31
 *     int _break
 * 
 *     __init__(const TokenC* sent, int length) nogil:             # <<<<<<<<<<<<<<
 *         cdef int PADDING = 5
 *         this._buffer = <int*>calloc(length + (PADDING * 2), sizeof(int))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":65
 *             this._sent[i].lex = &EMPTY_LEXEME
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         cdef int PADDING = 5
 *         free(this._sent - PADDING)
 */

 __pyx_t_5spacy_6syntax_6_state_StateC::~__pyx_t_5spacy_6syntax_6_state_StateC(void) {
  int __pyx_v_PADDING;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("<del>", 0);
  __Pyx_TraceCall("<del>", __pyx_f[3], 65, 0, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":66
 * 
 *     __dealloc__():
 *         cdef int PADDING = 5             # <<<<<<<<<<<<<<
 *         free(this._sent - PADDING)
 *         free(this._ents - PADDING)
 */
  __pyx_v_PADDING = 5;

  /* "_state.pxd":67
 *     __dealloc__():
 *         cdef int PADDING = 5
 *         free(this._sent - PADDING)             # <<<<<<<<<<<<<<
 *         free(this._ents - PADDING)
 *         free(this._buffer - PADDING)
 */
  free((this->_sent - __pyx_v_PADDING));

  /* "_state.pxd":68
 *         cdef int PADDING = 5
 *         free(this._sent - PADDING)
 *         free(this._ents - PADDING)             # <<<<<<<<<<<<<<
 *         free(this._buffer - PADDING)
 *         free(this._stack - PADDING)
 */
  free((this->_ents - __pyx_v_PADDING));

  /* "_state.pxd":69
 *         free(this._sent - PADDING)
 *         free(this._ents - PADDING)
 *         free(this._buffer - PADDING)             # <<<<<<<<<<<<<<
 *         free(this._stack - PADDING)
 *         free(this.shifted - PADDING)
 */
  free((this->_buffer - __pyx_v_PADDING));

  /* "_state.pxd":70
 *         free(this._ents - PADDING)
 *         free(this._buffer - PADDING)
 *         free(this._stack - PADDING)             # <<<<<<<<<<<<<<
 *         free(this.shifted - PADDING)
 * 
 */
  free((this->_stack - __pyx_v_PADDING));

  /* "_state.pxd":71
 *         free(this._buffer - PADDING)
 *         free(this._stack - PADDING)
 *         free(this.shifted - PADDING)             # <<<<<<<<<<<<<<
 * 
 *     int S(int i) nogil const:
 */
  free((this->shifted - __pyx_v_PADDING));

  /* "_state.pxd":65
 *             this._sent[i].lex = &EMPTY_LEXEME
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         cdef int PADDING = 5
 *         free(this._sent - PADDING)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.<del>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "_state.pxd":73
 *         free(this.shifted - PADDING)
 * 
 *     int S(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i >= this._s_i:
 *             return -1
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::S(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("S", __pyx_f[3], 73, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":74
 * 
 *     int S(int i) nogil const:
 *         if i >= this._s_i:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._stack[this._s_i - (i+1)]
 */
  __pyx_t_1 = ((__pyx_v_i >= this->_s_i) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":75
 *     int S(int i) nogil const:
 *         if i >= this._s_i:
 *             return -1             # <<<<<<<<<<<<<<
 *         return this._stack[this._s_i - (i+1)]
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":74
 * 
 *     int S(int i) nogil const:
 *         if i >= this._s_i:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._stack[this._s_i - (i+1)]
 */
  }

  /* "_state.pxd":76
 *         if i >= this._s_i:
 *             return -1
 *         return this._stack[this._s_i - (i+1)]             # <<<<<<<<<<<<<<
 * 
 *     int B(int i) nogil const:
 */
  __pyx_r = (this->_stack[(this->_s_i - (__pyx_v_i + 1))]);
  goto __pyx_L0;

  /* "_state.pxd":73
 *         free(this.shifted - PADDING)
 * 
 *     int S(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i >= this._s_i:
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.S", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":78
 *         return this._stack[this._s_i - (i+1)]
 * 
 *     int B(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if (i + this._b_i) >= this.length:
 *             return -1
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::B(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("B", __pyx_f[3], 78, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":79
 * 
 *     int B(int i) nogil const:
 *         if (i + this._b_i) >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._buffer[this._b_i + i]
 */
  __pyx_t_1 = (((__pyx_v_i + this->_b_i) >= this->length) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":80
 *     int B(int i) nogil const:
 *         if (i + this._b_i) >= this.length:
 *             return -1             # <<<<<<<<<<<<<<
 *         return this._buffer[this._b_i + i]
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":79
 * 
 *     int B(int i) nogil const:
 *         if (i + this._b_i) >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._buffer[this._b_i + i]
 */
  }

  /* "_state.pxd":81
 *         if (i + this._b_i) >= this.length:
 *             return -1
 *         return this._buffer[this._b_i + i]             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* S_(int i) nogil const:
 */
  __pyx_r = (this->_buffer[(this->_b_i + __pyx_v_i)]);
  goto __pyx_L0;

  /* "_state.pxd":78
 *         return this._stack[this._s_i - (i+1)]
 * 
 *     int B(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if (i + this._b_i) >= this.length:
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.B", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":83
 *         return this._buffer[this._b_i + i]
 * 
 *     const TokenC* S_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.S(i))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::S_(int __pyx_v_i) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("S_", __pyx_f[3], 83, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":84
 * 
 *     const TokenC* S_(int i) nogil const:
 *         return this.safe_get(this.S(i))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* B_(int i) nogil const:
 */
  __pyx_r = this->safe_get(this->S(__pyx_v_i));
  goto __pyx_L0;

  /* "_state.pxd":83
 *         return this._buffer[this._b_i + i]
 * 
 *     const TokenC* S_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.S(i))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.S_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":86
 *         return this.safe_get(this.S(i))
 * 
 *     const TokenC* B_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.B(i))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::B_(int __pyx_v_i) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("B_", __pyx_f[3], 86, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":87
 * 
 *     const TokenC* B_(int i) nogil const:
 *         return this.safe_get(this.B(i))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* H_(int i) nogil const:
 */
  __pyx_r = this->safe_get(this->B(__pyx_v_i));
  goto __pyx_L0;

  /* "_state.pxd":86
 *         return this.safe_get(this.S(i))
 * 
 *     const TokenC* B_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.B(i))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.B_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":89
 *         return this.safe_get(this.B(i))
 * 
 *     const TokenC* H_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.H(i))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::H_(int __pyx_v_i) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("H_", __pyx_f[3], 89, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":90
 * 
 *     const TokenC* H_(int i) nogil const:
 *         return this.safe_get(this.H(i))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* E_(int i) nogil const:
 */
  __pyx_r = this->safe_get(this->H(__pyx_v_i));
  goto __pyx_L0;

  /* "_state.pxd":89
 *         return this.safe_get(this.B(i))
 * 
 *     const TokenC* H_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.H(i))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.H_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":92
 *         return this.safe_get(this.H(i))
 * 
 *     const TokenC* E_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.E(i))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::E_(int __pyx_v_i) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("E_", __pyx_f[3], 92, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":93
 * 
 *     const TokenC* E_(int i) nogil const:
 *         return this.safe_get(this.E(i))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* L_(int i, int idx) nogil const:
 */
  __pyx_r = this->safe_get(this->E(__pyx_v_i));
  goto __pyx_L0;

  /* "_state.pxd":92
 *         return this.safe_get(this.H(i))
 * 
 *     const TokenC* E_(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.E(i))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.E_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":95
 *         return this.safe_get(this.E(i))
 * 
 *     const TokenC* L_(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.L(i, idx))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::L_(int __pyx_v_i, int __pyx_v_idx) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("L_", __pyx_f[3], 95, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":96
 * 
 *     const TokenC* L_(int i, int idx) nogil const:
 *         return this.safe_get(this.L(i, idx))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* R_(int i, int idx) nogil const:
 */
  __pyx_r = this->safe_get(this->L(__pyx_v_i, __pyx_v_idx));
  goto __pyx_L0;

  /* "_state.pxd":95
 *         return this.safe_get(this.E(i))
 * 
 *     const TokenC* L_(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.L(i, idx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.L_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":98
 *         return this.safe_get(this.L(i, idx))
 * 
 *     const TokenC* R_(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.R(i, idx))
 * 
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::R_(int __pyx_v_i, int __pyx_v_idx) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("R_", __pyx_f[3], 98, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":99
 * 
 *     const TokenC* R_(int i, int idx) nogil const:
 *         return this.safe_get(this.R(i, idx))             # <<<<<<<<<<<<<<
 * 
 *     const TokenC* safe_get(int i) nogil const:
 */
  __pyx_r = this->safe_get(this->R(__pyx_v_i, __pyx_v_idx));
  goto __pyx_L0;

  /* "_state.pxd":98
 *         return this.safe_get(this.L(i, idx))
 * 
 *     const TokenC* R_(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(this.R(i, idx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.R_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":101
 *         return this.safe_get(this.R(i, idx))
 * 
 *     const TokenC* safe_get(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return &this._empty_token
 */

struct __pyx_t_5spacy_7structs_TokenC const *__pyx_t_5spacy_6syntax_6_state_StateC::safe_get(int __pyx_v_i) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("safe_get", __pyx_f[3], 101, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":102
 * 
 *     const TokenC* safe_get(int i) nogil const:
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return &this._empty_token
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":103
 *     const TokenC* safe_get(int i) nogil const:
 *         if i < 0 or i >= this.length:
 *             return &this._empty_token             # <<<<<<<<<<<<<<
 *         else:
 *             return &this._sent[i]
 */
    __pyx_r = (&this->_empty_token);
    goto __pyx_L0;

    /* "_state.pxd":102
 * 
 *     const TokenC* safe_get(int i) nogil const:
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return &this._empty_token
 *         else:
 */
  }

  /* "_state.pxd":105
 *             return &this._empty_token
 *         else:
 *             return &this._sent[i]             # <<<<<<<<<<<<<<
 * 
 *     int H(int i) nogil const:
 */
  /*else*/ {
    __pyx_r = (&(this->_sent[__pyx_v_i]));
    goto __pyx_L0;
  }

  /* "_state.pxd":101
 *         return this.safe_get(this.R(i, idx))
 * 
 *     const TokenC* safe_get(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return &this._empty_token
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.safe_get", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":107
 *             return &this._sent[i]
 * 
 *     int H(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return -1
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::H(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("H", __pyx_f[3], 107, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":108
 * 
 *     int H(int i) nogil const:
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._sent[i].head + i
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":109
 *     int H(int i) nogil const:
 *         if i < 0 or i >= this.length:
 *             return -1             # <<<<<<<<<<<<<<
 *         return this._sent[i].head + i
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":108
 * 
 *     int H(int i) nogil const:
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         return this._sent[i].head + i
 */
  }

  /* "_state.pxd":110
 *         if i < 0 or i >= this.length:
 *             return -1
 *         return this._sent[i].head + i             # <<<<<<<<<<<<<<
 * 
 *     int E(int i) nogil const:
 */
  __pyx_r = ((this->_sent[__pyx_v_i]).head + __pyx_v_i);
  goto __pyx_L0;

  /* "_state.pxd":107
 *             return &this._sent[i]
 * 
 *     int H(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.H", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":112
 *         return this._sent[i].head + i
 * 
 *     int E(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if this._e_i <= 0 or this._e_i >= this.length:
 *             return 0
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::E(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("E", __pyx_f[3], 112, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":113
 * 
 *     int E(int i) nogil const:
 *         if this._e_i <= 0 or this._e_i >= this.length:             # <<<<<<<<<<<<<<
 *             return 0
 *         if i < 0 or i >= this._e_i:
 */
  __pyx_t_2 = ((this->_e_i <= 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((this->_e_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":114
 *     int E(int i) nogil const:
 *         if this._e_i <= 0 or this._e_i >= this.length:
 *             return 0             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this._e_i:
 *             return 0
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "_state.pxd":113
 * 
 *     int E(int i) nogil const:
 *         if this._e_i <= 0 or this._e_i >= this.length:             # <<<<<<<<<<<<<<
 *             return 0
 *         if i < 0 or i >= this._e_i:
 */
  }

  /* "_state.pxd":115
 *         if this._e_i <= 0 or this._e_i >= this.length:
 *             return 0
 *         if i < 0 or i >= this._e_i:             # <<<<<<<<<<<<<<
 *             return 0
 *         return this._ents[this._e_i - (i+1)].start
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= this->_e_i) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":116
 *             return 0
 *         if i < 0 or i >= this._e_i:
 *             return 0             # <<<<<<<<<<<<<<
 *         return this._ents[this._e_i - (i+1)].start
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "_state.pxd":115
 *         if this._e_i <= 0 or this._e_i >= this.length:
 *             return 0
 *         if i < 0 or i >= this._e_i:             # <<<<<<<<<<<<<<
 *             return 0
 *         return this._ents[this._e_i - (i+1)].start
 */
  }

  /* "_state.pxd":117
 *         if i < 0 or i >= this._e_i:
 *             return 0
 *         return this._ents[this._e_i - (i+1)].start             # <<<<<<<<<<<<<<
 * 
 *     int L(int i, int idx) nogil const:
 */
  __pyx_r = (this->_ents[(this->_e_i - (__pyx_v_i + 1))]).start;
  goto __pyx_L0;

  /* "_state.pxd":112
 *         return this._sent[i].head + i
 * 
 *     int E(int i) nogil const:             # <<<<<<<<<<<<<<
 *         if this._e_i <= 0 or this._e_i >= this.length:
 *             return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.E", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":119
 *         return this._ents[this._e_i - (i+1)].start
 * 
 *     int L(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         if idx < 1:
 *             return -1
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::L(int __pyx_v_i, int __pyx_v_idx) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_target;
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_ptr;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("L", __pyx_f[3], 119, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":120
 * 
 *     int L(int i, int idx) nogil const:
 *         if idx < 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         if i < 0 or i >= this.length:
 */
  __pyx_t_1 = ((__pyx_v_idx < 1) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":121
 *     int L(int i, int idx) nogil const:
 *         if idx < 1:
 *             return -1             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return -1
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":120
 * 
 *     int L(int i, int idx) nogil const:
 *         if idx < 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         if i < 0 or i >= this.length:
 */
  }

  /* "_state.pxd":122
 *         if idx < 1:
 *             return -1
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":123
 *             return -1
 *         if i < 0 or i >= this.length:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.l_kids < <uint32_t>idx:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":122
 *         if idx < 1:
 *             return -1
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 */
  }

  /* "_state.pxd":124
 *         if i < 0 or i >= this.length:
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]             # <<<<<<<<<<<<<<
 *         if target.l_kids < <uint32_t>idx:
 *             return -1
 */
  __pyx_v_target = (&(this->_sent[__pyx_v_i]));

  /* "_state.pxd":125
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.l_kids < <uint32_t>idx:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.l_edge]
 */
  __pyx_t_1 = ((__pyx_v_target->l_kids < ((uint32_t)__pyx_v_idx)) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":126
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.l_kids < <uint32_t>idx:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef const TokenC* ptr = &this._sent[target.l_edge]
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":125
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.l_kids < <uint32_t>idx:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.l_edge]
 */
  }

  /* "_state.pxd":127
 *         if target.l_kids < <uint32_t>idx:
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.l_edge]             # <<<<<<<<<<<<<<
 * 
 *         while ptr < target:
 */
  __pyx_v_ptr = (&(this->_sent[__pyx_v_target->l_edge]));

  /* "_state.pxd":129
 *         cdef const TokenC* ptr = &this._sent[target.l_edge]
 * 
 *         while ptr < target:             # <<<<<<<<<<<<<<
 *             # If this head is still to the right of us, we can skip to it
 *             # No token that's between this token and this head could be our
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_ptr < __pyx_v_target) != 0);
    if (!__pyx_t_1) break;

    /* "_state.pxd":133
 *             # No token that's between this token and this head could be our
 *             # child.
 *             if (ptr.head >= 1) and (ptr + ptr.head) < target:             # <<<<<<<<<<<<<<
 *                 ptr += ptr.head
 * 
 */
    __pyx_t_2 = ((__pyx_v_ptr->head >= 1) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_ptr + __pyx_v_ptr->head) < __pyx_v_target) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "_state.pxd":134
 *             # child.
 *             if (ptr.head >= 1) and (ptr + ptr.head) < target:
 *                 ptr += ptr.head             # <<<<<<<<<<<<<<
 * 
 *             elif ptr + ptr.head == target:
 */
      __pyx_v_ptr = (__pyx_v_ptr + __pyx_v_ptr->head);

      /* "_state.pxd":133
 *             # No token that's between this token and this head could be our
 *             # child.
 *             if (ptr.head >= 1) and (ptr + ptr.head) < target:             # <<<<<<<<<<<<<<
 *                 ptr += ptr.head
 * 
 */
      goto __pyx_L10;
    }

    /* "_state.pxd":136
 *                 ptr += ptr.head
 * 
 *             elif ptr + ptr.head == target:             # <<<<<<<<<<<<<<
 *                 idx -= 1
 *                 if idx == 0:
 */
    __pyx_t_1 = (((__pyx_v_ptr + __pyx_v_ptr->head) == __pyx_v_target) != 0);
    if (__pyx_t_1) {

      /* "_state.pxd":137
 * 
 *             elif ptr + ptr.head == target:
 *                 idx -= 1             # <<<<<<<<<<<<<<
 *                 if idx == 0:
 *                     return ptr - this._sent
 */
      __pyx_v_idx = (__pyx_v_idx - 1);

      /* "_state.pxd":138
 *             elif ptr + ptr.head == target:
 *                 idx -= 1
 *                 if idx == 0:             # <<<<<<<<<<<<<<
 *                     return ptr - this._sent
 *                 ptr += 1
 */
      __pyx_t_1 = ((__pyx_v_idx == 0) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":139
 *                 idx -= 1
 *                 if idx == 0:
 *                     return ptr - this._sent             # <<<<<<<<<<<<<<
 *                 ptr += 1
 *             else:
 */
        __pyx_r = (__pyx_v_ptr - this->_sent);
        goto __pyx_L0;

        /* "_state.pxd":138
 *             elif ptr + ptr.head == target:
 *                 idx -= 1
 *                 if idx == 0:             # <<<<<<<<<<<<<<
 *                     return ptr - this._sent
 *                 ptr += 1
 */
      }

      /* "_state.pxd":140
 *                 if idx == 0:
 *                     return ptr - this._sent
 *                 ptr += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 ptr += 1
 */
      __pyx_v_ptr = (__pyx_v_ptr + 1);

      /* "_state.pxd":136
 *                 ptr += ptr.head
 * 
 *             elif ptr + ptr.head == target:             # <<<<<<<<<<<<<<
 *                 idx -= 1
 *                 if idx == 0:
 */
      goto __pyx_L10;
    }

    /* "_state.pxd":142
 *                 ptr += 1
 *             else:
 *                 ptr += 1             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    /*else*/ {
      __pyx_v_ptr = (__pyx_v_ptr + 1);
    }
    __pyx_L10:;
  }

  /* "_state.pxd":143
 *             else:
 *                 ptr += 1
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     int R(int i, int idx) nogil const:
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "_state.pxd":119
 *         return this._ents[this._e_i - (i+1)].start
 * 
 *     int L(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         if idx < 1:
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.L", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":145
 *         return -1
 * 
 *     int R(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         if idx < 1:
 *             return -1
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::R(int __pyx_v_i, int __pyx_v_idx) const {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_target;
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_ptr;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("R", __pyx_f[3], 145, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":146
 * 
 *     int R(int i, int idx) nogil const:
 *         if idx < 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         if i < 0 or i >= this.length:
 */
  __pyx_t_1 = ((__pyx_v_idx < 1) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":147
 *     int R(int i, int idx) nogil const:
 *         if idx < 1:
 *             return -1             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= this.length:
 *             return -1
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":146
 * 
 *     int R(int i, int idx) nogil const:
 *         if idx < 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         if i < 0 or i >= this.length:
 */
  }

  /* "_state.pxd":148
 *         if idx < 1:
 *             return -1
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_state.pxd":149
 *             return -1
 *         if i < 0 or i >= this.length:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.r_kids < <uint32_t>idx:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":148
 *         if idx < 1:
 *             return -1
 *         if i < 0 or i >= this.length:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 */
  }

  /* "_state.pxd":150
 *         if i < 0 or i >= this.length:
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]             # <<<<<<<<<<<<<<
 *         if target.r_kids < <uint32_t>idx:
 *             return -1
 */
  __pyx_v_target = (&(this->_sent[__pyx_v_i]));

  /* "_state.pxd":151
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.r_kids < <uint32_t>idx:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.r_edge]
 */
  __pyx_t_1 = ((__pyx_v_target->r_kids < ((uint32_t)__pyx_v_idx)) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":152
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.r_kids < <uint32_t>idx:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef const TokenC* ptr = &this._sent[target.r_edge]
 *         while ptr > target:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "_state.pxd":151
 *             return -1
 *         cdef const TokenC* target = &this._sent[i]
 *         if target.r_kids < <uint32_t>idx:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.r_edge]
 */
  }

  /* "_state.pxd":153
 *         if target.r_kids < <uint32_t>idx:
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.r_edge]             # <<<<<<<<<<<<<<
 *         while ptr > target:
 *             # If this head is still to the right of us, we can skip to it
 */
  __pyx_v_ptr = (&(this->_sent[__pyx_v_target->r_edge]));

  /* "_state.pxd":154
 *             return -1
 *         cdef const TokenC* ptr = &this._sent[target.r_edge]
 *         while ptr > target:             # <<<<<<<<<<<<<<
 *             # If this head is still to the right of us, we can skip to it
 *             # No token that's between this token and this head could be our
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_ptr > __pyx_v_target) != 0);
    if (!__pyx_t_1) break;

    /* "_state.pxd":158
 *             # No token that's between this token and this head could be our
 *             # child.
 *             if (ptr.head < 0) and ((ptr + ptr.head) > target):             # <<<<<<<<<<<<<<
 *                 ptr += ptr.head
 *             elif ptr + ptr.head == target:
 */
    __pyx_t_2 = ((__pyx_v_ptr->head < 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_ptr + __pyx_v_ptr->head) > __pyx_v_target) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "_state.pxd":159
 *             # child.
 *             if (ptr.head < 0) and ((ptr + ptr.head) > target):
 *                 ptr += ptr.head             # <<<<<<<<<<<<<<
 *             elif ptr + ptr.head == target:
 *                 idx -= 1
 */
      __pyx_v_ptr = (__pyx_v_ptr + __pyx_v_ptr->head);

      /* "_state.pxd":158
 *             # No token that's between this token and this head could be our
 *             # child.
 *             if (ptr.head < 0) and ((ptr + ptr.head) > target):             # <<<<<<<<<<<<<<
 *                 ptr += ptr.head
 *             elif ptr + ptr.head == target:
 */
      goto __pyx_L10;
    }

    /* "_state.pxd":160
 *             if (ptr.head < 0) and ((ptr + ptr.head) > target):
 *                 ptr += ptr.head
 *             elif ptr + ptr.head == target:             # <<<<<<<<<<<<<<
 *                 idx -= 1
 *                 if idx == 0:
 */
    __pyx_t_1 = (((__pyx_v_ptr + __pyx_v_ptr->head) == __pyx_v_target) != 0);
    if (__pyx_t_1) {

      /* "_state.pxd":161
 *                 ptr += ptr.head
 *             elif ptr + ptr.head == target:
 *                 idx -= 1             # <<<<<<<<<<<<<<
 *                 if idx == 0:
 *                     return ptr - this._sent
 */
      __pyx_v_idx = (__pyx_v_idx - 1);

      /* "_state.pxd":162
 *             elif ptr + ptr.head == target:
 *                 idx -= 1
 *                 if idx == 0:             # <<<<<<<<<<<<<<
 *                     return ptr - this._sent
 *                 ptr -= 1
 */
      __pyx_t_1 = ((__pyx_v_idx == 0) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":163
 *                 idx -= 1
 *                 if idx == 0:
 *                     return ptr - this._sent             # <<<<<<<<<<<<<<
 *                 ptr -= 1
 *             else:
 */
        __pyx_r = (__pyx_v_ptr - this->_sent);
        goto __pyx_L0;

        /* "_state.pxd":162
 *             elif ptr + ptr.head == target:
 *                 idx -= 1
 *                 if idx == 0:             # <<<<<<<<<<<<<<
 *                     return ptr - this._sent
 *                 ptr -= 1
 */
      }

      /* "_state.pxd":164
 *                 if idx == 0:
 *                     return ptr - this._sent
 *                 ptr -= 1             # <<<<<<<<<<<<<<
 *             else:
 *                 ptr -= 1
 */
      __pyx_v_ptr = (__pyx_v_ptr - 1);

      /* "_state.pxd":160
 *             if (ptr.head < 0) and ((ptr + ptr.head) > target):
 *                 ptr += ptr.head
 *             elif ptr + ptr.head == target:             # <<<<<<<<<<<<<<
 *                 idx -= 1
 *                 if idx == 0:
 */
      goto __pyx_L10;
    }

    /* "_state.pxd":166
 *                 ptr -= 1
 *             else:
 *                 ptr -= 1             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    /*else*/ {
      __pyx_v_ptr = (__pyx_v_ptr - 1);
    }
    __pyx_L10:;
  }

  /* "_state.pxd":167
 *             else:
 *                 ptr -= 1
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     bint empty() nogil const:
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "_state.pxd":145
 *         return -1
 * 
 *     int R(int i, int idx) nogil const:             # <<<<<<<<<<<<<<
 *         if idx < 1:
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.R", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":169
 *         return -1
 * 
 *     bint empty() nogil const:             # <<<<<<<<<<<<<<
 *         return this._s_i <= 0
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::empty(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("empty", __pyx_f[3], 169, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":170
 * 
 *     bint empty() nogil const:
 *         return this._s_i <= 0             # <<<<<<<<<<<<<<
 * 
 *     bint eol() nogil const:
 */
  __pyx_r = (this->_s_i <= 0);
  goto __pyx_L0;

  /* "_state.pxd":169
 *         return -1
 * 
 *     bint empty() nogil const:             # <<<<<<<<<<<<<<
 *         return this._s_i <= 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.empty", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":172
 *         return this._s_i <= 0
 * 
 *     bint eol() nogil const:             # <<<<<<<<<<<<<<
 *         return this.buffer_length() == 0
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::eol(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("eol", __pyx_f[3], 172, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":173
 * 
 *     bint eol() nogil const:
 *         return this.buffer_length() == 0             # <<<<<<<<<<<<<<
 * 
 *     bint at_break() nogil const:
 */
  __pyx_r = (this->buffer_length() == 0);
  goto __pyx_L0;

  /* "_state.pxd":172
 *         return this._s_i <= 0
 * 
 *     bint eol() nogil const:             # <<<<<<<<<<<<<<
 *         return this.buffer_length() == 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.eol", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":175
 *         return this.buffer_length() == 0
 * 
 *     bint at_break() nogil const:             # <<<<<<<<<<<<<<
 *         return this._break != -1
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::at_break(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("at_break", __pyx_f[3], 175, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":176
 * 
 *     bint at_break() nogil const:
 *         return this._break != -1             # <<<<<<<<<<<<<<
 * 
 *     bint is_final() nogil const:
 */
  __pyx_r = (this->_break != -1L);
  goto __pyx_L0;

  /* "_state.pxd":175
 *         return this.buffer_length() == 0
 * 
 *     bint at_break() nogil const:             # <<<<<<<<<<<<<<
 *         return this._break != -1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.at_break", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":178
 *         return this._break != -1
 * 
 *     bint is_final() nogil const:             # <<<<<<<<<<<<<<
 *         return this.stack_depth() <= 0 and this._b_i >= this.length
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::is_final(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_final", __pyx_f[3], 178, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":179
 * 
 *     bint is_final() nogil const:
 *         return this.stack_depth() <= 0 and this._b_i >= this.length             # <<<<<<<<<<<<<<
 * 
 *     bint has_head(int i) nogil const:
 */
  __pyx_t_2 = ((this->stack_depth() <= 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((this->_b_i >= this->length) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "_state.pxd":178
 *         return this._break != -1
 * 
 *     bint is_final() nogil const:             # <<<<<<<<<<<<<<
 *         return this.stack_depth() <= 0 and this._b_i >= this.length
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.is_final", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":181
 *         return this.stack_depth() <= 0 and this._b_i >= this.length
 * 
 *     bint has_head(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).head != 0
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::has_head(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("has_head", __pyx_f[3], 181, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":182
 * 
 *     bint has_head(int i) nogil const:
 *         return this.safe_get(i).head != 0             # <<<<<<<<<<<<<<
 * 
 *     int n_L(int i) nogil const:
 */
  __pyx_r = (this->safe_get(__pyx_v_i)->head != 0);
  goto __pyx_L0;

  /* "_state.pxd":181
 *         return this.stack_depth() <= 0 and this._b_i >= this.length
 * 
 *     bint has_head(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).head != 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.has_head", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":184
 *         return this.safe_get(i).head != 0
 * 
 *     int n_L(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).l_kids
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::n_L(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("n_L", __pyx_f[3], 184, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":185
 * 
 *     int n_L(int i) nogil const:
 *         return this.safe_get(i).l_kids             # <<<<<<<<<<<<<<
 * 
 *     int n_R(int i) nogil const:
 */
  __pyx_r = this->safe_get(__pyx_v_i)->l_kids;
  goto __pyx_L0;

  /* "_state.pxd":184
 *         return this.safe_get(i).head != 0
 * 
 *     int n_L(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).l_kids
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.n_L", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":187
 *         return this.safe_get(i).l_kids
 * 
 *     int n_R(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).r_kids
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::n_R(int __pyx_v_i) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("n_R", __pyx_f[3], 187, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":188
 * 
 *     int n_R(int i) nogil const:
 *         return this.safe_get(i).r_kids             # <<<<<<<<<<<<<<
 * 
 *     bint stack_is_connected() nogil const:
 */
  __pyx_r = this->safe_get(__pyx_v_i)->r_kids;
  goto __pyx_L0;

  /* "_state.pxd":187
 *         return this.safe_get(i).l_kids
 * 
 *     int n_R(int i) nogil const:             # <<<<<<<<<<<<<<
 *         return this.safe_get(i).r_kids
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.n_R", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":190
 *         return this.safe_get(i).r_kids
 * 
 *     bint stack_is_connected() nogil const:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::stack_is_connected(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("stack_is_connected", __pyx_f[3], 190, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":191
 * 
 *     bint stack_is_connected() nogil const:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     bint entity_is_open() nogil const:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "_state.pxd":190
 *         return this.safe_get(i).r_kids
 * 
 *     bint stack_is_connected() nogil const:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.stack_is_connected", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":193
 *         return False
 * 
 *     bint entity_is_open() nogil const:             # <<<<<<<<<<<<<<
 *         if this._e_i < 1:
 *             return False
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::entity_is_open(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("entity_is_open", __pyx_f[3], 193, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":194
 * 
 *     bint entity_is_open() nogil const:
 *         if this._e_i < 1:             # <<<<<<<<<<<<<<
 *             return False
 *         return this._ents[this._e_i-1].end == -1
 */
  __pyx_t_1 = ((this->_e_i < 1) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":195
 *     bint entity_is_open() nogil const:
 *         if this._e_i < 1:
 *             return False             # <<<<<<<<<<<<<<
 *         return this._ents[this._e_i-1].end == -1
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "_state.pxd":194
 * 
 *     bint entity_is_open() nogil const:
 *         if this._e_i < 1:             # <<<<<<<<<<<<<<
 *             return False
 *         return this._ents[this._e_i-1].end == -1
 */
  }

  /* "_state.pxd":196
 *         if this._e_i < 1:
 *             return False
 *         return this._ents[this._e_i-1].end == -1             # <<<<<<<<<<<<<<
 * 
 *     int stack_depth() nogil const:
 */
  __pyx_r = ((this->_ents[(this->_e_i - 1)]).end == -1L);
  goto __pyx_L0;

  /* "_state.pxd":193
 *         return False
 * 
 *     bint entity_is_open() nogil const:             # <<<<<<<<<<<<<<
 *         if this._e_i < 1:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.entity_is_open", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":198
 *         return this._ents[this._e_i-1].end == -1
 * 
 *     int stack_depth() nogil const:             # <<<<<<<<<<<<<<
 *         return this._s_i
 * 
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::stack_depth(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("stack_depth", __pyx_f[3], 198, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":199
 * 
 *     int stack_depth() nogil const:
 *         return this._s_i             # <<<<<<<<<<<<<<
 * 
 *     int buffer_length() nogil const:
 */
  __pyx_r = this->_s_i;
  goto __pyx_L0;

  /* "_state.pxd":198
 *         return this._ents[this._e_i-1].end == -1
 * 
 *     int stack_depth() nogil const:             # <<<<<<<<<<<<<<
 *         return this._s_i
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.stack_depth", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":201
 *         return this._s_i
 * 
 *     int buffer_length() nogil const:             # <<<<<<<<<<<<<<
 *         if this._break != -1:
 *             return this._break - this._b_i
 */

int __pyx_t_5spacy_6syntax_6_state_StateC::buffer_length(void) const {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("buffer_length", __pyx_f[3], 201, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":202
 * 
 *     int buffer_length() nogil const:
 *         if this._break != -1:             # <<<<<<<<<<<<<<
 *             return this._break - this._b_i
 *         else:
 */
  __pyx_t_1 = ((this->_break != -1L) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":203
 *     int buffer_length() nogil const:
 *         if this._break != -1:
 *             return this._break - this._b_i             # <<<<<<<<<<<<<<
 *         else:
 *             return this.length - this._b_i
 */
    __pyx_r = (this->_break - this->_b_i);
    goto __pyx_L0;

    /* "_state.pxd":202
 * 
 *     int buffer_length() nogil const:
 *         if this._break != -1:             # <<<<<<<<<<<<<<
 *             return this._break - this._b_i
 *         else:
 */
  }

  /* "_state.pxd":205
 *             return this._break - this._b_i
 *         else:
 *             return this.length - this._b_i             # <<<<<<<<<<<<<<
 * 
 *     uint64_t hash() nogil const:
 */
  /*else*/ {
    __pyx_r = (this->length - this->_b_i);
    goto __pyx_L0;
  }

  /* "_state.pxd":201
 *         return this._s_i
 * 
 *     int buffer_length() nogil const:             # <<<<<<<<<<<<<<
 *         if this._break != -1:
 *             return this._break - this._b_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.buffer_length", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":207
 *             return this.length - this._b_i
 * 
 *     uint64_t hash() nogil const:             # <<<<<<<<<<<<<<
 *         cdef TokenC[11] sig
 *         sig[0] = this.S_(2)[0]
 */

uint64_t __pyx_t_5spacy_6syntax_6_state_StateC::hash(void) const {
  struct __pyx_t_5spacy_7structs_TokenC __pyx_v_sig[11];
  uint64_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("hash", __pyx_f[3], 207, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":209
 *     uint64_t hash() nogil const:
 *         cdef TokenC[11] sig
 *         sig[0] = this.S_(2)[0]             # <<<<<<<<<<<<<<
 *         sig[1] = this.S_(1)[0]
 *         sig[2] = this.R_(this.S(1), 1)[0]
 */
  (__pyx_v_sig[0]) = (this->S_(2)[0]);

  /* "_state.pxd":210
 *         cdef TokenC[11] sig
 *         sig[0] = this.S_(2)[0]
 *         sig[1] = this.S_(1)[0]             # <<<<<<<<<<<<<<
 *         sig[2] = this.R_(this.S(1), 1)[0]
 *         sig[3] = this.L_(this.S(0), 1)[0]
 */
  (__pyx_v_sig[1]) = (this->S_(1)[0]);

  /* "_state.pxd":211
 *         sig[0] = this.S_(2)[0]
 *         sig[1] = this.S_(1)[0]
 *         sig[2] = this.R_(this.S(1), 1)[0]             # <<<<<<<<<<<<<<
 *         sig[3] = this.L_(this.S(0), 1)[0]
 *         sig[4] = this.L_(this.S(0), 2)[0]
 */
  (__pyx_v_sig[2]) = (this->R_(this->S(1), 1)[0]);

  /* "_state.pxd":212
 *         sig[1] = this.S_(1)[0]
 *         sig[2] = this.R_(this.S(1), 1)[0]
 *         sig[3] = this.L_(this.S(0), 1)[0]             # <<<<<<<<<<<<<<
 *         sig[4] = this.L_(this.S(0), 2)[0]
 *         sig[5] = this.S_(0)[0]
 */
  (__pyx_v_sig[3]) = (this->L_(this->S(0), 1)[0]);

  /* "_state.pxd":213
 *         sig[2] = this.R_(this.S(1), 1)[0]
 *         sig[3] = this.L_(this.S(0), 1)[0]
 *         sig[4] = this.L_(this.S(0), 2)[0]             # <<<<<<<<<<<<<<
 *         sig[5] = this.S_(0)[0]
 *         sig[6] = this.R_(this.S(0), 2)[0]
 */
  (__pyx_v_sig[4]) = (this->L_(this->S(0), 2)[0]);

  /* "_state.pxd":214
 *         sig[3] = this.L_(this.S(0), 1)[0]
 *         sig[4] = this.L_(this.S(0), 2)[0]
 *         sig[5] = this.S_(0)[0]             # <<<<<<<<<<<<<<
 *         sig[6] = this.R_(this.S(0), 2)[0]
 *         sig[7] = this.R_(this.S(0), 1)[0]
 */
  (__pyx_v_sig[5]) = (this->S_(0)[0]);

  /* "_state.pxd":215
 *         sig[4] = this.L_(this.S(0), 2)[0]
 *         sig[5] = this.S_(0)[0]
 *         sig[6] = this.R_(this.S(0), 2)[0]             # <<<<<<<<<<<<<<
 *         sig[7] = this.R_(this.S(0), 1)[0]
 *         sig[8] = this.B_(0)[0]
 */
  (__pyx_v_sig[6]) = (this->R_(this->S(0), 2)[0]);

  /* "_state.pxd":216
 *         sig[5] = this.S_(0)[0]
 *         sig[6] = this.R_(this.S(0), 2)[0]
 *         sig[7] = this.R_(this.S(0), 1)[0]             # <<<<<<<<<<<<<<
 *         sig[8] = this.B_(0)[0]
 *         sig[9] = this.E_(0)[0]
 */
  (__pyx_v_sig[7]) = (this->R_(this->S(0), 1)[0]);

  /* "_state.pxd":217
 *         sig[6] = this.R_(this.S(0), 2)[0]
 *         sig[7] = this.R_(this.S(0), 1)[0]
 *         sig[8] = this.B_(0)[0]             # <<<<<<<<<<<<<<
 *         sig[9] = this.E_(0)[0]
 *         sig[10] = this.E_(1)[0]
 */
  (__pyx_v_sig[8]) = (this->B_(0)[0]);

  /* "_state.pxd":218
 *         sig[7] = this.R_(this.S(0), 1)[0]
 *         sig[8] = this.B_(0)[0]
 *         sig[9] = this.E_(0)[0]             # <<<<<<<<<<<<<<
 *         sig[10] = this.E_(1)[0]
 *         return hash64(sig, sizeof(sig), this._s_i)
 */
  (__pyx_v_sig[9]) = (this->E_(0)[0]);

  /* "_state.pxd":219
 *         sig[8] = this.B_(0)[0]
 *         sig[9] = this.E_(0)[0]
 *         sig[10] = this.E_(1)[0]             # <<<<<<<<<<<<<<
 *         return hash64(sig, sizeof(sig), this._s_i)
 * 
 */
  (__pyx_v_sig[10]) = (this->E_(1)[0]);

  /* "_state.pxd":220
 *         sig[9] = this.E_(0)[0]
 *         sig[10] = this.E_(1)[0]
 *         return hash64(sig, sizeof(sig), this._s_i)             # <<<<<<<<<<<<<<
 * 
 *     void push() nogil:
 */
  __pyx_r = __pyx_f_10murmurhash_4mrmr_hash64(__pyx_v_sig, (sizeof(__pyx_v_sig)), this->_s_i);
  goto __pyx_L0;

  /* "_state.pxd":207
 *             return this.length - this._b_i
 * 
 *     uint64_t hash() nogil const:             # <<<<<<<<<<<<<<
 *         cdef TokenC[11] sig
 *         sig[0] = this.S_(2)[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.hash", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "_state.pxd":222
 *         return hash64(sig, sizeof(sig), this._s_i)
 * 
 *     void push() nogil:             # <<<<<<<<<<<<<<
 *         if this.B(0) != -1:
 *             this._stack[this._s_i] = this.B(0)
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::push(void) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("push", __pyx_f[3], 222, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":223
 * 
 *     void push() nogil:
 *         if this.B(0) != -1:             # <<<<<<<<<<<<<<
 *             this._stack[this._s_i] = this.B(0)
 *         this._s_i += 1
 */
  __pyx_t_1 = ((this->B(0) != -1L) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":224
 *     void push() nogil:
 *         if this.B(0) != -1:
 *             this._stack[this._s_i] = this.B(0)             # <<<<<<<<<<<<<<
 *         this._s_i += 1
 *         this._b_i += 1
 */
    (this->_stack[this->_s_i]) = this->B(0);

    /* "_state.pxd":223
 * 
 *     void push() nogil:
 *         if this.B(0) != -1:             # <<<<<<<<<<<<<<
 *             this._stack[this._s_i] = this.B(0)
 *         this._s_i += 1
 */
  }

  /* "_state.pxd":225
 *         if this.B(0) != -1:
 *             this._stack[this._s_i] = this.B(0)
 *         this._s_i += 1             # <<<<<<<<<<<<<<
 *         this._b_i += 1
 *         if this._b_i > this._break:
 */
  this->_s_i = (this->_s_i + 1);

  /* "_state.pxd":226
 *             this._stack[this._s_i] = this.B(0)
 *         this._s_i += 1
 *         this._b_i += 1             # <<<<<<<<<<<<<<
 *         if this._b_i > this._break:
 *             this._break = -1
 */
  this->_b_i = (this->_b_i + 1);

  /* "_state.pxd":227
 *         this._s_i += 1
 *         this._b_i += 1
 *         if this._b_i > this._break:             # <<<<<<<<<<<<<<
 *             this._break = -1
 * 
 */
  __pyx_t_1 = ((this->_b_i > this->_break) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":228
 *         this._b_i += 1
 *         if this._b_i > this._break:
 *             this._break = -1             # <<<<<<<<<<<<<<
 * 
 *     void pop() nogil:
 */
    this->_break = -1;

    /* "_state.pxd":227
 *         this._s_i += 1
 *         this._b_i += 1
 *         if this._b_i > this._break:             # <<<<<<<<<<<<<<
 *             this._break = -1
 * 
 */
  }

  /* "_state.pxd":222
 *         return hash64(sig, sizeof(sig), this._s_i)
 * 
 *     void push() nogil:             # <<<<<<<<<<<<<<
 *         if this.B(0) != -1:
 *             this._stack[this._s_i] = this.B(0)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.push", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":230
 *             this._break = -1
 * 
 *     void pop() nogil:             # <<<<<<<<<<<<<<
 *         if this._s_i >= 1:
 *             this._s_i -= 1
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::pop(void) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("pop", __pyx_f[3], 230, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":231
 * 
 *     void pop() nogil:
 *         if this._s_i >= 1:             # <<<<<<<<<<<<<<
 *             this._s_i -= 1
 * 
 */
  __pyx_t_1 = ((this->_s_i >= 1) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":232
 *     void pop() nogil:
 *         if this._s_i >= 1:
 *             this._s_i -= 1             # <<<<<<<<<<<<<<
 * 
 *     void unshift() nogil:
 */
    this->_s_i = (this->_s_i - 1);

    /* "_state.pxd":231
 * 
 *     void pop() nogil:
 *         if this._s_i >= 1:             # <<<<<<<<<<<<<<
 *             this._s_i -= 1
 * 
 */
  }

  /* "_state.pxd":230
 *             this._break = -1
 * 
 *     void pop() nogil:             # <<<<<<<<<<<<<<
 *         if this._s_i >= 1:
 *             this._s_i -= 1
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.pop", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":234
 *             this._s_i -= 1
 * 
 *     void unshift() nogil:             # <<<<<<<<<<<<<<
 *         this._b_i -= 1
 *         this._buffer[this._b_i] = this.S(0)
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::unshift(void) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("unshift", __pyx_f[3], 234, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":235
 * 
 *     void unshift() nogil:
 *         this._b_i -= 1             # <<<<<<<<<<<<<<
 *         this._buffer[this._b_i] = this.S(0)
 *         this._s_i -= 1
 */
  this->_b_i = (this->_b_i - 1);

  /* "_state.pxd":236
 *     void unshift() nogil:
 *         this._b_i -= 1
 *         this._buffer[this._b_i] = this.S(0)             # <<<<<<<<<<<<<<
 *         this._s_i -= 1
 *         this.shifted[this.B(0)] = True
 */
  (this->_buffer[this->_b_i]) = this->S(0);

  /* "_state.pxd":237
 *         this._b_i -= 1
 *         this._buffer[this._b_i] = this.S(0)
 *         this._s_i -= 1             # <<<<<<<<<<<<<<
 *         this.shifted[this.B(0)] = True
 * 
 */
  this->_s_i = (this->_s_i - 1);

  /* "_state.pxd":238
 *         this._buffer[this._b_i] = this.S(0)
 *         this._s_i -= 1
 *         this.shifted[this.B(0)] = True             # <<<<<<<<<<<<<<
 * 
 *     void add_arc(int head, int child, int label) nogil:
 */
  (this->shifted[this->B(0)]) = 1;

  /* "_state.pxd":234
 *             this._s_i -= 1
 * 
 *     void unshift() nogil:             # <<<<<<<<<<<<<<
 *         this._b_i -= 1
 *         this._buffer[this._b_i] = this.S(0)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.unshift", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":240
 *         this.shifted[this.B(0)] = True
 * 
 *     void add_arc(int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *         if this.has_head(child):
 *             this.del_arc(this.H(child), child)
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::add_arc(int __pyx_v_head, int __pyx_v_child, int __pyx_v_label) {
  int __pyx_v_dist;
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  uint32_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("add_arc", __pyx_f[3], 240, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":241
 * 
 *     void add_arc(int head, int child, int label) nogil:
 *         if this.has_head(child):             # <<<<<<<<<<<<<<
 *             this.del_arc(this.H(child), child)
 * 
 */
  __pyx_t_1 = (this->has_head(__pyx_v_child) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":242
 *     void add_arc(int head, int child, int label) nogil:
 *         if this.has_head(child):
 *             this.del_arc(this.H(child), child)             # <<<<<<<<<<<<<<
 * 
 *         cdef int dist = head - child
 */
    this->del_arc(this->H(__pyx_v_child), __pyx_v_child);

    /* "_state.pxd":241
 * 
 *     void add_arc(int head, int child, int label) nogil:
 *         if this.has_head(child):             # <<<<<<<<<<<<<<
 *             this.del_arc(this.H(child), child)
 * 
 */
  }

  /* "_state.pxd":244
 *             this.del_arc(this.H(child), child)
 * 
 *         cdef int dist = head - child             # <<<<<<<<<<<<<<
 *         this._sent[child].head = dist
 *         this._sent[child].dep = label
 */
  __pyx_v_dist = (__pyx_v_head - __pyx_v_child);

  /* "_state.pxd":245
 * 
 *         cdef int dist = head - child
 *         this._sent[child].head = dist             # <<<<<<<<<<<<<<
 *         this._sent[child].dep = label
 *         cdef int i
 */
  (this->_sent[__pyx_v_child]).head = __pyx_v_dist;

  /* "_state.pxd":246
 *         cdef int dist = head - child
 *         this._sent[child].head = dist
 *         this._sent[child].dep = label             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if child > head:
 */
  (this->_sent[__pyx_v_child]).dep = __pyx_v_label;

  /* "_state.pxd":248
 *         this._sent[child].dep = label
 *         cdef int i
 *         if child > head:             # <<<<<<<<<<<<<<
 *             this._sent[head].r_kids += 1
 *             # Some transition systems can have a word in the buffer have a
 */
  __pyx_t_1 = ((__pyx_v_child > __pyx_v_head) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":249
 *         cdef int i
 *         if child > head:
 *             this._sent[head].r_kids += 1             # <<<<<<<<<<<<<<
 *             # Some transition systems can have a word in the buffer have a
 *             # rightward child, e.g. from Unshift.
 */
    __pyx_t_2 = __pyx_v_head;
    (this->_sent[__pyx_t_2]).r_kids = ((this->_sent[__pyx_t_2]).r_kids + 1);

    /* "_state.pxd":252
 *             # Some transition systems can have a word in the buffer have a
 *             # rightward child, e.g. from Unshift.
 *             this._sent[head].r_edge = this._sent[child].r_edge             # <<<<<<<<<<<<<<
 *             i = 0
 *             while this.has_head(head) and i < this.length:
 */
    __pyx_t_3 = (this->_sent[__pyx_v_child]).r_edge;
    (this->_sent[__pyx_v_head]).r_edge = __pyx_t_3;

    /* "_state.pxd":253
 *             # rightward child, e.g. from Unshift.
 *             this._sent[head].r_edge = this._sent[child].r_edge
 *             i = 0             # <<<<<<<<<<<<<<
 *             while this.has_head(head) and i < this.length:
 *                 head = this.H(head)
 */
    __pyx_v_i = 0;

    /* "_state.pxd":254
 *             this._sent[head].r_edge = this._sent[child].r_edge
 *             i = 0
 *             while this.has_head(head) and i < this.length:             # <<<<<<<<<<<<<<
 *                 head = this.H(head)
 *                 this._sent[head].r_edge = this._sent[child].r_edge
 */
    while (1) {
      __pyx_t_4 = (this->has_head(__pyx_v_head) != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_4 = ((__pyx_v_i < this->length) != 0);
      __pyx_t_1 = __pyx_t_4;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "_state.pxd":255
 *             i = 0
 *             while this.has_head(head) and i < this.length:
 *                 head = this.H(head)             # <<<<<<<<<<<<<<
 *                 this._sent[head].r_edge = this._sent[child].r_edge
 *                 i += 1 # Guard against infinite loops
 */
      __pyx_v_head = this->H(__pyx_v_head);

      /* "_state.pxd":256
 *             while this.has_head(head) and i < this.length:
 *                 head = this.H(head)
 *                 this._sent[head].r_edge = this._sent[child].r_edge             # <<<<<<<<<<<<<<
 *                 i += 1 # Guard against infinite loops
 *         else:
 */
      __pyx_t_3 = (this->_sent[__pyx_v_child]).r_edge;
      (this->_sent[__pyx_v_head]).r_edge = __pyx_t_3;

      /* "_state.pxd":257
 *                 head = this.H(head)
 *                 this._sent[head].r_edge = this._sent[child].r_edge
 *                 i += 1 # Guard against infinite loops             # <<<<<<<<<<<<<<
 *         else:
 *             this._sent[head].l_kids += 1
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "_state.pxd":248
 *         this._sent[child].dep = label
 *         cdef int i
 *         if child > head:             # <<<<<<<<<<<<<<
 *             this._sent[head].r_kids += 1
 *             # Some transition systems can have a word in the buffer have a
 */
    goto __pyx_L4;
  }

  /* "_state.pxd":259
 *                 i += 1 # Guard against infinite loops
 *         else:
 *             this._sent[head].l_kids += 1             # <<<<<<<<<<<<<<
 *             this._sent[head].l_edge = this._sent[child].l_edge
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_head;
    (this->_sent[__pyx_t_2]).l_kids = ((this->_sent[__pyx_t_2]).l_kids + 1);

    /* "_state.pxd":260
 *         else:
 *             this._sent[head].l_kids += 1
 *             this._sent[head].l_edge = this._sent[child].l_edge             # <<<<<<<<<<<<<<
 * 
 *     void del_arc(int h_i, int c_i) nogil:
 */
    __pyx_t_3 = (this->_sent[__pyx_v_child]).l_edge;
    (this->_sent[__pyx_v_head]).l_edge = __pyx_t_3;
  }
  __pyx_L4:;

  /* "_state.pxd":240
 *         this.shifted[this.B(0)] = True
 * 
 *     void add_arc(int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *         if this.has_head(child):
 *             this.del_arc(this.H(child), child)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.add_arc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":262
 *             this._sent[head].l_edge = this._sent[child].l_edge
 * 
 *     void del_arc(int h_i, int c_i) nogil:             # <<<<<<<<<<<<<<
 *         cdef int dist = h_i - c_i
 *         cdef TokenC* h = &this._sent[h_i]
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::del_arc(int __pyx_v_h_i, int __pyx_v_c_i) {
  CYTHON_UNUSED int __pyx_v_dist;
  struct __pyx_t_5spacy_7structs_TokenC *__pyx_v_h;
  int __pyx_v_i;
  uint32_t __pyx_v_new_edge;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("del_arc", __pyx_f[3], 262, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":263
 * 
 *     void del_arc(int h_i, int c_i) nogil:
 *         cdef int dist = h_i - c_i             # <<<<<<<<<<<<<<
 *         cdef TokenC* h = &this._sent[h_i]
 *         cdef int i = 0
 */
  __pyx_v_dist = (__pyx_v_h_i - __pyx_v_c_i);

  /* "_state.pxd":264
 *     void del_arc(int h_i, int c_i) nogil:
 *         cdef int dist = h_i - c_i
 *         cdef TokenC* h = &this._sent[h_i]             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         if c_i > h_i:
 */
  __pyx_v_h = (&(this->_sent[__pyx_v_h_i]));

  /* "_state.pxd":265
 *         cdef int dist = h_i - c_i
 *         cdef TokenC* h = &this._sent[h_i]
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         if c_i > h_i:
 *             # this.R_(h_i, 2) returns the second-rightmost child token of h_i
 */
  __pyx_v_i = 0;

  /* "_state.pxd":266
 *         cdef TokenC* h = &this._sent[h_i]
 *         cdef int i = 0
 *         if c_i > h_i:             # <<<<<<<<<<<<<<
 *             # this.R_(h_i, 2) returns the second-rightmost child token of h_i
 *             # If we have more than 2 rightmost children, our 2nd rightmost child's
 */
  __pyx_t_1 = ((__pyx_v_c_i > __pyx_v_h_i) != 0);
  if (__pyx_t_1) {

    /* "_state.pxd":270
 *             # If we have more than 2 rightmost children, our 2nd rightmost child's
 *             # rightmost edge is going to be our new rightmost edge.
 *             h.r_edge = this.R_(h_i, 2).r_edge if h.r_kids >= 2 else h_i             # <<<<<<<<<<<<<<
 *             h.r_kids -= 1
 *             new_edge = h.r_edge
 */
    if (((__pyx_v_h->r_kids >= 2) != 0)) {
      __pyx_t_2 = this->R_(__pyx_v_h_i, 2)->r_edge;
    } else {
      __pyx_t_2 = __pyx_v_h_i;
    }
    __pyx_v_h->r_edge = __pyx_t_2;

    /* "_state.pxd":271
 *             # rightmost edge is going to be our new rightmost edge.
 *             h.r_edge = this.R_(h_i, 2).r_edge if h.r_kids >= 2 else h_i
 *             h.r_kids -= 1             # <<<<<<<<<<<<<<
 *             new_edge = h.r_edge
 *             # Correct upwards in the tree --- see Issue #251
 */
    __pyx_v_h->r_kids = (__pyx_v_h->r_kids - 1);

    /* "_state.pxd":272
 *             h.r_edge = this.R_(h_i, 2).r_edge if h.r_kids >= 2 else h_i
 *             h.r_kids -= 1
 *             new_edge = h.r_edge             # <<<<<<<<<<<<<<
 *             # Correct upwards in the tree --- see Issue #251
 *             while h.head < 0 and i < this.length: # Guard infinite loop
 */
    __pyx_t_2 = __pyx_v_h->r_edge;
    __pyx_v_new_edge = __pyx_t_2;

    /* "_state.pxd":274
 *             new_edge = h.r_edge
 *             # Correct upwards in the tree --- see Issue #251
 *             while h.head < 0 and i < this.length: # Guard infinite loop             # <<<<<<<<<<<<<<
 *                 h += h.head
 *                 h.r_edge = new_edge
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_h->head < 0) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_i < this->length) != 0);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L6_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "_state.pxd":275
 *             # Correct upwards in the tree --- see Issue #251
 *             while h.head < 0 and i < this.length: # Guard infinite loop
 *                 h += h.head             # <<<<<<<<<<<<<<
 *                 h.r_edge = new_edge
 *                 i += 1
 */
      __pyx_v_h = (__pyx_v_h + __pyx_v_h->head);

      /* "_state.pxd":276
 *             while h.head < 0 and i < this.length: # Guard infinite loop
 *                 h += h.head
 *                 h.r_edge = new_edge             # <<<<<<<<<<<<<<
 *                 i += 1
 *         else:
 */
      __pyx_v_h->r_edge = __pyx_v_new_edge;

      /* "_state.pxd":277
 *                 h += h.head
 *                 h.r_edge = new_edge
 *                 i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Same logic applies for left edge, but we don't need to walk up
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "_state.pxd":266
 *         cdef TokenC* h = &this._sent[h_i]
 *         cdef int i = 0
 *         if c_i > h_i:             # <<<<<<<<<<<<<<
 *             # this.R_(h_i, 2) returns the second-rightmost child token of h_i
 *             # If we have more than 2 rightmost children, our 2nd rightmost child's
 */
    goto __pyx_L3;
  }

  /* "_state.pxd":281
 *             # Same logic applies for left edge, but we don't need to walk up
 *             # the tree, as the head is off the stack.
 *             h.l_edge = this.L_(h_i, 2).l_edge if h.l_kids >= 2 else h_i             # <<<<<<<<<<<<<<
 *             h.l_kids -= 1
 * 
 */
  /*else*/ {
    if (((__pyx_v_h->l_kids >= 2) != 0)) {
      __pyx_t_2 = this->L_(__pyx_v_h_i, 2)->l_edge;
    } else {
      __pyx_t_2 = __pyx_v_h_i;
    }
    __pyx_v_h->l_edge = __pyx_t_2;

    /* "_state.pxd":282
 *             # the tree, as the head is off the stack.
 *             h.l_edge = this.L_(h_i, 2).l_edge if h.l_kids >= 2 else h_i
 *             h.l_kids -= 1             # <<<<<<<<<<<<<<
 * 
 *     void open_ent(int label) nogil:
 */
    __pyx_v_h->l_kids = (__pyx_v_h->l_kids - 1);
  }
  __pyx_L3:;

  /* "_state.pxd":262
 *             this._sent[head].l_edge = this._sent[child].l_edge
 * 
 *     void del_arc(int h_i, int c_i) nogil:             # <<<<<<<<<<<<<<
 *         cdef int dist = h_i - c_i
 *         cdef TokenC* h = &this._sent[h_i]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.del_arc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":284
 *             h.l_kids -= 1
 * 
 *     void open_ent(int label) nogil:             # <<<<<<<<<<<<<<
 *         this._ents[this._e_i].start = this.B(0)
 *         this._ents[this._e_i].label = label
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::open_ent(int __pyx_v_label) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("open_ent", __pyx_f[3], 284, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":285
 * 
 *     void open_ent(int label) nogil:
 *         this._ents[this._e_i].start = this.B(0)             # <<<<<<<<<<<<<<
 *         this._ents[this._e_i].label = label
 *         this._ents[this._e_i].end = -1
 */
  (this->_ents[this->_e_i]).start = this->B(0);

  /* "_state.pxd":286
 *     void open_ent(int label) nogil:
 *         this._ents[this._e_i].start = this.B(0)
 *         this._ents[this._e_i].label = label             # <<<<<<<<<<<<<<
 *         this._ents[this._e_i].end = -1
 *         this._e_i += 1
 */
  (this->_ents[this->_e_i]).label = __pyx_v_label;

  /* "_state.pxd":287
 *         this._ents[this._e_i].start = this.B(0)
 *         this._ents[this._e_i].label = label
 *         this._ents[this._e_i].end = -1             # <<<<<<<<<<<<<<
 *         this._e_i += 1
 * 
 */
  (this->_ents[this->_e_i]).end = -1;

  /* "_state.pxd":288
 *         this._ents[this._e_i].label = label
 *         this._ents[this._e_i].end = -1
 *         this._e_i += 1             # <<<<<<<<<<<<<<
 * 
 *     void close_ent() nogil:
 */
  this->_e_i = (this->_e_i + 1);

  /* "_state.pxd":284
 *             h.l_kids -= 1
 * 
 *     void open_ent(int label) nogil:             # <<<<<<<<<<<<<<
 *         this._ents[this._e_i].start = this.B(0)
 *         this._ents[this._e_i].label = label
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.open_ent", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":290
 *         this._e_i += 1
 * 
 *     void close_ent() nogil:             # <<<<<<<<<<<<<<
 *         # Note that we don't decrement _e_i here! We want to maintain all
 *         # entities, not over-write them...
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::close_ent(void) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("close_ent", __pyx_f[3], 290, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":293
 *         # Note that we don't decrement _e_i here! We want to maintain all
 *         # entities, not over-write them...
 *         this._ents[this._e_i-1].end = this.B(0)+1             # <<<<<<<<<<<<<<
 *         this._sent[this.B(0)].ent_iob = 1
 * 
 */
  (this->_ents[(this->_e_i - 1)]).end = (this->B(0) + 1);

  /* "_state.pxd":294
 *         # entities, not over-write them...
 *         this._ents[this._e_i-1].end = this.B(0)+1
 *         this._sent[this.B(0)].ent_iob = 1             # <<<<<<<<<<<<<<
 * 
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:
 */
  (this->_sent[this->B(0)]).ent_iob = 1;

  /* "_state.pxd":290
 *         this._e_i += 1
 * 
 *     void close_ent() nogil:             # <<<<<<<<<<<<<<
 *         # Note that we don't decrement _e_i here! We want to maintain all
 *         # entities, not over-write them...
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.close_ent", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":296
 *         this._sent[this.B(0)].ent_iob = 1
 * 
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:             # <<<<<<<<<<<<<<
 *         if 0 <= i < this.length:
 *             this._sent[i].ent_iob = ent_iob
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::set_ent_tag(int __pyx_v_i, int __pyx_v_ent_iob, int __pyx_v_ent_type) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_ent_tag", __pyx_f[3], 296, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":297
 * 
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:
 *         if 0 <= i < this.length:             # <<<<<<<<<<<<<<
 *             this._sent[i].ent_iob = ent_iob
 *             this._sent[i].ent_type = ent_type
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < this->length);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "_state.pxd":298
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:
 *         if 0 <= i < this.length:
 *             this._sent[i].ent_iob = ent_iob             # <<<<<<<<<<<<<<
 *             this._sent[i].ent_type = ent_type
 * 
 */
    (this->_sent[__pyx_v_i]).ent_iob = __pyx_v_ent_iob;

    /* "_state.pxd":299
 *         if 0 <= i < this.length:
 *             this._sent[i].ent_iob = ent_iob
 *             this._sent[i].ent_type = ent_type             # <<<<<<<<<<<<<<
 * 
 *     void set_break(int i) nogil:
 */
    (this->_sent[__pyx_v_i]).ent_type = __pyx_v_ent_type;

    /* "_state.pxd":297
 * 
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:
 *         if 0 <= i < this.length:             # <<<<<<<<<<<<<<
 *             this._sent[i].ent_iob = ent_iob
 *             this._sent[i].ent_type = ent_type
 */
  }

  /* "_state.pxd":296
 *         this._sent[this.B(0)].ent_iob = 1
 * 
 *     void set_ent_tag(int i, int ent_iob, int ent_type) nogil:             # <<<<<<<<<<<<<<
 *         if 0 <= i < this.length:
 *             this._sent[i].ent_iob = ent_iob
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.set_ent_tag", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":301
 *             this._sent[i].ent_type = ent_type
 * 
 *     void set_break(int i) nogil:             # <<<<<<<<<<<<<<
 *         if 0 <= i < this.length:
 *             this._sent[i].sent_start = True
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::set_break(int __pyx_v_i) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_break", __pyx_f[3], 301, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":302
 * 
 *     void set_break(int i) nogil:
 *         if 0 <= i < this.length:             # <<<<<<<<<<<<<<
 *             this._sent[i].sent_start = True
 *             this._break = this._b_i
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < this->length);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "_state.pxd":303
 *     void set_break(int i) nogil:
 *         if 0 <= i < this.length:
 *             this._sent[i].sent_start = True             # <<<<<<<<<<<<<<
 *             this._break = this._b_i
 * 
 */
    (this->_sent[__pyx_v_i]).sent_start = 1;

    /* "_state.pxd":304
 *         if 0 <= i < this.length:
 *             this._sent[i].sent_start = True
 *             this._break = this._b_i             # <<<<<<<<<<<<<<
 * 
 *     void clone(const StateC* src) nogil:
 */
    __pyx_t_3 = this->_b_i;
    this->_break = __pyx_t_3;

    /* "_state.pxd":302
 * 
 *     void set_break(int i) nogil:
 *         if 0 <= i < this.length:             # <<<<<<<<<<<<<<
 *             this._sent[i].sent_start = True
 *             this._break = this._b_i
 */
  }

  /* "_state.pxd":301
 *             this._sent[i].ent_type = ent_type
 * 
 *     void set_break(int i) nogil:             # <<<<<<<<<<<<<<
 *         if 0 <= i < this.length:
 *             this._sent[i].sent_start = True
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.set_break", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":306
 *             this._break = this._b_i
 * 
 *     void clone(const StateC* src) nogil:             # <<<<<<<<<<<<<<
 *         memcpy(this._sent, src._sent, this.length * sizeof(TokenC))
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::clone(__pyx_t_5spacy_6syntax_6_state_StateC const *__pyx_v_src) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("clone", __pyx_f[3], 306, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":307
 * 
 *     void clone(const StateC* src) nogil:
 *         memcpy(this._sent, src._sent, this.length * sizeof(TokenC))             # <<<<<<<<<<<<<<
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))
 *         memcpy(this._buffer, src._buffer, this.length * sizeof(int))
 */
  memcpy(this->_sent, __pyx_v_src->_sent, (this->length * (sizeof(struct __pyx_t_5spacy_7structs_TokenC))));

  /* "_state.pxd":308
 *     void clone(const StateC* src) nogil:
 *         memcpy(this._sent, src._sent, this.length * sizeof(TokenC))
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))             # <<<<<<<<<<<<<<
 *         memcpy(this._buffer, src._buffer, this.length * sizeof(int))
 *         memcpy(this._ents, src._ents, this.length * sizeof(Entity))
 */
  memcpy(this->_stack, __pyx_v_src->_stack, (this->length * (sizeof(int))));

  /* "_state.pxd":309
 *         memcpy(this._sent, src._sent, this.length * sizeof(TokenC))
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))
 *         memcpy(this._buffer, src._buffer, this.length * sizeof(int))             # <<<<<<<<<<<<<<
 *         memcpy(this._ents, src._ents, this.length * sizeof(Entity))
 *         memcpy(this.shifted, src.shifted, this.length * sizeof(this.shifted[0]))
 */
  memcpy(this->_buffer, __pyx_v_src->_buffer, (this->length * (sizeof(int))));

  /* "_state.pxd":310
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))
 *         memcpy(this._buffer, src._buffer, this.length * sizeof(int))
 *         memcpy(this._ents, src._ents, this.length * sizeof(Entity))             # <<<<<<<<<<<<<<
 *         memcpy(this.shifted, src.shifted, this.length * sizeof(this.shifted[0]))
 *         this.length = src.length
 */
  memcpy(this->_ents, __pyx_v_src->_ents, (this->length * (sizeof(struct __pyx_t_5spacy_7structs_Entity))));

  /* "_state.pxd":311
 *         memcpy(this._buffer, src._buffer, this.length * sizeof(int))
 *         memcpy(this._ents, src._ents, this.length * sizeof(Entity))
 *         memcpy(this.shifted, src.shifted, this.length * sizeof(this.shifted[0]))             # <<<<<<<<<<<<<<
 *         this.length = src.length
 *         this._b_i = src._b_i
 */
  memcpy(this->shifted, __pyx_v_src->shifted, (this->length * (sizeof((this->shifted[0])))));

  /* "_state.pxd":312
 *         memcpy(this._ents, src._ents, this.length * sizeof(Entity))
 *         memcpy(this.shifted, src.shifted, this.length * sizeof(this.shifted[0]))
 *         this.length = src.length             # <<<<<<<<<<<<<<
 *         this._b_i = src._b_i
 *         this._s_i = src._s_i
 */
  __pyx_t_1 = __pyx_v_src->length;
  this->length = __pyx_t_1;

  /* "_state.pxd":313
 *         memcpy(this.shifted, src.shifted, this.length * sizeof(this.shifted[0]))
 *         this.length = src.length
 *         this._b_i = src._b_i             # <<<<<<<<<<<<<<
 *         this._s_i = src._s_i
 *         this._e_i = src._e_i
 */
  __pyx_t_1 = __pyx_v_src->_b_i;
  this->_b_i = __pyx_t_1;

  /* "_state.pxd":314
 *         this.length = src.length
 *         this._b_i = src._b_i
 *         this._s_i = src._s_i             # <<<<<<<<<<<<<<
 *         this._e_i = src._e_i
 *         this._break = src._break
 */
  __pyx_t_1 = __pyx_v_src->_s_i;
  this->_s_i = __pyx_t_1;

  /* "_state.pxd":315
 *         this._b_i = src._b_i
 *         this._s_i = src._s_i
 *         this._e_i = src._e_i             # <<<<<<<<<<<<<<
 *         this._break = src._break
 * 
 */
  __pyx_t_1 = __pyx_v_src->_e_i;
  this->_e_i = __pyx_t_1;

  /* "_state.pxd":316
 *         this._s_i = src._s_i
 *         this._e_i = src._e_i
 *         this._break = src._break             # <<<<<<<<<<<<<<
 * 
 *     void fast_forward() nogil:
 */
  __pyx_t_1 = __pyx_v_src->_break;
  this->_break = __pyx_t_1;

  /* "_state.pxd":306
 *             this._break = this._b_i
 * 
 *     void clone(const StateC* src) nogil:             # <<<<<<<<<<<<<<
 *         memcpy(this._sent, src._sent, this.length * sizeof(TokenC))
 *         memcpy(this._stack, src._stack, this.length * sizeof(int))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.clone", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "_state.pxd":318
 *         this._break = src._break
 * 
 *     void fast_forward() nogil:             # <<<<<<<<<<<<<<
 *         # space token attachement policy:
 *         # - attach space tokens always to the last preceding real token
 */

void __pyx_t_5spacy_6syntax_6_state_StateC::fast_forward(void) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("fast_forward", __pyx_f[3], 318, 1, {__pyx_filename = __pyx_f[3]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "_state.pxd":325
 *         #   then make the last space token the head of all others
 * 
 *         while is_space_token(this.B_(0)) \             # <<<<<<<<<<<<<<
 *         or this.buffer_length() == 0 \
 *         or this.stack_depth() == 0:
 */
  while (1) {

    /* "_state.pxd":326
 * 
 *         while is_space_token(this.B_(0)) \
 *         or this.buffer_length() == 0 \             # <<<<<<<<<<<<<<
 *         or this.stack_depth() == 0:
 *             if this.buffer_length() == 0:
 */
    __pyx_t_2 = (__pyx_f_5spacy_6syntax_6_state_is_space_token(this->B_(0)) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "_state.pxd":327
 *         while is_space_token(this.B_(0)) \
 *         or this.buffer_length() == 0 \
 *         or this.stack_depth() == 0:             # <<<<<<<<<<<<<<
 *             if this.buffer_length() == 0:
 *                 # remove the last sentence's root from the stack
 */
    __pyx_t_2 = ((this->buffer_length() == 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((this->stack_depth() == 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "_state.pxd":328
 *         or this.buffer_length() == 0 \
 *         or this.stack_depth() == 0:
 *             if this.buffer_length() == 0:             # <<<<<<<<<<<<<<
 *                 # remove the last sentence's root from the stack
 *                 if this.stack_depth() == 1:
 */
    __pyx_t_1 = ((this->buffer_length() == 0) != 0);
    if (__pyx_t_1) {

      /* "_state.pxd":330
 *             if this.buffer_length() == 0:
 *                 # remove the last sentence's root from the stack
 *                 if this.stack_depth() == 1:             # <<<<<<<<<<<<<<
 *                     this.pop()
 *                 # parser got stuck: reduce stack or unshift
 */
      __pyx_t_1 = ((this->stack_depth() == 1) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":331
 *                 # remove the last sentence's root from the stack
 *                 if this.stack_depth() == 1:
 *                     this.pop()             # <<<<<<<<<<<<<<
 *                 # parser got stuck: reduce stack or unshift
 *                 elif this.stack_depth() > 1:
 */
        this->pop();

        /* "_state.pxd":330
 *             if this.buffer_length() == 0:
 *                 # remove the last sentence's root from the stack
 *                 if this.stack_depth() == 1:             # <<<<<<<<<<<<<<
 *                     this.pop()
 *                 # parser got stuck: reduce stack or unshift
 */
        goto __pyx_L9;
      }

      /* "_state.pxd":333
 *                     this.pop()
 *                 # parser got stuck: reduce stack or unshift
 *                 elif this.stack_depth() > 1:             # <<<<<<<<<<<<<<
 *                     if this.has_head(this.S(0)):
 *                         this.pop()
 */
      __pyx_t_1 = ((this->stack_depth() > 1) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":334
 *                 # parser got stuck: reduce stack or unshift
 *                 elif this.stack_depth() > 1:
 *                     if this.has_head(this.S(0)):             # <<<<<<<<<<<<<<
 *                         this.pop()
 *                     else:
 */
        __pyx_t_1 = (this->has_head(this->S(0)) != 0);
        if (__pyx_t_1) {

          /* "_state.pxd":335
 *                 elif this.stack_depth() > 1:
 *                     if this.has_head(this.S(0)):
 *                         this.pop()             # <<<<<<<<<<<<<<
 *                     else:
 *                         this.unshift()
 */
          this->pop();

          /* "_state.pxd":334
 *                 # parser got stuck: reduce stack or unshift
 *                 elif this.stack_depth() > 1:
 *                     if this.has_head(this.S(0)):             # <<<<<<<<<<<<<<
 *                         this.pop()
 *                     else:
 */
          goto __pyx_L10;
        }

        /* "_state.pxd":337
 *                         this.pop()
 *                     else:
 *                         this.unshift()             # <<<<<<<<<<<<<<
 *                 # stack is empty but there is another sentence on the buffer
 *                 elif (this.length - this._b_i) >= 1:
 */
        /*else*/ {
          this->unshift();
        }
        __pyx_L10:;

        /* "_state.pxd":333
 *                     this.pop()
 *                 # parser got stuck: reduce stack or unshift
 *                 elif this.stack_depth() > 1:             # <<<<<<<<<<<<<<
 *                     if this.has_head(this.S(0)):
 *                         this.pop()
 */
        goto __pyx_L9;
      }

      /* "_state.pxd":339
 *                         this.unshift()
 *                 # stack is empty but there is another sentence on the buffer
 *                 elif (this.length - this._b_i) >= 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 *                 else: # stack empty and nothing else coming
 */
      __pyx_t_1 = (((this->length - this->_b_i) >= 1) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":340
 *                 # stack is empty but there is another sentence on the buffer
 *                 elif (this.length - this._b_i) >= 1:
 *                     this.push()             # <<<<<<<<<<<<<<
 *                 else: # stack empty and nothing else coming
 *                     break
 */
        this->push();

        /* "_state.pxd":339
 *                         this.unshift()
 *                 # stack is empty but there is another sentence on the buffer
 *                 elif (this.length - this._b_i) >= 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 *                 else: # stack empty and nothing else coming
 */
        goto __pyx_L9;
      }

      /* "_state.pxd":342
 *                     this.push()
 *                 else: # stack empty and nothing else coming
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             elif is_space_token(this.B_(0)):
 */
      /*else*/ {
        goto __pyx_L4_break;
      }
      __pyx_L9:;

      /* "_state.pxd":328
 *         or this.buffer_length() == 0 \
 *         or this.stack_depth() == 0:
 *             if this.buffer_length() == 0:             # <<<<<<<<<<<<<<
 *                 # remove the last sentence's root from the stack
 *                 if this.stack_depth() == 1:
 */
      goto __pyx_L8;
    }

    /* "_state.pxd":344
 *                     break
 * 
 *             elif is_space_token(this.B_(0)):             # <<<<<<<<<<<<<<
 *                 # the normal case: we're somewhere inside a sentence
 *                 if this.stack_depth() > 0:
 */
    __pyx_t_1 = (__pyx_f_5spacy_6syntax_6_state_is_space_token(this->B_(0)) != 0);
    if (__pyx_t_1) {

      /* "_state.pxd":346
 *             elif is_space_token(this.B_(0)):
 *                 # the normal case: we're somewhere inside a sentence
 *                 if this.stack_depth() > 0:             # <<<<<<<<<<<<<<
 *                     # assert not is_space_token(this.S_(0))
 *                     # attach all coming space tokens to their last preceding
 */
      __pyx_t_1 = ((this->stack_depth() > 0) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":350
 *                     # attach all coming space tokens to their last preceding
 *                     # real token (which should be on the top of the stack)
 *                     while is_space_token(this.B_(0)):             # <<<<<<<<<<<<<<
 *                         this.add_arc(this.S(0),this.B(0),0)
 *                         this.push()
 */
        while (1) {
          __pyx_t_1 = (__pyx_f_5spacy_6syntax_6_state_is_space_token(this->B_(0)) != 0);
          if (!__pyx_t_1) break;

          /* "_state.pxd":351
 *                     # real token (which should be on the top of the stack)
 *                     while is_space_token(this.B_(0)):
 *                         this.add_arc(this.S(0),this.B(0),0)             # <<<<<<<<<<<<<<
 *                         this.push()
 *                         this.pop()
 */
          this->add_arc(this->S(0), this->B(0), 0);

          /* "_state.pxd":352
 *                     while is_space_token(this.B_(0)):
 *                         this.add_arc(this.S(0),this.B(0),0)
 *                         this.push()             # <<<<<<<<<<<<<<
 *                         this.pop()
 *                 # the rare case: we're at the beginning of a document:
 */
          this->push();

          /* "_state.pxd":353
 *                         this.add_arc(this.S(0),this.B(0),0)
 *                         this.push()
 *                         this.pop()             # <<<<<<<<<<<<<<
 *                 # the rare case: we're at the beginning of a document:
 *                 # space tokens are attached to the first real token on the buffer
 */
          this->pop();
        }

        /* "_state.pxd":346
 *             elif is_space_token(this.B_(0)):
 *                 # the normal case: we're somewhere inside a sentence
 *                 if this.stack_depth() > 0:             # <<<<<<<<<<<<<<
 *                     # assert not is_space_token(this.S_(0))
 *                     # attach all coming space tokens to their last preceding
 */
        goto __pyx_L11;
      }

      /* "_state.pxd":356
 *                 # the rare case: we're at the beginning of a document:
 *                 # space tokens are attached to the first real token on the buffer
 *                 elif this.stack_depth() == 0:             # <<<<<<<<<<<<<<
 *                     # store all space tokens on the stack until a real token shows up
 *                     # or the last token on the buffer is reached
 */
      __pyx_t_1 = ((this->stack_depth() == 0) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":359
 *                     # store all space tokens on the stack until a real token shows up
 *                     # or the last token on the buffer is reached
 *                     while is_space_token(this.B_(0)) and this.buffer_length() > 1:             # <<<<<<<<<<<<<<
 *                         this.push()
 *                     # empty the stack by attaching all space tokens to the
 */
        while (1) {
          __pyx_t_2 = (__pyx_f_5spacy_6syntax_6_state_is_space_token(this->B_(0)) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_2 = ((this->buffer_length() > 1) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (!__pyx_t_1) break;

          /* "_state.pxd":360
 *                     # or the last token on the buffer is reached
 *                     while is_space_token(this.B_(0)) and this.buffer_length() > 1:
 *                         this.push()             # <<<<<<<<<<<<<<
 *                     # empty the stack by attaching all space tokens to the
 *                     # first token on the buffer
 */
          this->push();
        }

        /* "_state.pxd":365
 *                     # boundary case: if all tokens are space tokens, the last one
 *                     # becomes the head of all others
 *                     while this.stack_depth() > 0:             # <<<<<<<<<<<<<<
 *                         this.add_arc(this.B(0),this.S(0),0)
 *                         this.pop()
 */
        while (1) {
          __pyx_t_1 = ((this->stack_depth() > 0) != 0);
          if (!__pyx_t_1) break;

          /* "_state.pxd":366
 *                     # becomes the head of all others
 *                     while this.stack_depth() > 0:
 *                         this.add_arc(this.B(0),this.S(0),0)             # <<<<<<<<<<<<<<
 *                         this.pop()
 *                     # move the first token onto the stack
 */
          this->add_arc(this->B(0), this->S(0), 0);

          /* "_state.pxd":367
 *                     while this.stack_depth() > 0:
 *                         this.add_arc(this.B(0),this.S(0),0)
 *                         this.pop()             # <<<<<<<<<<<<<<
 *                     # move the first token onto the stack
 *                     this.push()
 */
          this->pop();
        }

        /* "_state.pxd":369
 *                         this.pop()
 *                     # move the first token onto the stack
 *                     this.push()             # <<<<<<<<<<<<<<
 * 
 *             elif this.stack_depth() == 0:
 */
        this->push();

        /* "_state.pxd":356
 *                 # the rare case: we're at the beginning of a document:
 *                 # space tokens are attached to the first real token on the buffer
 *                 elif this.stack_depth() == 0:             # <<<<<<<<<<<<<<
 *                     # store all space tokens on the stack until a real token shows up
 *                     # or the last token on the buffer is reached
 */
      }
      __pyx_L11:;

      /* "_state.pxd":344
 *                     break
 * 
 *             elif is_space_token(this.B_(0)):             # <<<<<<<<<<<<<<
 *                 # the normal case: we're somewhere inside a sentence
 *                 if this.stack_depth() > 0:
 */
      goto __pyx_L8;
    }

    /* "_state.pxd":371
 *                     this.push()
 * 
 *             elif this.stack_depth() == 0:             # <<<<<<<<<<<<<<
 *                 # for one token sentences (?)
 *                 if this.buffer_length() == 1:
 */
    __pyx_t_1 = ((this->stack_depth() == 0) != 0);
    if (__pyx_t_1) {

      /* "_state.pxd":373
 *             elif this.stack_depth() == 0:
 *                 # for one token sentences (?)
 *                 if this.buffer_length() == 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 *                     this.pop()
 */
      __pyx_t_1 = ((this->buffer_length() == 1) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":374
 *                 # for one token sentences (?)
 *                 if this.buffer_length() == 1:
 *                     this.push()             # <<<<<<<<<<<<<<
 *                     this.pop()
 *                 # with an empty stack and a non-empty buffer
 */
        this->push();

        /* "_state.pxd":375
 *                 if this.buffer_length() == 1:
 *                     this.push()
 *                     this.pop()             # <<<<<<<<<<<<<<
 *                 # with an empty stack and a non-empty buffer
 *                 # only shift is valid anyway
 */
        this->pop();

        /* "_state.pxd":373
 *             elif this.stack_depth() == 0:
 *                 # for one token sentences (?)
 *                 if this.buffer_length() == 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 *                     this.pop()
 */
        goto __pyx_L20;
      }

      /* "_state.pxd":378
 *                 # with an empty stack and a non-empty buffer
 *                 # only shift is valid anyway
 *                 elif (this.length - this._b_i) >= 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 * 
 */
      __pyx_t_1 = (((this->length - this->_b_i) >= 1) != 0);
      if (__pyx_t_1) {

        /* "_state.pxd":379
 *                 # only shift is valid anyway
 *                 elif (this.length - this._b_i) >= 1:
 *                     this.push()             # <<<<<<<<<<<<<<
 * 
 *             else: # can this even happen?
 */
        this->push();

        /* "_state.pxd":378
 *                 # with an empty stack and a non-empty buffer
 *                 # only shift is valid anyway
 *                 elif (this.length - this._b_i) >= 1:             # <<<<<<<<<<<<<<
 *                     this.push()
 * 
 */
      }
      __pyx_L20:;

      /* "_state.pxd":371
 *                     this.push()
 * 
 *             elif this.stack_depth() == 0:             # <<<<<<<<<<<<<<
 *                 # for one token sentences (?)
 *                 if this.buffer_length() == 1:
 */
      goto __pyx_L8;
    }

    /* "_state.pxd":382
 * 
 *             else: # can this even happen?
 *                 break             # <<<<<<<<<<<<<<
 */
    /*else*/ {
      goto __pyx_L4_break;
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "_state.pxd":318
 *         this._break = src._break
 * 
 *     void fast_forward() nogil:             # <<<<<<<<<<<<<<
 *         # space token attachement policy:
 *         # - attach space tokens always to the last preceding real token
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("StateC.fast_forward", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":17
 * 
 *     @staticmethod
 *     cdef inline StateClass init(const TokenC* sent, int length):             # <<<<<<<<<<<<<<
 *         cdef StateClass self = StateClass(length)
 *         self.c = new StateC(sent, length)
 */

static CYTHON_INLINE struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_init(struct __pyx_t_5spacy_7structs_TokenC const *__pyx_v_sent, int __pyx_v_length) {
  struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self = 0;
  struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);
  __Pyx_TraceCall("init", __pyx_f[4], 17, 0, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":18
 *     @staticmethod
 *     cdef inline StateClass init(const TokenC* sent, int length):
 *         cdef StateClass self = StateClass(length)             # <<<<<<<<<<<<<<
 *         self.c = new StateC(sent, length)
 *         return self
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5spacy_6syntax_10stateclass_StateClass), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self = ((struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "stateclass.pxd":19
 *     cdef inline StateClass init(const TokenC* sent, int length):
 *         cdef StateClass self = StateClass(length)
 *         self.c = new StateC(sent, length)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->c = new __pyx_t_5spacy_6syntax_6_state_StateC(__pyx_v_sent, __pyx_v_length);

  /* "stateclass.pxd":20
 *         cdef StateClass self = StateClass(length)
 *         self.c = new StateC(sent, length)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int S(self, int i) nogil:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "stateclass.pxd":17
 * 
 *     @staticmethod
 *     cdef inline StateClass init(const TokenC* sent, int length):             # <<<<<<<<<<<<<<
 *         cdef StateClass self = StateClass(length)
 *         self.c = new StateC(sent, length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.syntax.stateclass.StateClass.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "stateclass.pxd":22
 *         return self
 * 
 *     cdef inline int S(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.S(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_S(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("S", __pyx_f[4], 22, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":23
 * 
 *     cdef inline int S(self, int i) nogil:
 *         return self.c.S(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int B(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->S(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":22
 *         return self
 * 
 *     cdef inline int S(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.S(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.S", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":25
 *         return self.c.S(i)
 * 
 *     cdef inline int B(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.B(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_B(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("B", __pyx_f[4], 25, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":26
 * 
 *     cdef inline int B(self, int i) nogil:
 *         return self.c.B(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* S_(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->B(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":25
 *         return self.c.S(i)
 * 
 *     cdef inline int B(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.B(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.B", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":28
 *         return self.c.B(i)
 * 
 *     cdef inline const TokenC* S_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.S_(i)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_S_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("S_", __pyx_f[4], 28, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":29
 * 
 *     cdef inline const TokenC* S_(self, int i) nogil:
 *         return self.c.S_(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* B_(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->S_(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":28
 *         return self.c.B(i)
 * 
 *     cdef inline const TokenC* S_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.S_(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.S_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":31
 *         return self.c.S_(i)
 * 
 *     cdef inline const TokenC* B_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.B_(i)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_B_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("B_", __pyx_f[4], 31, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":32
 * 
 *     cdef inline const TokenC* B_(self, int i) nogil:
 *         return self.c.B_(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* H_(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->B_(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":31
 *         return self.c.S_(i)
 * 
 *     cdef inline const TokenC* B_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.B_(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.B_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":34
 *         return self.c.B_(i)
 * 
 *     cdef inline const TokenC* H_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.H_(i)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_H_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("H_", __pyx_f[4], 34, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":35
 * 
 *     cdef inline const TokenC* H_(self, int i) nogil:
 *         return self.c.H_(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* E_(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->H_(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":34
 *         return self.c.B_(i)
 * 
 *     cdef inline const TokenC* H_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.H_(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.H_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":37
 *         return self.c.H_(i)
 * 
 *     cdef inline const TokenC* E_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.E_(i)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_E_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("E_", __pyx_f[4], 37, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":38
 * 
 *     cdef inline const TokenC* E_(self, int i) nogil:
 *         return self.c.E_(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* L_(self, int i, int idx) nogil:
 */
  __pyx_r = __pyx_v_self->c->E_(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":37
 *         return self.c.H_(i)
 * 
 *     cdef inline const TokenC* E_(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.E_(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.E_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":40
 *         return self.c.E_(i)
 * 
 *     cdef inline const TokenC* L_(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.L_(i, idx)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_L_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("L_", __pyx_f[4], 40, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":41
 * 
 *     cdef inline const TokenC* L_(self, int i, int idx) nogil:
 *         return self.c.L_(i, idx)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* R_(self, int i, int idx) nogil:
 */
  __pyx_r = __pyx_v_self->c->L_(__pyx_v_i, __pyx_v_idx);
  goto __pyx_L0;

  /* "stateclass.pxd":40
 *         return self.c.E_(i)
 * 
 *     cdef inline const TokenC* L_(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.L_(i, idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.L_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":43
 *         return self.c.L_(i, idx)
 * 
 *     cdef inline const TokenC* R_(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.R_(i, idx)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_R_(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("R_", __pyx_f[4], 43, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":44
 * 
 *     cdef inline const TokenC* R_(self, int i, int idx) nogil:
 *         return self.c.R_(i, idx)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline const TokenC* safe_get(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->R_(__pyx_v_i, __pyx_v_idx);
  goto __pyx_L0;

  /* "stateclass.pxd":43
 *         return self.c.L_(i, idx)
 * 
 *     cdef inline const TokenC* R_(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.R_(i, idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.R_", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":46
 *         return self.c.R_(i, idx)
 * 
 *     cdef inline const TokenC* safe_get(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.safe_get(i)
 * 
 */

static CYTHON_INLINE struct __pyx_t_5spacy_7structs_TokenC const *__pyx_f_5spacy_6syntax_10stateclass_10StateClass_safe_get(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_5spacy_7structs_TokenC const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("safe_get", __pyx_f[4], 46, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":47
 * 
 *     cdef inline const TokenC* safe_get(self, int i) nogil:
 *         return self.c.safe_get(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int H(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->safe_get(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":46
 *         return self.c.R_(i, idx)
 * 
 *     cdef inline const TokenC* safe_get(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.safe_get(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.safe_get", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":49
 *         return self.c.safe_get(i)
 * 
 *     cdef inline int H(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.H(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_H(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("H", __pyx_f[4], 49, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":50
 * 
 *     cdef inline int H(self, int i) nogil:
 *         return self.c.H(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int E(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->H(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":49
 *         return self.c.safe_get(i)
 * 
 *     cdef inline int H(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.H(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.H", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":52
 *         return self.c.H(i)
 * 
 *     cdef inline int E(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.E(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_E(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("E", __pyx_f[4], 52, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":53
 * 
 *     cdef inline int E(self, int i) nogil:
 *         return self.c.E(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int L(self, int i, int idx) nogil:
 */
  __pyx_r = __pyx_v_self->c->E(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":52
 *         return self.c.H(i)
 * 
 *     cdef inline int E(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.E(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.E", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":55
 *         return self.c.E(i)
 * 
 *     cdef inline int L(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.L(i, idx)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("L", __pyx_f[4], 55, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":56
 * 
 *     cdef inline int L(self, int i, int idx) nogil:
 *         return self.c.L(i, idx)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int R(self, int i, int idx) nogil:
 */
  __pyx_r = __pyx_v_self->c->L(__pyx_v_i, __pyx_v_idx);
  goto __pyx_L0;

  /* "stateclass.pxd":55
 *         return self.c.E(i)
 * 
 *     cdef inline int L(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.L(i, idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.L", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":58
 *         return self.c.L(i, idx)
 * 
 *     cdef inline int R(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.R(i, idx)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_idx) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("R", __pyx_f[4], 58, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":59
 * 
 *     cdef inline int R(self, int i, int idx) nogil:
 *         return self.c.R(i, idx)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint empty(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->R(__pyx_v_i, __pyx_v_idx);
  goto __pyx_L0;

  /* "stateclass.pxd":58
 *         return self.c.L(i, idx)
 * 
 *     cdef inline int R(self, int i, int idx) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.R(i, idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.R", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":61
 *         return self.c.R(i, idx)
 * 
 *     cdef inline bint empty(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.empty()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_empty(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("empty", __pyx_f[4], 61, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":62
 * 
 *     cdef inline bint empty(self) nogil:
 *         return self.c.empty()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint eol(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->empty();
  goto __pyx_L0;

  /* "stateclass.pxd":61
 *         return self.c.R(i, idx)
 * 
 *     cdef inline bint empty(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.empty", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":64
 *         return self.c.empty()
 * 
 *     cdef inline bint eol(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.eol()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_eol(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("eol", __pyx_f[4], 64, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":65
 * 
 *     cdef inline bint eol(self) nogil:
 *         return self.c.eol()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint at_break(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->eol();
  goto __pyx_L0;

  /* "stateclass.pxd":64
 *         return self.c.empty()
 * 
 *     cdef inline bint eol(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.eol()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.eol", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":67
 *         return self.c.eol()
 * 
 *     cdef inline bint at_break(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.at_break()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_at_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("at_break", __pyx_f[4], 67, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":68
 * 
 *     cdef inline bint at_break(self) nogil:
 *         return self.c.at_break()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint is_final(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->at_break();
  goto __pyx_L0;

  /* "stateclass.pxd":67
 *         return self.c.eol()
 * 
 *     cdef inline bint at_break(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.at_break()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.at_break", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":70
 *         return self.c.at_break()
 * 
 *     cdef inline bint is_final(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.is_final()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_is_final(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("is_final", __pyx_f[4], 70, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":71
 * 
 *     cdef inline bint is_final(self) nogil:
 *         return self.c.is_final()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint has_head(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->is_final();
  goto __pyx_L0;

  /* "stateclass.pxd":70
 *         return self.c.at_break()
 * 
 *     cdef inline bint is_final(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.is_final()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.is_final", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":73
 *         return self.c.is_final()
 * 
 *     cdef inline bint has_head(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.has_head(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_has_head(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("has_head", __pyx_f[4], 73, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":74
 * 
 *     cdef inline bint has_head(self, int i) nogil:
 *         return self.c.has_head(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int n_L(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->has_head(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":73
 *         return self.c.is_final()
 * 
 *     cdef inline bint has_head(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.has_head(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.has_head", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":76
 *         return self.c.has_head(i)
 * 
 *     cdef inline int n_L(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.n_L(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_L(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("n_L", __pyx_f[4], 76, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":77
 * 
 *     cdef inline int n_L(self, int i) nogil:
 *         return self.c.n_L(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int n_R(self, int i) nogil:
 */
  __pyx_r = __pyx_v_self->c->n_L(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":76
 *         return self.c.has_head(i)
 * 
 *     cdef inline int n_L(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.n_L(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.n_L", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":79
 *         return self.c.n_L(i)
 * 
 *     cdef inline int n_R(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.n_R(i)
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_n_R(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("n_R", __pyx_f[4], 79, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":80
 * 
 *     cdef inline int n_R(self, int i) nogil:
 *         return self.c.n_R(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint stack_is_connected(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->n_R(__pyx_v_i);
  goto __pyx_L0;

  /* "stateclass.pxd":79
 *         return self.c.n_L(i)
 * 
 *     cdef inline int n_R(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.n_R(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.n_R", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":82
 *         return self.c.n_R(i)
 * 
 *     cdef inline bint stack_is_connected(self) nogil:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_is_connected(CYTHON_UNUSED struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("stack_is_connected", __pyx_f[4], 82, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":83
 * 
 *     cdef inline bint stack_is_connected(self) nogil:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bint entity_is_open(self) nogil:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "stateclass.pxd":82
 *         return self.c.n_R(i)
 * 
 *     cdef inline bint stack_is_connected(self) nogil:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.stack_is_connected", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":85
 *         return False
 * 
 *     cdef inline bint entity_is_open(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.entity_is_open()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_entity_is_open(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("entity_is_open", __pyx_f[4], 85, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":86
 * 
 *     cdef inline bint entity_is_open(self) nogil:
 *         return self.c.entity_is_open()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int stack_depth(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->entity_is_open();
  goto __pyx_L0;

  /* "stateclass.pxd":85
 *         return False
 * 
 *     cdef inline bint entity_is_open(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.entity_is_open()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.entity_is_open", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":88
 *         return self.c.entity_is_open()
 * 
 *     cdef inline int stack_depth(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.stack_depth()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_stack_depth(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("stack_depth", __pyx_f[4], 88, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":89
 * 
 *     cdef inline int stack_depth(self) nogil:
 *         return self.c.stack_depth()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int buffer_length(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->stack_depth();
  goto __pyx_L0;

  /* "stateclass.pxd":88
 *         return self.c.entity_is_open()
 * 
 *     cdef inline int stack_depth(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.stack_depth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.stack_depth", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":91
 *         return self.c.stack_depth()
 * 
 *     cdef inline int buffer_length(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.buffer_length()
 * 
 */

static CYTHON_INLINE int __pyx_f_5spacy_6syntax_10stateclass_10StateClass_buffer_length(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("buffer_length", __pyx_f[4], 91, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":92
 * 
 *     cdef inline int buffer_length(self) nogil:
 *         return self.c.buffer_length()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void push(self) nogil:
 */
  __pyx_r = __pyx_v_self->c->buffer_length();
  goto __pyx_L0;

  /* "stateclass.pxd":91
 *         return self.c.stack_depth()
 * 
 *     cdef inline int buffer_length(self) nogil:             # <<<<<<<<<<<<<<
 *         return self.c.buffer_length()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.buffer_length", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "stateclass.pxd":94
 *         return self.c.buffer_length()
 * 
 *     cdef inline void push(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.push()
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_push(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("push", __pyx_f[4], 94, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":95
 * 
 *     cdef inline void push(self) nogil:
 *         self.c.push()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void pop(self) nogil:
 */
  __pyx_v_self->c->push();

  /* "stateclass.pxd":94
 *         return self.c.buffer_length()
 * 
 *     cdef inline void push(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.push()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.push", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":97
 *         self.c.push()
 * 
 *     cdef inline void pop(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.pop()
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_pop(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("pop", __pyx_f[4], 97, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":98
 * 
 *     cdef inline void pop(self) nogil:
 *         self.c.pop()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void unshift(self) nogil:
 */
  __pyx_v_self->c->pop();

  /* "stateclass.pxd":97
 *         self.c.push()
 * 
 *     cdef inline void pop(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.pop()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.pop", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":100
 *         self.c.pop()
 * 
 *     cdef inline void unshift(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.unshift()
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_unshift(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("unshift", __pyx_f[4], 100, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":101
 * 
 *     cdef inline void unshift(self) nogil:
 *         self.c.unshift()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void add_arc(self, int head, int child, int label) nogil:
 */
  __pyx_v_self->c->unshift();

  /* "stateclass.pxd":100
 *         self.c.pop()
 * 
 *     cdef inline void unshift(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.unshift()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.unshift", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":103
 *         self.c.unshift()
 * 
 *     cdef inline void add_arc(self, int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *         self.c.add_arc(head, child, label)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_add_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_head, int __pyx_v_child, int __pyx_v_label) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("add_arc", __pyx_f[4], 103, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":104
 * 
 *     cdef inline void add_arc(self, int head, int child, int label) nogil:
 *         self.c.add_arc(head, child, label)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void del_arc(self, int head, int child) nogil:
 */
  __pyx_v_self->c->add_arc(__pyx_v_head, __pyx_v_child, __pyx_v_label);

  /* "stateclass.pxd":103
 *         self.c.unshift()
 * 
 *     cdef inline void add_arc(self, int head, int child, int label) nogil:             # <<<<<<<<<<<<<<
 *         self.c.add_arc(head, child, label)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.add_arc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":106
 *         self.c.add_arc(head, child, label)
 * 
 *     cdef inline void del_arc(self, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *         self.c.del_arc(head, child)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_del_arc(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_head, int __pyx_v_child) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("del_arc", __pyx_f[4], 106, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":107
 * 
 *     cdef inline void del_arc(self, int head, int child) nogil:
 *         self.c.del_arc(head, child)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void open_ent(self, int label) nogil:
 */
  __pyx_v_self->c->del_arc(__pyx_v_head, __pyx_v_child);

  /* "stateclass.pxd":106
 *         self.c.add_arc(head, child, label)
 * 
 *     cdef inline void del_arc(self, int head, int child) nogil:             # <<<<<<<<<<<<<<
 *         self.c.del_arc(head, child)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.del_arc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":109
 *         self.c.del_arc(head, child)
 * 
 *     cdef inline void open_ent(self, int label) nogil:             # <<<<<<<<<<<<<<
 *         self.c.open_ent(label)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_open_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_label) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("open_ent", __pyx_f[4], 109, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":110
 * 
 *     cdef inline void open_ent(self, int label) nogil:
 *         self.c.open_ent(label)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void close_ent(self) nogil:
 */
  __pyx_v_self->c->open_ent(__pyx_v_label);

  /* "stateclass.pxd":109
 *         self.c.del_arc(head, child)
 * 
 *     cdef inline void open_ent(self, int label) nogil:             # <<<<<<<<<<<<<<
 *         self.c.open_ent(label)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.open_ent", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":112
 *         self.c.open_ent(label)
 * 
 *     cdef inline void close_ent(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.close_ent()
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_close_ent(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("close_ent", __pyx_f[4], 112, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":113
 * 
 *     cdef inline void close_ent(self) nogil:
 *         self.c.close_ent()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set_ent_tag(self, int i, int ent_iob, int ent_type) nogil:
 */
  __pyx_v_self->c->close_ent();

  /* "stateclass.pxd":112
 *         self.c.open_ent(label)
 * 
 *     cdef inline void close_ent(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.close_ent()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.close_ent", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":115
 *         self.c.close_ent()
 * 
 *     cdef inline void set_ent_tag(self, int i, int ent_iob, int ent_type) nogil:             # <<<<<<<<<<<<<<
 *         self.c.set_ent_tag(i, ent_iob, ent_type)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_ent_tag(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i, int __pyx_v_ent_iob, int __pyx_v_ent_type) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_ent_tag", __pyx_f[4], 115, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":116
 * 
 *     cdef inline void set_ent_tag(self, int i, int ent_iob, int ent_type) nogil:
 *         self.c.set_ent_tag(i, ent_iob, ent_type)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set_break(self, int i) nogil:
 */
  __pyx_v_self->c->set_ent_tag(__pyx_v_i, __pyx_v_ent_iob, __pyx_v_ent_type);

  /* "stateclass.pxd":115
 *         self.c.close_ent()
 * 
 *     cdef inline void set_ent_tag(self, int i, int ent_iob, int ent_type) nogil:             # <<<<<<<<<<<<<<
 *         self.c.set_ent_tag(i, ent_iob, ent_type)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.set_ent_tag", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":118
 *         self.c.set_ent_tag(i, ent_iob, ent_type)
 * 
 *     cdef inline void set_break(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         self.c.set_break(i)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_set_break(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, int __pyx_v_i) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("set_break", __pyx_f[4], 118, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":119
 * 
 *     cdef inline void set_break(self, int i) nogil:
 *         self.c.set_break(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void clone(self, StateClass src) nogil:
 */
  __pyx_v_self->c->set_break(__pyx_v_i);

  /* "stateclass.pxd":118
 *         self.c.set_ent_tag(i, ent_iob, ent_type)
 * 
 *     cdef inline void set_break(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         self.c.set_break(i)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.set_break", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":121
 *         self.c.set_break(i)
 * 
 *     cdef inline void clone(self, StateClass src) nogil:             # <<<<<<<<<<<<<<
 *         self.c.clone(src.c)
 * 
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_clone(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_src) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("clone", __pyx_f[4], 121, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":122
 * 
 *     cdef inline void clone(self, StateClass src) nogil:
 *         self.c.clone(src.c)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void fast_forward(self) nogil:
 */
  __pyx_v_self->c->clone(__pyx_v_src->c);

  /* "stateclass.pxd":121
 *         self.c.set_break(i)
 * 
 *     cdef inline void clone(self, StateClass src) nogil:             # <<<<<<<<<<<<<<
 *         self.c.clone(src.c)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.clone", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "stateclass.pxd":124
 *         self.c.clone(src.c)
 * 
 *     cdef inline void fast_forward(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.fast_forward()
 */

static CYTHON_INLINE void __pyx_f_5spacy_6syntax_10stateclass_10StateClass_fast_forward(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("fast_forward", __pyx_f[4], 124, 1, {__pyx_filename = __pyx_f[4]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "stateclass.pxd":125
 * 
 *     cdef inline void fast_forward(self) nogil:
 *         self.c.fast_forward()             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->c->fast_forward();

  /* "stateclass.pxd":124
 *         self.c.clone(src.c)
 * 
 *     cdef inline void fast_forward(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.fast_forward()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("spacy.syntax.stateclass.StateClass.fast_forward", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_ArcEager __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_ArcEager(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *p;
  PyObject *o = __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem*)__pyx_vtabptr_5spacy_6syntax_9arc_eager_ArcEager;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_ArcEager(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem)) __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_ArcEager);
}

static int __pyx_tp_traverse_5spacy_6syntax_9arc_eager_ArcEager(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem)) ? ((__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_traverse) ? __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5spacy_6syntax_9arc_eager_ArcEager)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_5spacy_6syntax_9arc_eager_ArcEager(PyObject *o) {
  if (likely(__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem)) { if (__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_clear) __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5spacy_6syntax_9arc_eager_ArcEager);
  return 0;
}

static PyObject *__pyx_getprop_5spacy_6syntax_9arc_eager_8ArcEager_action_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_12action_types_1__get__(o);
}

static PyMethodDef __pyx_methods_5spacy_6syntax_9arc_eager_ArcEager[] = {
  {"get_actions", (PyCFunction)__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_3get_actions, METH_VARARGS|METH_KEYWORDS, 0},
  {"move_name", (PyCFunction)__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_5move_name, METH_VARARGS|METH_KEYWORDS, 0},
  {"finalize_doc", (PyCFunction)__pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_7finalize_doc, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5spacy_6syntax_9arc_eager_ArcEager[] = {
  {(char *)"action_types", __pyx_getprop_5spacy_6syntax_9arc_eager_8ArcEager_action_types, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_ArcEager = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.ArcEager", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_ArcEager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_ArcEager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5spacy_6syntax_9arc_eager_ArcEager, /*tp_traverse*/
  __pyx_tp_clear_5spacy_6syntax_9arc_eager_ArcEager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5spacy_6syntax_9arc_eager_ArcEager, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5spacy_6syntax_9arc_eager_ArcEager, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5spacy_6syntax_9arc_eager_8ArcEager_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_ArcEager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Shift __pyx_vtable_5spacy_6syntax_9arc_eager_Shift;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Shift(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_Shift *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_Shift *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_6syntax_9arc_eager_Shift;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Shift(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_Shift = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.Shift", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_Shift), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Shift, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_Shift, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Reduce __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Reduce(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_Reduce *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_Reduce *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_6syntax_9arc_eager_Reduce;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Reduce(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_Reduce = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.Reduce", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_Reduce), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Reduce, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_Reduce, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_LeftArc __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_LeftArc(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_LeftArc *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_LeftArc *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_6syntax_9arc_eager_LeftArc;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_LeftArc(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_LeftArc = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.LeftArc", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_LeftArc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_LeftArc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_LeftArc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_RightArc __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_RightArc(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_RightArc *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_RightArc *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_6syntax_9arc_eager_RightArc;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_RightArc(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_RightArc = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.RightArc", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_RightArc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_RightArc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_RightArc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5spacy_6syntax_9arc_eager_Break __pyx_vtable_5spacy_6syntax_9arc_eager_Break;

static PyObject *__pyx_tp_new_5spacy_6syntax_9arc_eager_Break(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_6syntax_9arc_eager_Break *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5spacy_6syntax_9arc_eager_Break *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_6syntax_9arc_eager_Break;
  return o;
}

static void __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Break(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5spacy_6syntax_9arc_eager_Break = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.syntax.arc_eager.Break", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_6syntax_9arc_eager_Break), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_6syntax_9arc_eager_Break, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_6syntax_9arc_eager_Break, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "arc_eager",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
  {&__pyx_kp_u_Could_not_find_a_gold_standard_a, __pyx_k_Could_not_find_a_gold_standard_a, sizeof(__pyx_k_Could_not_find_a_gold_standard_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_find_a_gold_standard_a_2, __pyx_k_Could_not_find_a_gold_standard_a_2, sizeof(__pyx_k_Could_not_find_a_gold_standard_a_2), 0, 1, 0, 0},
  {&__pyx_n_u_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 1, 0, 1},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 1},
  {&__pyx_n_s_MOVE_NAMES, __pyx_k_MOVE_NAMES, sizeof(__pyx_k_MOVE_NAMES), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_PseudoProjectivity, __pyx_k_PseudoProjectivity, sizeof(__pyx_k_PseudoProjectivity), 0, 0, 1, 1},
  {&__pyx_n_u_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 1, 0, 1},
  {&__pyx_n_u_ROOT, __pyx_k_ROOT, sizeof(__pyx_k_ROOT), 0, 1, 0, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_u_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_n_u_actions, __pyx_k_actions, sizeof(__pyx_k_actions), 0, 1, 0, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_actions, __pyx_k_get_actions, sizeof(__pyx_k_get_actions), 0, 0, 1, 1},
  {&__pyx_n_u_gold_parses, __pyx_k_gold_parses, sizeof(__pyx_k_gold_parses), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_is_nonproj_tree, __pyx_k_is_nonproj_tree, sizeof(__pyx_k_is_nonproj_tree), 0, 0, 1, 1},
  {&__pyx_n_s_is_parsed, __pyx_k_is_parsed, sizeof(__pyx_k_is_parsed), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_u_left_labels, __pyx_k_left_labels, sizeof(__pyx_k_left_labels), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_move, __pyx_k_move, sizeof(__pyx_k_move), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_nonproj, __pyx_k_nonproj, sizeof(__pyx_k_nonproj), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_state, __pyx_k_print_state, sizeof(__pyx_k_print_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_u_right_labels, __pyx_k_right_labels, sizeof(__pyx_k_right_labels), 0, 1, 0, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "spacy\syntax\arc_eager.pyx":367
 *     cdef Transition lookup_transition(self, object name) except *:
 *         if '-' in name:
 *             move_str, label_str = name.split('-', 1)             # <<<<<<<<<<<<<<
 *             label = self.strings[label_str]
 *         else:
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_kp_u__2, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "spacy\syntax\arc_eager.pyx":483
 *             # Check projectivity --- leading cause
 *             if is_nonproj_tree(gold.heads):
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Could not find a gold-standard action to supervise the dependency "
 *                     "parser.\n"
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Could_not_find_a_gold_standard_a); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "c:\python\lib\site-packages\Cython\Includes\numpy\__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initarc_eager(void); /*proto*/
PyMODINIT_FUNC initarc_eager(void)
#else
PyMODINIT_FUNC PyInit_arc_eager(void); /*proto*/
PyMODINIT_FUNC PyInit_arc_eager(void)
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_arc_eager(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("arc_eager", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_spacy__syntax__arc_eager) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "spacy.syntax.arc_eager")) {
      if (unlikely(PyDict_SetItemString(modules, "spacy.syntax.arc_eager", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("push_cost", (void (*)(void))__pyx_f_5spacy_6syntax_9arc_eager_push_cost, "__pyx_t_5thinc_8typedefs_weight_t (struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("arc_cost", (void (*)(void))__pyx_f_5spacy_6syntax_9arc_eager_arc_cost, "__pyx_t_5thinc_8typedefs_weight_t (struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem = __Pyx_ImportType("spacy.syntax.transition_system", "TransitionSystem", sizeof(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem), 1); if (unlikely(!__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_6syntax_17transition_system_TransitionSystem = (struct __pyx_vtabstruct_5spacy_6syntax_17transition_system_TransitionSystem*)__Pyx_GetVtable(__pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6syntax_17transition_system_TransitionSystem)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_ArcEager = &__pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base = *__pyx_vtabptr_5spacy_6syntax_17transition_system_TransitionSystem;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.initialize_state = (int (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, __pyx_t_5spacy_6syntax_6_state_StateC *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_initialize_state;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.finalize_state = (int (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, __pyx_t_5spacy_6syntax_6_state_StateC *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_finalize_state;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.preprocess_gold = (int (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, struct __pyx_obj_5spacy_4gold_GoldParse *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_preprocess_gold;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.lookup_transition = (struct __pyx_t_5spacy_6syntax_17transition_system_Transition (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, PyObject *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_lookup_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.init_transition = (struct __pyx_t_5spacy_6syntax_17transition_system_Transition (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int, int, int))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_init_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.set_valid = (int (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int *, __pyx_t_5spacy_6syntax_6_state_StateC const *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_ArcEager.__pyx_base.set_costs = (int (*)(struct __pyx_obj_5spacy_6syntax_17transition_system_TransitionSystem *, int *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_obj_5spacy_4gold_GoldParse *))__pyx_f_5spacy_6syntax_9arc_eager_8ArcEager_set_costs;
  __pyx_type_5spacy_6syntax_9arc_eager_ArcEager.tp_base = __pyx_ptype_5spacy_6syntax_17transition_system_TransitionSystem;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_ArcEager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_ArcEager.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_ArcEager.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_ArcEager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ArcEager", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_ArcEager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_ArcEager = &__pyx_type_5spacy_6syntax_9arc_eager_ArcEager;
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_Shift = &__pyx_vtable_5spacy_6syntax_9arc_eager_Shift;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Shift.is_valid = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Shift_is_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Shift.transition = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Shift_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Shift.cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Shift_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Shift.move_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *))__pyx_f_5spacy_6syntax_9arc_eager_5Shift_move_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Shift.label_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Shift_label_cost;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_Shift) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_Shift.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_Shift.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_Shift) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Shift", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_Shift) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_Shift = &__pyx_type_5spacy_6syntax_9arc_eager_Shift;
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_Reduce = &__pyx_vtable_5spacy_6syntax_9arc_eager_Reduce;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce.is_valid = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_is_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce.transition = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC *, int))__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce.cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce.move_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *))__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_move_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Reduce.label_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_6Reduce_label_cost;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_Reduce) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_Reduce.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_Reduce.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_Reduce) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Reduce", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_Reduce) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_Reduce = &__pyx_type_5spacy_6syntax_9arc_eager_Reduce;
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_LeftArc = &__pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc;
  __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc.is_valid = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_is_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc.transition = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC *, int))__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc.cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc.move_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *))__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_move_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_LeftArc.label_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_7LeftArc_label_cost;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_LeftArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_LeftArc.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_LeftArc.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_LeftArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "LeftArc", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_LeftArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_LeftArc = &__pyx_type_5spacy_6syntax_9arc_eager_LeftArc;
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_RightArc = &__pyx_vtable_5spacy_6syntax_9arc_eager_RightArc;
  __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc.is_valid = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_is_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc.transition = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC *, int))__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc.cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc.move_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *))__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_move_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_RightArc.label_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_8RightArc_label_cost;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_RightArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_RightArc.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_RightArc.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_RightArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "RightArc", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_RightArc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_RightArc = &__pyx_type_5spacy_6syntax_9arc_eager_RightArc;
  __pyx_vtabptr_5spacy_6syntax_9arc_eager_Break = &__pyx_vtable_5spacy_6syntax_9arc_eager_Break;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Break.is_valid = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Break_is_valid;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Break.transition = (int (*)(__pyx_t_5spacy_6syntax_6_state_StateC *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Break_transition;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Break.cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Break_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Break.move_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *))__pyx_f_5spacy_6syntax_9arc_eager_5Break_move_cost;
  __pyx_vtable_5spacy_6syntax_9arc_eager_Break.label_cost = (__pyx_t_5thinc_8typedefs_weight_t (*)(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass *, struct __pyx_t_5spacy_4gold_GoldParseC const *, int))__pyx_f_5spacy_6syntax_9arc_eager_5Break_label_cost;
  if (PyType_Ready(&__pyx_type_5spacy_6syntax_9arc_eager_Break) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5spacy_6syntax_9arc_eager_Break.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5spacy_6syntax_9arc_eager_Break.tp_dict, __pyx_vtabptr_5spacy_6syntax_9arc_eager_Break) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Break", (PyObject *)&__pyx_type_5spacy_6syntax_9arc_eager_Break) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_9arc_eager_Break = &__pyx_type_5spacy_6syntax_9arc_eager_Break;
  /*--- Type import code ---*/
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType("cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType("cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Address)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType("preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType("preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_7strings_StringStore = __Pyx_ImportType("spacy.strings", "StringStore", sizeof(struct __pyx_obj_5spacy_7strings_StringStore), 1); if (unlikely(!__pyx_ptype_5spacy_7strings_StringStore)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_7strings_StringStore = (struct __pyx_vtabstruct_5spacy_7strings_StringStore*)__Pyx_GetVtable(__pyx_ptype_5spacy_7strings_StringStore->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_7strings_StringStore)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_10morphology_Morphology = __Pyx_ImportType("spacy.morphology", "Morphology", sizeof(struct __pyx_obj_5spacy_10morphology_Morphology), 1); if (unlikely(!__pyx_ptype_5spacy_10morphology_Morphology)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_10morphology_Morphology = (struct __pyx_vtabstruct_5spacy_10morphology_Morphology*)__Pyx_GetVtable(__pyx_ptype_5spacy_10morphology_Morphology->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_10morphology_Morphology)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_5vocab_Vocab = __Pyx_ImportType("spacy.vocab", "Vocab", sizeof(struct __pyx_obj_5spacy_5vocab_Vocab), 1); if (unlikely(!__pyx_ptype_5spacy_5vocab_Vocab)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_5vocab_Vocab = (struct __pyx_vtabstruct_5spacy_5vocab_Vocab*)__Pyx_GetVtable(__pyx_ptype_5spacy_5vocab_Vocab->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_5vocab_Vocab)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6lexeme_Lexeme = __Pyx_ImportType("spacy.lexeme", "Lexeme", sizeof(struct __pyx_obj_5spacy_6lexeme_Lexeme), 1); if (unlikely(!__pyx_ptype_5spacy_6lexeme_Lexeme)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_6lexeme_Lexeme = (struct __pyx_vtabstruct_5spacy_6lexeme_Lexeme*)__Pyx_GetVtable(__pyx_ptype_5spacy_6lexeme_Lexeme->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6lexeme_Lexeme)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_6syntax_10stateclass_StateClass = __Pyx_ImportType("spacy.syntax.stateclass", "StateClass", sizeof(struct __pyx_obj_5spacy_6syntax_10stateclass_StateClass), 1); if (unlikely(!__pyx_ptype_5spacy_6syntax_10stateclass_StateClass)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5spacy_6syntax_10stateclass_StateClass = (struct __pyx_vtabstruct_5spacy_6syntax_10stateclass_StateClass*)__Pyx_GetVtable(__pyx_ptype_5spacy_6syntax_10stateclass_StateClass->tp_dict); if (unlikely(!__pyx_vtabptr_5spacy_6syntax_10stateclass_StateClass)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5spacy_4gold_GoldParse = __Pyx_ImportType("spacy.gold", "GoldParse", sizeof(struct __pyx_obj_5spacy_4gold_GoldParse), 1); if (unlikely(!__pyx_ptype_5spacy_4gold_GoldParse)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("spacy.vocab"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "EMPTY_LEXEME", (void **)&__pyx_vp_5spacy_5vocab_EMPTY_LEXEME, "struct __pyx_t_5spacy_7structs_LexemeC") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("spacy.lexeme"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_2, "EMPTY_LEXEME", (void **)&__pyx_vp_5spacy_6lexeme_EMPTY_LEXEME, "struct __pyx_t_5spacy_7structs_LexemeC") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  /*--- Function import code ---*/
  __pyx_t_3 = __Pyx_ImportModule("murmurhash.mrmr"); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_3, "hash64", (void (**)(void))&__pyx_f_10murmurhash_4mrmr_hash64, "uint64_t (void *, int, uint64_t)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __Pyx_TraceCall("PyMODINIT_FUNC PyInit_arc_eager(void)", __pyx_f[0], 1, 0, {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "spacy\syntax\arc_eager.pyx":8
 * 
 * from cpython.ref cimport PyObject, Py_INCREF, Py_XDECREF
 * import ctypes             # <<<<<<<<<<<<<<
 * from libc.stdint cimport uint32_t
 * from libc.string cimport memcpy
 */
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_ctypes, 0, -1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":15
 * from .stateclass cimport StateClass
 * from ._state cimport StateC, is_space_token
 * from .nonproj import PseudoProjectivity             # <<<<<<<<<<<<<<
 * from .nonproj import is_nonproj_tree
 * from .transition_system cimport do_func_t, get_cost_func_t
 */
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_PseudoProjectivity);
  __Pyx_GIVEREF(__pyx_n_s_PseudoProjectivity);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_PseudoProjectivity);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_nonproj, __pyx_t_4, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_PseudoProjectivity); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PseudoProjectivity, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "spacy\syntax\arc_eager.pyx":16
 * from ._state cimport StateC, is_space_token
 * from .nonproj import PseudoProjectivity
 * from .nonproj import is_nonproj_tree             # <<<<<<<<<<<<<<
 * from .transition_system cimport do_func_t, get_cost_func_t
 * from .transition_system cimport move_cost_func_t, label_cost_func_t
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_is_nonproj_tree);
  __Pyx_GIVEREF(__pyx_n_s_is_nonproj_tree);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_is_nonproj_tree);
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_nonproj, __pyx_t_5, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_is_nonproj_tree); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_nonproj_tree, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":29
 * DEF USE_BREAK = True
 * 
 * cdef weight_t MIN_SCORE = -90000             # <<<<<<<<<<<<<<
 * 
 * # Break transition from here
 */
  __pyx_v_5spacy_6syntax_9arc_eager_MIN_SCORE = -90000.0;

  /* "spacy\syntax\arc_eager.pyx":44
 * 
 * 
 * MOVE_NAMES = [None] * N_MOVES             # <<<<<<<<<<<<<<
 * MOVE_NAMES[SHIFT] = 'S'
 * MOVE_NAMES[REDUCE] = 'D'
 */
  __pyx_t_4 = PyList_New(1 * ((__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES<0) ? 0:__pyx_e_5spacy_6syntax_9arc_eager_N_MOVES)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_e_5spacy_6syntax_9arc_eager_N_MOVES; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);
    }
  }
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOVE_NAMES, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":45
 * 
 * MOVE_NAMES = [None] * N_MOVES
 * MOVE_NAMES[SHIFT] = 'S'             # <<<<<<<<<<<<<<
 * MOVE_NAMES[REDUCE] = 'D'
 * MOVE_NAMES[LEFT] = 'L'
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_e_5spacy_6syntax_9arc_eager_SHIFT, __pyx_n_u_S, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":46
 * MOVE_NAMES = [None] * N_MOVES
 * MOVE_NAMES[SHIFT] = 'S'
 * MOVE_NAMES[REDUCE] = 'D'             # <<<<<<<<<<<<<<
 * MOVE_NAMES[LEFT] = 'L'
 * MOVE_NAMES[RIGHT] = 'R'
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_e_5spacy_6syntax_9arc_eager_REDUCE, __pyx_n_u_D, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":47
 * MOVE_NAMES[SHIFT] = 'S'
 * MOVE_NAMES[REDUCE] = 'D'
 * MOVE_NAMES[LEFT] = 'L'             # <<<<<<<<<<<<<<
 * MOVE_NAMES[RIGHT] = 'R'
 * MOVE_NAMES[BREAK] = 'B'
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_e_5spacy_6syntax_9arc_eager_LEFT, __pyx_n_u_L, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":48
 * MOVE_NAMES[REDUCE] = 'D'
 * MOVE_NAMES[LEFT] = 'L'
 * MOVE_NAMES[RIGHT] = 'R'             # <<<<<<<<<<<<<<
 * MOVE_NAMES[BREAK] = 'B'
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_e_5spacy_6syntax_9arc_eager_RIGHT, __pyx_n_u_R, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":49
 * MOVE_NAMES[LEFT] = 'L'
 * MOVE_NAMES[RIGHT] = 'R'
 * MOVE_NAMES[BREAK] = 'B'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MOVE_NAMES); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_e_5spacy_6syntax_9arc_eager_BREAK, __pyx_n_u_B, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy\syntax\arc_eager.pyx":314
 * 
 *     @classmethod
 *     def get_actions(cls, **kwargs):             # <<<<<<<<<<<<<<
 *         actions = kwargs.get('actions',
 *                     {
 */
  __pyx_t_4 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5spacy_6syntax_9arc_eager_ArcEager, __pyx_n_s_get_actions); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "spacy\syntax\arc_eager.pyx":313
 *         self.init_beam_state = _init_state
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def get_actions(cls, **kwargs):
 *         actions = kwargs.get('actions',
 */
  __pyx_t_5 = __Pyx_Method_ClassMethod(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5spacy_6syntax_9arc_eager_ArcEager->tp_dict, __pyx_n_s_get_actions, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_5spacy_6syntax_9arc_eager_ArcEager);

  /* "spacy\syntax\arc_eager.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * # cython: cdivision=True
 * # cython: infer_types=True
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "stateclass.pxd":124
 *         self.c.clone(src.c)
 * 
 *     cdef inline void fast_forward(self) nogil:             # <<<<<<<<<<<<<<
 *         self.c.fast_forward()
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init spacy.syntax.arc_eager", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init spacy.syntax.arc_eager");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    PyErr_Fetch(&type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        PyErr_Restore(type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5spacy_5attrs_attr_id_t(enum __pyx_t_5spacy_5attrs_attr_id_t value) {
    const enum __pyx_t_5spacy_5attrs_attr_id_t neg_one = (enum __pyx_t_5spacy_5attrs_attr_id_t) -1, const_zero = (enum __pyx_t_5spacy_5attrs_attr_id_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5spacy_5attrs_attr_id_t),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
